
Eathernet_test_tcp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e360  08000184  08000184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001de8  0800e4e4  0800e4e4  0000f4e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080102cc  080102cc  0001206c  2**0
                  CONTENTS
  4 .ARM          00000008  080102cc  080102cc  000112cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080102d4  080102d4  0001206c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080102d4  080102d4  000112d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080102d8  080102d8  000112d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080102dc  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006e84  2000006c  08010348  0001206c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006ef0  08010348  00012ef0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001206c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c5ae  00000000  00000000  00012095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050ae  00000000  00000000  0002e643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  000336f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f9c  00000000  00000000  00034af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b87e  00000000  00000000  00035a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025fed  00000000  00000000  0006130a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3f80  00000000  00000000  000872f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015b277  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005700  00000000  00000000  0015b2bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001609bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	@ (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	2000006c 	.word	0x2000006c
 80001a0:	00000000 	.word	0x00000000
 80001a4:	0800e4cc 	.word	0x0800e4cc

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	@ (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	@ (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	@ (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000070 	.word	0x20000070
 80001c0:	0800e4cc 	.word	0x0800e4cc

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b968 	b.w	80004ac <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9d08      	ldr	r5, [sp, #32]
 80001fa:	460c      	mov	r4, r1
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d14e      	bne.n	800029e <__udivmoddi4+0xaa>
 8000200:	4694      	mov	ip, r2
 8000202:	458c      	cmp	ip, r1
 8000204:	4686      	mov	lr, r0
 8000206:	fab2 f282 	clz	r2, r2
 800020a:	d962      	bls.n	80002d2 <__udivmoddi4+0xde>
 800020c:	b14a      	cbz	r2, 8000222 <__udivmoddi4+0x2e>
 800020e:	f1c2 0320 	rsb	r3, r2, #32
 8000212:	4091      	lsls	r1, r2
 8000214:	fa20 f303 	lsr.w	r3, r0, r3
 8000218:	fa0c fc02 	lsl.w	ip, ip, r2
 800021c:	4319      	orrs	r1, r3
 800021e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000222:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000226:	fbb1 f4f7 	udiv	r4, r1, r7
 800022a:	fb07 1114 	mls	r1, r7, r4, r1
 800022e:	fa1f f68c 	uxth.w	r6, ip
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023a:	fb04 f106 	mul.w	r1, r4, r6
 800023e:	4299      	cmp	r1, r3
 8000240:	d90a      	bls.n	8000258 <__udivmoddi4+0x64>
 8000242:	eb1c 0303 	adds.w	r3, ip, r3
 8000246:	f104 30ff 	add.w	r0, r4, #4294967295
 800024a:	f080 8110 	bcs.w	800046e <__udivmoddi4+0x27a>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 810d 	bls.w	800046e <__udivmoddi4+0x27a>
 8000254:	3c02      	subs	r4, #2
 8000256:	4463      	add	r3, ip
 8000258:	1a59      	subs	r1, r3, r1
 800025a:	fbb1 f0f7 	udiv	r0, r1, r7
 800025e:	fb07 1110 	mls	r1, r7, r0, r1
 8000262:	fb00 f606 	mul.w	r6, r0, r6
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	429e      	cmp	r6, r3
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x94>
 8000272:	eb1c 0303 	adds.w	r3, ip, r3
 8000276:	f100 31ff 	add.w	r1, r0, #4294967295
 800027a:	f080 80fa 	bcs.w	8000472 <__udivmoddi4+0x27e>
 800027e:	429e      	cmp	r6, r3
 8000280:	f240 80f7 	bls.w	8000472 <__udivmoddi4+0x27e>
 8000284:	4463      	add	r3, ip
 8000286:	3802      	subs	r0, #2
 8000288:	2100      	movs	r1, #0
 800028a:	1b9b      	subs	r3, r3, r6
 800028c:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa6>
 8000292:	40d3      	lsrs	r3, r2
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xba>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb4>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa6>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x150>
 80002b6:	42a3      	cmp	r3, r4
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xcc>
 80002ba:	4290      	cmp	r0, r2
 80002bc:	f0c0 80ee 	bcc.w	800049c <__udivmoddi4+0x2a8>
 80002c0:	1a86      	subs	r6, r0, r2
 80002c2:	eb64 0303 	sbc.w	r3, r4, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	d0e6      	beq.n	800029a <__udivmoddi4+0xa6>
 80002cc:	e9c5 6300 	strd	r6, r3, [r5]
 80002d0:	e7e3      	b.n	800029a <__udivmoddi4+0xa6>
 80002d2:	2a00      	cmp	r2, #0
 80002d4:	f040 808f 	bne.w	80003f6 <__udivmoddi4+0x202>
 80002d8:	eba1 040c 	sub.w	r4, r1, ip
 80002dc:	2101      	movs	r1, #1
 80002de:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e2:	fa1f f78c 	uxth.w	r7, ip
 80002e6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ea:	fb08 4416 	mls	r4, r8, r6, r4
 80002ee:	fb07 f006 	mul.w	r0, r7, r6
 80002f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	4298      	cmp	r0, r3
 80002fc:	d908      	bls.n	8000310 <__udivmoddi4+0x11c>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 34ff 	add.w	r4, r6, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x11a>
 8000308:	4298      	cmp	r0, r3
 800030a:	f200 80cb 	bhi.w	80004a4 <__udivmoddi4+0x2b0>
 800030e:	4626      	mov	r6, r4
 8000310:	1a1c      	subs	r4, r3, r0
 8000312:	fbb4 f0f8 	udiv	r0, r4, r8
 8000316:	fb08 4410 	mls	r4, r8, r0, r4
 800031a:	fb00 f707 	mul.w	r7, r0, r7
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	429f      	cmp	r7, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x148>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x146>
 8000334:	429f      	cmp	r7, r3
 8000336:	f200 80ae 	bhi.w	8000496 <__udivmoddi4+0x2a2>
 800033a:	4620      	mov	r0, r4
 800033c:	1bdb      	subs	r3, r3, r7
 800033e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x9c>
 8000344:	f1c1 0720 	rsb	r7, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 fc07 	lsr.w	ip, r2, r7
 800034e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000352:	fa24 f607 	lsr.w	r6, r4, r7
 8000356:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800035a:	fbb6 f8f9 	udiv	r8, r6, r9
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	fb09 6618 	mls	r6, r9, r8, r6
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	408c      	lsls	r4, r1
 800036c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000370:	fb08 f00e 	mul.w	r0, r8, lr
 8000374:	431c      	orrs	r4, r3
 8000376:	0c23      	lsrs	r3, r4, #16
 8000378:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800037c:	4298      	cmp	r0, r3
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x1a6>
 8000384:	eb1c 0303 	adds.w	r3, ip, r3
 8000388:	f108 36ff 	add.w	r6, r8, #4294967295
 800038c:	f080 8081 	bcs.w	8000492 <__udivmoddi4+0x29e>
 8000390:	4298      	cmp	r0, r3
 8000392:	d97e      	bls.n	8000492 <__udivmoddi4+0x29e>
 8000394:	f1a8 0802 	sub.w	r8, r8, #2
 8000398:	4463      	add	r3, ip
 800039a:	1a1e      	subs	r6, r3, r0
 800039c:	fbb6 f3f9 	udiv	r3, r6, r9
 80003a0:	fb09 6613 	mls	r6, r9, r3, r6
 80003a4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003a8:	b2a4      	uxth	r4, r4
 80003aa:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x1d0>
 80003b2:	eb1c 0404 	adds.w	r4, ip, r4
 80003b6:	f103 30ff 	add.w	r0, r3, #4294967295
 80003ba:	d266      	bcs.n	800048a <__udivmoddi4+0x296>
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d964      	bls.n	800048a <__udivmoddi4+0x296>
 80003c0:	3b02      	subs	r3, #2
 80003c2:	4464      	add	r4, ip
 80003c4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003c8:	fba0 8302 	umull	r8, r3, r0, r2
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	429c      	cmp	r4, r3
 80003d2:	46c6      	mov	lr, r8
 80003d4:	461e      	mov	r6, r3
 80003d6:	d350      	bcc.n	800047a <__udivmoddi4+0x286>
 80003d8:	d04d      	beq.n	8000476 <__udivmoddi4+0x282>
 80003da:	b155      	cbz	r5, 80003f2 <__udivmoddi4+0x1fe>
 80003dc:	ebba 030e 	subs.w	r3, sl, lr
 80003e0:	eb64 0406 	sbc.w	r4, r4, r6
 80003e4:	fa04 f707 	lsl.w	r7, r4, r7
 80003e8:	40cb      	lsrs	r3, r1
 80003ea:	431f      	orrs	r7, r3
 80003ec:	40cc      	lsrs	r4, r1
 80003ee:	e9c5 7400 	strd	r7, r4, [r5]
 80003f2:	2100      	movs	r1, #0
 80003f4:	e751      	b.n	800029a <__udivmoddi4+0xa6>
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	40d9      	lsrs	r1, r3
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	fa20 f303 	lsr.w	r3, r0, r3
 8000408:	fa00 fe02 	lsl.w	lr, r0, r2
 800040c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000410:	fb08 1110 	mls	r1, r8, r0, r1
 8000414:	4094      	lsls	r4, r2
 8000416:	431c      	orrs	r4, r3
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	0c23      	lsrs	r3, r4, #16
 800041e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000422:	fb00 f107 	mul.w	r1, r0, r7
 8000426:	4299      	cmp	r1, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x248>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000432:	d22c      	bcs.n	800048e <__udivmoddi4+0x29a>
 8000434:	4299      	cmp	r1, r3
 8000436:	d92a      	bls.n	800048e <__udivmoddi4+0x29a>
 8000438:	3802      	subs	r0, #2
 800043a:	4463      	add	r3, ip
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	fbb3 f1f8 	udiv	r1, r3, r8
 8000442:	fb08 3311 	mls	r3, r8, r1, r3
 8000446:	b2a4      	uxth	r4, r4
 8000448:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800044c:	fb01 f307 	mul.w	r3, r1, r7
 8000450:	42a3      	cmp	r3, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x272>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f101 36ff 	add.w	r6, r1, #4294967295
 800045c:	d213      	bcs.n	8000486 <__udivmoddi4+0x292>
 800045e:	42a3      	cmp	r3, r4
 8000460:	d911      	bls.n	8000486 <__udivmoddi4+0x292>
 8000462:	3902      	subs	r1, #2
 8000464:	4464      	add	r4, ip
 8000466:	1ae4      	subs	r4, r4, r3
 8000468:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800046c:	e73b      	b.n	80002e6 <__udivmoddi4+0xf2>
 800046e:	4604      	mov	r4, r0
 8000470:	e6f2      	b.n	8000258 <__udivmoddi4+0x64>
 8000472:	4608      	mov	r0, r1
 8000474:	e708      	b.n	8000288 <__udivmoddi4+0x94>
 8000476:	45c2      	cmp	sl, r8
 8000478:	d2af      	bcs.n	80003da <__udivmoddi4+0x1e6>
 800047a:	ebb8 0e02 	subs.w	lr, r8, r2
 800047e:	eb63 060c 	sbc.w	r6, r3, ip
 8000482:	3801      	subs	r0, #1
 8000484:	e7a9      	b.n	80003da <__udivmoddi4+0x1e6>
 8000486:	4631      	mov	r1, r6
 8000488:	e7ed      	b.n	8000466 <__udivmoddi4+0x272>
 800048a:	4603      	mov	r3, r0
 800048c:	e79a      	b.n	80003c4 <__udivmoddi4+0x1d0>
 800048e:	4630      	mov	r0, r6
 8000490:	e7d4      	b.n	800043c <__udivmoddi4+0x248>
 8000492:	46b0      	mov	r8, r6
 8000494:	e781      	b.n	800039a <__udivmoddi4+0x1a6>
 8000496:	4463      	add	r3, ip
 8000498:	3802      	subs	r0, #2
 800049a:	e74f      	b.n	800033c <__udivmoddi4+0x148>
 800049c:	4606      	mov	r6, r0
 800049e:	4623      	mov	r3, r4
 80004a0:	4608      	mov	r0, r1
 80004a2:	e711      	b.n	80002c8 <__udivmoddi4+0xd4>
 80004a4:	3e02      	subs	r6, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	e732      	b.n	8000310 <__udivmoddi4+0x11c>
 80004aa:	bf00      	nop

080004ac <__aeabi_idiv0>:
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop

080004b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b4:	f000 fbfa 	bl	8000cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b8:	f000 f840 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004bc:	f000 f8da 	bl	8000674 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80004c0:	f000 f884 	bl	80005cc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004c4:	f000 f8ac 	bl	8000620 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 80004c8:	f003 fa8e 	bl	80039e8 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  // Create and bind TCP PCB for server
  tcp_server_pcb = tcp_new();
 80004cc:	f006 fcea 	bl	8006ea4 <tcp_new>
 80004d0:	4603      	mov	r3, r0
 80004d2:	4a17      	ldr	r2, [pc, #92]	@ (8000530 <main+0x80>)
 80004d4:	6013      	str	r3, [r2, #0]
  if (tcp_server_pcb == NULL) {
 80004d6:	4b16      	ldr	r3, [pc, #88]	@ (8000530 <main+0x80>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d101      	bne.n	80004e2 <main+0x32>
      Error_Handler(); // Handle PCB creation failure
 80004de:	f000 f977 	bl	80007d0 <Error_Handler>
  }

  if (tcp_bind(tcp_server_pcb, IP_ADDR_ANY, 502) != ERR_OK) {
 80004e2:	4b13      	ldr	r3, [pc, #76]	@ (8000530 <main+0x80>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	f44f 72fb 	mov.w	r2, #502	@ 0x1f6
 80004ea:	4912      	ldr	r1, [pc, #72]	@ (8000534 <main+0x84>)
 80004ec:	4618      	mov	r0, r3
 80004ee:	f005 fd67 	bl	8005fc0 <tcp_bind>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <main+0x4c>
      Error_Handler(); // Handle binding failure
 80004f8:	f000 f96a 	bl	80007d0 <Error_Handler>
  }

  // Start listening for incoming connections
  tcp_server_pcb = tcp_listen(tcp_server_pcb);
 80004fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000530 <main+0x80>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	21ff      	movs	r1, #255	@ 0xff
 8000502:	4618      	mov	r0, r3
 8000504:	f005 fdfe 	bl	8006104 <tcp_listen_with_backlog>
 8000508:	4603      	mov	r3, r0
 800050a:	4a09      	ldr	r2, [pc, #36]	@ (8000530 <main+0x80>)
 800050c:	6013      	str	r3, [r2, #0]
  if (tcp_server_pcb == NULL) {
 800050e:	4b08      	ldr	r3, [pc, #32]	@ (8000530 <main+0x80>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d101      	bne.n	800051a <main+0x6a>
      Error_Handler(); // Handle listen failure
 8000516:	f000 f95b 	bl	80007d0 <Error_Handler>
  }

  // Set accept callback for the server
  tcp_accept(tcp_server_pcb, tcp_accept_callback);
 800051a:	4b05      	ldr	r3, [pc, #20]	@ (8000530 <main+0x80>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4906      	ldr	r1, [pc, #24]	@ (8000538 <main+0x88>)
 8000520:	4618      	mov	r0, r3
 8000522:	f006 fce9 	bl	8006ef8 <tcp_accept>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  MX_LWIP_Process();
 8000526:	f003 fb85 	bl	8003c34 <MX_LWIP_Process>
  {
 800052a:	bf00      	nop
 800052c:	e7fb      	b.n	8000526 <main+0x76>
 800052e:	bf00      	nop
 8000530:	200005ac 	.word	0x200005ac
 8000534:	08010284 	.word	0x08010284
 8000538:	08000c35 	.word	0x08000c35

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b092      	sub	sp, #72	@ 0x48
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0318 	add.w	r3, r7, #24
 8000546:	2230      	movs	r2, #48	@ 0x30
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f00d f993 	bl	800d876 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]
 800055c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800055e:	2302      	movs	r3, #2
 8000560:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000562:	2301      	movs	r3, #1
 8000564:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000566:	2310      	movs	r3, #16
 8000568:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056a:	2302      	movs	r3, #2
 800056c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800056e:	2300      	movs	r3, #0
 8000570:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLM = 13;
 8000572:	230d      	movs	r3, #13
 8000574:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 195;
 8000576:	23c3      	movs	r3, #195	@ 0xc3
 8000578:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800057a:	2302      	movs	r3, #2
 800057c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800057e:	2305      	movs	r3, #5
 8000580:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000582:	f107 0318 	add.w	r3, r7, #24
 8000586:	4618      	mov	r0, r3
 8000588:	f002 f96c 	bl	8002864 <HAL_RCC_OscConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000592:	f000 f91d 	bl	80007d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000596:	230f      	movs	r3, #15
 8000598:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059a:	2302      	movs	r3, #2
 800059c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005a2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	2103      	movs	r1, #3
 80005b2:	4618      	mov	r0, r3
 80005b4:	f002 fbaa 	bl	8002d0c <HAL_RCC_ClockConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80005be:	f000 f907 	bl	80007d0 <Error_Handler>
  }
}
 80005c2:	bf00      	nop
 80005c4:	3748      	adds	r7, #72	@ 0x48
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80005d0:	4b11      	ldr	r3, [pc, #68]	@ (8000618 <MX_USART3_UART_Init+0x4c>)
 80005d2:	4a12      	ldr	r2, [pc, #72]	@ (800061c <MX_USART3_UART_Init+0x50>)
 80005d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80005d6:	4b10      	ldr	r3, [pc, #64]	@ (8000618 <MX_USART3_UART_Init+0x4c>)
 80005d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80005de:	4b0e      	ldr	r3, [pc, #56]	@ (8000618 <MX_USART3_UART_Init+0x4c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80005e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000618 <MX_USART3_UART_Init+0x4c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80005ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000618 <MX_USART3_UART_Init+0x4c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80005f0:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <MX_USART3_UART_Init+0x4c>)
 80005f2:	220c      	movs	r2, #12
 80005f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005f6:	4b08      	ldr	r3, [pc, #32]	@ (8000618 <MX_USART3_UART_Init+0x4c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80005fc:	4b06      	ldr	r3, [pc, #24]	@ (8000618 <MX_USART3_UART_Init+0x4c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000602:	4805      	ldr	r0, [pc, #20]	@ (8000618 <MX_USART3_UART_Init+0x4c>)
 8000604:	f002 fdc8 	bl	8003198 <HAL_UART_Init>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800060e:	f000 f8df 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000088 	.word	0x20000088
 800061c:	40004800 	.word	0x40004800

08000620 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000624:	4b12      	ldr	r3, [pc, #72]	@ (8000670 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000626:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800062a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800062c:	4b10      	ldr	r3, [pc, #64]	@ (8000670 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800062e:	2204      	movs	r2, #4
 8000630:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000632:	4b0f      	ldr	r3, [pc, #60]	@ (8000670 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000634:	2202      	movs	r2, #2
 8000636:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000638:	4b0d      	ldr	r3, [pc, #52]	@ (8000670 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800063a:	2200      	movs	r2, #0
 800063c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800063e:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000640:	2202      	movs	r2, #2
 8000642:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000644:	4b0a      	ldr	r3, [pc, #40]	@ (8000670 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000646:	2201      	movs	r2, #1
 8000648:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800064a:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000650:	4b07      	ldr	r3, [pc, #28]	@ (8000670 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000652:	2201      	movs	r2, #1
 8000654:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000656:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800065c:	4804      	ldr	r0, [pc, #16]	@ (8000670 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800065e:	f001 fff1 	bl	8002644 <HAL_PCD_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 8000668:	f000 f8b2 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	200000d0 	.word	0x200000d0

08000674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08c      	sub	sp, #48	@ 0x30
 8000678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	61bb      	str	r3, [r7, #24]
 800068e:	4b4c      	ldr	r3, [pc, #304]	@ (80007c0 <MX_GPIO_Init+0x14c>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	4a4b      	ldr	r2, [pc, #300]	@ (80007c0 <MX_GPIO_Init+0x14c>)
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	6313      	str	r3, [r2, #48]	@ 0x30
 800069a:	4b49      	ldr	r3, [pc, #292]	@ (80007c0 <MX_GPIO_Init+0x14c>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	f003 0304 	and.w	r3, r3, #4
 80006a2:	61bb      	str	r3, [r7, #24]
 80006a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	617b      	str	r3, [r7, #20]
 80006aa:	4b45      	ldr	r3, [pc, #276]	@ (80007c0 <MX_GPIO_Init+0x14c>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	4a44      	ldr	r2, [pc, #272]	@ (80007c0 <MX_GPIO_Init+0x14c>)
 80006b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b6:	4b42      	ldr	r3, [pc, #264]	@ (80007c0 <MX_GPIO_Init+0x14c>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006be:	617b      	str	r3, [r7, #20]
 80006c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	613b      	str	r3, [r7, #16]
 80006c6:	4b3e      	ldr	r3, [pc, #248]	@ (80007c0 <MX_GPIO_Init+0x14c>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	4a3d      	ldr	r2, [pc, #244]	@ (80007c0 <MX_GPIO_Init+0x14c>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d2:	4b3b      	ldr	r3, [pc, #236]	@ (80007c0 <MX_GPIO_Init+0x14c>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	613b      	str	r3, [r7, #16]
 80006dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	4b37      	ldr	r3, [pc, #220]	@ (80007c0 <MX_GPIO_Init+0x14c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	4a36      	ldr	r2, [pc, #216]	@ (80007c0 <MX_GPIO_Init+0x14c>)
 80006e8:	f043 0302 	orr.w	r3, r3, #2
 80006ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ee:	4b34      	ldr	r3, [pc, #208]	@ (80007c0 <MX_GPIO_Init+0x14c>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f2:	f003 0302 	and.w	r3, r3, #2
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	4b30      	ldr	r3, [pc, #192]	@ (80007c0 <MX_GPIO_Init+0x14c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	4a2f      	ldr	r2, [pc, #188]	@ (80007c0 <MX_GPIO_Init+0x14c>)
 8000704:	f043 0308 	orr.w	r3, r3, #8
 8000708:	6313      	str	r3, [r2, #48]	@ 0x30
 800070a:	4b2d      	ldr	r3, [pc, #180]	@ (80007c0 <MX_GPIO_Init+0x14c>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	f003 0308 	and.w	r3, r3, #8
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4b29      	ldr	r3, [pc, #164]	@ (80007c0 <MX_GPIO_Init+0x14c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	4a28      	ldr	r2, [pc, #160]	@ (80007c0 <MX_GPIO_Init+0x14c>)
 8000720:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000724:	6313      	str	r3, [r2, #48]	@ 0x30
 8000726:	4b26      	ldr	r3, [pc, #152]	@ (80007c0 <MX_GPIO_Init+0x14c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000738:	4822      	ldr	r0, [pc, #136]	@ (80007c4 <MX_GPIO_Init+0x150>)
 800073a:	f001 ff6b 	bl	8002614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	2140      	movs	r1, #64	@ 0x40
 8000742:	4821      	ldr	r0, [pc, #132]	@ (80007c8 <MX_GPIO_Init+0x154>)
 8000744:	f001 ff66 	bl	8002614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000748:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800074c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800074e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000752:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000758:	f107 031c 	add.w	r3, r7, #28
 800075c:	4619      	mov	r1, r3
 800075e:	481b      	ldr	r0, [pc, #108]	@ (80007cc <MX_GPIO_Init+0x158>)
 8000760:	f001 fdba 	bl	80022d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000764:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000768:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076a:	2301      	movs	r3, #1
 800076c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	2300      	movs	r3, #0
 8000774:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000776:	f107 031c 	add.w	r3, r7, #28
 800077a:	4619      	mov	r1, r3
 800077c:	4811      	ldr	r0, [pc, #68]	@ (80007c4 <MX_GPIO_Init+0x150>)
 800077e:	f001 fdab 	bl	80022d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000782:	2340      	movs	r3, #64	@ 0x40
 8000784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	4619      	mov	r1, r3
 8000798:	480b      	ldr	r0, [pc, #44]	@ (80007c8 <MX_GPIO_Init+0x154>)
 800079a:	f001 fd9d 	bl	80022d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800079e:	2380      	movs	r3, #128	@ 0x80
 80007a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a2:	2300      	movs	r3, #0
 80007a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007aa:	f107 031c 	add.w	r3, r7, #28
 80007ae:	4619      	mov	r1, r3
 80007b0:	4805      	ldr	r0, [pc, #20]	@ (80007c8 <MX_GPIO_Init+0x154>)
 80007b2:	f001 fd91 	bl	80022d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007b6:	bf00      	nop
 80007b8:	3730      	adds	r7, #48	@ 0x30
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40020400 	.word	0x40020400
 80007c8:	40021800 	.word	0x40021800
 80007cc:	40020800 	.word	0x40020800

080007d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d4:	b672      	cpsid	i
}
 80007d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d8:	bf00      	nop
 80007da:	e7fd      	b.n	80007d8 <Error_Handler+0x8>

080007dc <handle_modbus_request>:
    response[index++] = 'i';                          // 'i'

    *response_length = index;
}*/

void handle_modbus_request(uint8_t *request, uint16_t request_length, uint8_t *response, uint16_t *response_length) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	60f8      	str	r0, [r7, #12]
 80007e4:	607a      	str	r2, [r7, #4]
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	460b      	mov	r3, r1
 80007ea:	817b      	strh	r3, [r7, #10]
    // Directly copy the incoming request to the response
    memcpy(response, request, request_length);
 80007ec:	897b      	ldrh	r3, [r7, #10]
 80007ee:	461a      	mov	r2, r3
 80007f0:	68f9      	ldr	r1, [r7, #12]
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f00d f8b5 	bl	800d962 <memcpy>


    // Set the response length to the request length
    *response_length = request_length;
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	897a      	ldrh	r2, [r7, #10]
 80007fc:	801a      	strh	r2, [r3, #0]
}
 80007fe:	bf00      	nop
 8000800:	3710      	adds	r7, #16
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b0f      	ldr	r3, [pc, #60]	@ (8000850 <HAL_MspInit+0x48>)
 8000814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000816:	4a0e      	ldr	r2, [pc, #56]	@ (8000850 <HAL_MspInit+0x48>)
 8000818:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800081c:	6453      	str	r3, [r2, #68]	@ 0x44
 800081e:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <HAL_MspInit+0x48>)
 8000820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000822:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	4b08      	ldr	r3, [pc, #32]	@ (8000850 <HAL_MspInit+0x48>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000832:	4a07      	ldr	r2, [pc, #28]	@ (8000850 <HAL_MspInit+0x48>)
 8000834:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000838:	6413      	str	r3, [r2, #64]	@ 0x40
 800083a:	4b05      	ldr	r3, [pc, #20]	@ (8000850 <HAL_MspInit+0x48>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800083e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr
 8000850:	40023800 	.word	0x40023800

08000854 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08a      	sub	sp, #40	@ 0x28
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a19      	ldr	r2, [pc, #100]	@ (80008d8 <HAL_UART_MspInit+0x84>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d12c      	bne.n	80008d0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
 800087a:	4b18      	ldr	r3, [pc, #96]	@ (80008dc <HAL_UART_MspInit+0x88>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087e:	4a17      	ldr	r2, [pc, #92]	@ (80008dc <HAL_UART_MspInit+0x88>)
 8000880:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000884:	6413      	str	r3, [r2, #64]	@ 0x40
 8000886:	4b15      	ldr	r3, [pc, #84]	@ (80008dc <HAL_UART_MspInit+0x88>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <HAL_UART_MspInit+0x88>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a10      	ldr	r2, [pc, #64]	@ (80008dc <HAL_UART_MspInit+0x88>)
 800089c:	f043 0308 	orr.w	r3, r3, #8
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <HAL_UART_MspInit+0x88>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0308 	and.w	r3, r3, #8
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80008ae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80008b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b4:	2302      	movs	r3, #2
 80008b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008bc:	2303      	movs	r3, #3
 80008be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008c0:	2307      	movs	r3, #7
 80008c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4619      	mov	r1, r3
 80008ca:	4805      	ldr	r0, [pc, #20]	@ (80008e0 <HAL_UART_MspInit+0x8c>)
 80008cc:	f001 fd04 	bl	80022d8 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80008d0:	bf00      	nop
 80008d2:	3728      	adds	r7, #40	@ 0x28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40004800 	.word	0x40004800
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40020c00 	.word	0x40020c00

080008e4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	@ 0x28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000904:	d13f      	bne.n	8000986 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	4b21      	ldr	r3, [pc, #132]	@ (8000990 <HAL_PCD_MspInit+0xac>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	4a20      	ldr	r2, [pc, #128]	@ (8000990 <HAL_PCD_MspInit+0xac>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6313      	str	r3, [r2, #48]	@ 0x30
 8000916:	4b1e      	ldr	r3, [pc, #120]	@ (8000990 <HAL_PCD_MspInit+0xac>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000922:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000930:	2303      	movs	r3, #3
 8000932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000934:	230a      	movs	r3, #10
 8000936:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4619      	mov	r1, r3
 800093e:	4815      	ldr	r0, [pc, #84]	@ (8000994 <HAL_PCD_MspInit+0xb0>)
 8000940:	f001 fcca 	bl	80022d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000944:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094a:	2300      	movs	r3, #0
 800094c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	4619      	mov	r1, r3
 8000958:	480e      	ldr	r0, [pc, #56]	@ (8000994 <HAL_PCD_MspInit+0xb0>)
 800095a:	f001 fcbd 	bl	80022d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800095e:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <HAL_PCD_MspInit+0xac>)
 8000960:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000962:	4a0b      	ldr	r2, [pc, #44]	@ (8000990 <HAL_PCD_MspInit+0xac>)
 8000964:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000968:	6353      	str	r3, [r2, #52]	@ 0x34
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	4b08      	ldr	r3, [pc, #32]	@ (8000990 <HAL_PCD_MspInit+0xac>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000972:	4a07      	ldr	r2, [pc, #28]	@ (8000990 <HAL_PCD_MspInit+0xac>)
 8000974:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000978:	6453      	str	r3, [r2, #68]	@ 0x44
 800097a:	4b05      	ldr	r3, [pc, #20]	@ (8000990 <HAL_PCD_MspInit+0xac>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800097e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000986:	bf00      	nop
 8000988:	3728      	adds	r7, #40	@ 0x28
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800
 8000994:	40020000 	.word	0x40020000

08000998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <NMI_Handler+0x4>

080009a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <HardFault_Handler+0x4>

080009a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <MemManage_Handler+0x4>

080009b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <BusFault_Handler+0x4>

080009b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <UsageFault_Handler+0x4>

080009c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr

080009cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr

080009d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr

080009e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e8:	f000 f9b2 	bl	8000d50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80009f4:	4802      	ldr	r0, [pc, #8]	@ (8000a00 <ETH_IRQHandler+0x10>)
 80009f6:	f000 fec2 	bl	800177e <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200036a4 	.word	0x200036a4

08000a04 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
 8000a14:	e00a      	b.n	8000a2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a16:	f3af 8000 	nop.w
 8000a1a:	4601      	mov	r1, r0
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	1c5a      	adds	r2, r3, #1
 8000a20:	60ba      	str	r2, [r7, #8]
 8000a22:	b2ca      	uxtb	r2, r1
 8000a24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	697a      	ldr	r2, [r7, #20]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	dbf0      	blt.n	8000a16 <_read+0x12>
  }

  return len;
 8000a34:	687b      	ldr	r3, [r7, #4]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b086      	sub	sp, #24
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	60f8      	str	r0, [r7, #12]
 8000a46:	60b9      	str	r1, [r7, #8]
 8000a48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	617b      	str	r3, [r7, #20]
 8000a4e:	e009      	b.n	8000a64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	1c5a      	adds	r2, r3, #1
 8000a54:	60ba      	str	r2, [r7, #8]
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	3301      	adds	r3, #1
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	697a      	ldr	r2, [r7, #20]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	dbf1      	blt.n	8000a50 <_write+0x12>
  }
  return len;
 8000a6c:	687b      	ldr	r3, [r7, #4]
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <_close>:

int _close(int file)
{
 8000a76:	b480      	push	{r7}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr

08000a8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a9c:	605a      	str	r2, [r3, #4]
  return 0;
 8000a9e:	2300      	movs	r3, #0
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr

08000aaa <_isatty>:

int _isatty(int file)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	b083      	sub	sp, #12
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ab2:	2301      	movs	r3, #1
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bc80      	pop	{r7}
 8000abc:	4770      	bx	lr

08000abe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	b085      	sub	sp, #20
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	60f8      	str	r0, [r7, #12]
 8000ac6:	60b9      	str	r1, [r7, #8]
 8000ac8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000aca:	2300      	movs	r3, #0
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3714      	adds	r7, #20
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr
	...

08000ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b087      	sub	sp, #28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ae0:	4a14      	ldr	r2, [pc, #80]	@ (8000b34 <_sbrk+0x5c>)
 8000ae2:	4b15      	ldr	r3, [pc, #84]	@ (8000b38 <_sbrk+0x60>)
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aec:	4b13      	ldr	r3, [pc, #76]	@ (8000b3c <_sbrk+0x64>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d102      	bne.n	8000afa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000af4:	4b11      	ldr	r3, [pc, #68]	@ (8000b3c <_sbrk+0x64>)
 8000af6:	4a12      	ldr	r2, [pc, #72]	@ (8000b40 <_sbrk+0x68>)
 8000af8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000afa:	4b10      	ldr	r3, [pc, #64]	@ (8000b3c <_sbrk+0x64>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4413      	add	r3, r2
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d205      	bcs.n	8000b14 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000b08:	4b0e      	ldr	r3, [pc, #56]	@ (8000b44 <_sbrk+0x6c>)
 8000b0a:	220c      	movs	r2, #12
 8000b0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b12:	e009      	b.n	8000b28 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b14:	4b09      	ldr	r3, [pc, #36]	@ (8000b3c <_sbrk+0x64>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b1a:	4b08      	ldr	r3, [pc, #32]	@ (8000b3c <_sbrk+0x64>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4413      	add	r3, r2
 8000b22:	4a06      	ldr	r2, [pc, #24]	@ (8000b3c <_sbrk+0x64>)
 8000b24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b26:	68fb      	ldr	r3, [r7, #12]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	371c      	adds	r7, #28
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20020000 	.word	0x20020000
 8000b38:	00000400 	.word	0x00000400
 8000b3c:	200005b0 	.word	0x200005b0
 8000b40:	20006ef0 	.word	0x20006ef0
 8000b44:	20006ee0 	.word	0x20006ee0

08000b48 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr

08000b54 <tcp_receive_callback>:
#include "modbus_layer.h"
#include "lwip/tcp.h"
#include <string.h>

// Callback when data is received on a connection
err_t tcp_receive_callback(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err) {
 8000b54:	b590      	push	{r4, r7, lr}
 8000b56:	f5ad 5d9d 	sub.w	sp, sp, #5024	@ 0x13a0
 8000b5a:	b081      	sub	sp, #4
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	f507 7468 	add.w	r4, r7, #928	@ 0x3a0
 8000b62:	f5a4 7465 	sub.w	r4, r4, #916	@ 0x394
 8000b66:	6020      	str	r0, [r4, #0]
 8000b68:	f507 7068 	add.w	r0, r7, #928	@ 0x3a0
 8000b6c:	f5a0 7066 	sub.w	r0, r0, #920	@ 0x398
 8000b70:	6001      	str	r1, [r0, #0]
 8000b72:	f507 7168 	add.w	r1, r7, #928	@ 0x3a0
 8000b76:	f5a1 7167 	sub.w	r1, r1, #924	@ 0x39c
 8000b7a:	600a      	str	r2, [r1, #0]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8000b82:	f2a3 339d 	subw	r3, r3, #925	@ 0x39d
 8000b86:	701a      	strb	r2, [r3, #0]
    uint8_t response[5000];
    uint16_t response_length = 0;
 8000b88:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8000b8c:	f2a3 338a 	subw	r3, r3, #906	@ 0x38a
 8000b90:	2200      	movs	r2, #0
 8000b92:	801a      	strh	r2, [r3, #0]

    // Check for valid data
    if (p == NULL) {
 8000b94:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8000b98:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d108      	bne.n	8000bb4 <tcp_receive_callback+0x60>
        tcp_close(tpcb); // Connection closed by client
 8000ba2:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8000ba6:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 8000baa:	6818      	ldr	r0, [r3, #0]
 8000bac:	f005 f932 	bl	8005e14 <tcp_close>
        return ERR_OK;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	e039      	b.n	8000c28 <tcp_receive_callback+0xd4>
    }

    // Step 1: Handle Modbus TCP request
    handle_modbus_request((uint8_t *)p->payload, p->len, response, &response_length);
 8000bb4:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8000bb8:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	6858      	ldr	r0, [r3, #4]
 8000bc0:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8000bc4:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	8959      	ldrh	r1, [r3, #10]
 8000bcc:	f107 0320 	add.w	r3, r7, #32
 8000bd0:	3b0a      	subs	r3, #10
 8000bd2:	f107 0220 	add.w	r2, r7, #32
 8000bd6:	3a08      	subs	r2, #8
 8000bd8:	f7ff fe00 	bl	80007dc <handle_modbus_request>

    // Step 2: Send response if valid
    if (response_length > 0) {
 8000bdc:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8000be0:	f2a3 338a 	subw	r3, r3, #906	@ 0x38a
 8000be4:	881b      	ldrh	r3, [r3, #0]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d016      	beq.n	8000c18 <tcp_receive_callback+0xc4>
        tcp_write(tpcb, response, response_length, TCP_WRITE_FLAG_COPY);
 8000bea:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8000bee:	f2a3 338a 	subw	r3, r3, #906	@ 0x38a
 8000bf2:	881a      	ldrh	r2, [r3, #0]
 8000bf4:	f107 0120 	add.w	r1, r7, #32
 8000bf8:	3908      	subs	r1, #8
 8000bfa:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8000bfe:	f5a3 7066 	sub.w	r0, r3, #920	@ 0x398
 8000c02:	2301      	movs	r3, #1
 8000c04:	6800      	ldr	r0, [r0, #0]
 8000c06:	f008 ff13 	bl	8009a30 <tcp_write>
        tcp_output(tpcb);
 8000c0a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8000c0e:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 8000c12:	6818      	ldr	r0, [r3, #0]
 8000c14:	f009 fbbe 	bl	800a394 <tcp_output>
    }

    // Free the received pbuf
    pbuf_free(p);
 8000c18:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8000c1c:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 8000c20:	6818      	ldr	r0, [r3, #0]
 8000c22:	f004 fccb 	bl	80055bc <pbuf_free>
    return ERR_OK;
 8000c26:	2300      	movs	r3, #0
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f507 579d 	add.w	r7, r7, #5024	@ 0x13a0
 8000c2e:	3704      	adds	r7, #4
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd90      	pop	{r4, r7, pc}

08000c34 <tcp_accept_callback>:

// Callback when a new connection is accepted
err_t tcp_accept_callback(void *arg, struct tcp_pcb *newpcb, err_t err) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	71fb      	strb	r3, [r7, #7]
    // Set receive callback for this connection
    tcp_recv(newpcb, tcp_receive_callback);
 8000c42:	4904      	ldr	r1, [pc, #16]	@ (8000c54 <tcp_accept_callback+0x20>)
 8000c44:	68b8      	ldr	r0, [r7, #8]
 8000c46:	f006 f935 	bl	8006eb4 <tcp_recv>
    return ERR_OK;
 8000c4a:	2300      	movs	r3, #0
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	08000b55 	.word	0x08000b55

08000c58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c90 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8000c5c:	f7ff ff74 	bl	8000b48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c60:	480c      	ldr	r0, [pc, #48]	@ (8000c94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c62:	490d      	ldr	r1, [pc, #52]	@ (8000c98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c64:	4a0d      	ldr	r2, [pc, #52]	@ (8000c9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c68:	e002      	b.n	8000c70 <LoopCopyDataInit>

08000c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6e:	3304      	adds	r3, #4

08000c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c74:	d3f9      	bcc.n	8000c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c78:	4c0a      	ldr	r4, [pc, #40]	@ (8000ca4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c7c:	e001      	b.n	8000c82 <LoopFillZerobss>

08000c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c80:	3204      	adds	r2, #4

08000c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c84:	d3fb      	bcc.n	8000c7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c86:	f00c fe45 	bl	800d914 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c8a:	f7ff fc11 	bl	80004b0 <main>
  bx  lr
 8000c8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c98:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c9c:	080102dc 	.word	0x080102dc
  ldr r2, =_sbss
 8000ca0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000ca4:	20006ef0 	.word	0x20006ef0

08000ca8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca8:	e7fe      	b.n	8000ca8 <ADC_IRQHandler>
	...

08000cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000cec <HAL_Init+0x40>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000cec <HAL_Init+0x40>)
 8000cb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000cec <HAL_Init+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0a      	ldr	r2, [pc, #40]	@ (8000cec <HAL_Init+0x40>)
 8000cc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc8:	4b08      	ldr	r3, [pc, #32]	@ (8000cec <HAL_Init+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a07      	ldr	r2, [pc, #28]	@ (8000cec <HAL_Init+0x40>)
 8000cce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd4:	2003      	movs	r0, #3
 8000cd6:	f000 f947 	bl	8000f68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f000 f808 	bl	8000cf0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000ce0:	f7ff fd92 	bl	8000808 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40023c00 	.word	0x40023c00

08000cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cf8:	4b12      	ldr	r3, [pc, #72]	@ (8000d44 <HAL_InitTick+0x54>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	4b12      	ldr	r3, [pc, #72]	@ (8000d48 <HAL_InitTick+0x58>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	4619      	mov	r1, r3
 8000d02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 f95f 	bl	8000fd2 <HAL_SYSTICK_Config>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e00e      	b.n	8000d3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2b0f      	cmp	r3, #15
 8000d22:	d80a      	bhi.n	8000d3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d24:	2200      	movs	r2, #0
 8000d26:	6879      	ldr	r1, [r7, #4]
 8000d28:	f04f 30ff 	mov.w	r0, #4294967295
 8000d2c:	f000 f927 	bl	8000f7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d30:	4a06      	ldr	r2, [pc, #24]	@ (8000d4c <HAL_InitTick+0x5c>)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d36:	2300      	movs	r3, #0
 8000d38:	e000      	b.n	8000d3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000000 	.word	0x20000000
 8000d48:	20000008 	.word	0x20000008
 8000d4c:	20000004 	.word	0x20000004

08000d50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d54:	4b05      	ldr	r3, [pc, #20]	@ (8000d6c <HAL_IncTick+0x1c>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4b05      	ldr	r3, [pc, #20]	@ (8000d70 <HAL_IncTick+0x20>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4413      	add	r3, r2
 8000d60:	4a03      	ldr	r2, [pc, #12]	@ (8000d70 <HAL_IncTick+0x20>)
 8000d62:	6013      	str	r3, [r2, #0]
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr
 8000d6c:	20000008 	.word	0x20000008
 8000d70:	200005b4 	.word	0x200005b4

08000d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return uwTick;
 8000d78:	4b02      	ldr	r3, [pc, #8]	@ (8000d84 <HAL_GetTick+0x10>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr
 8000d84:	200005b4 	.word	0x200005b4

08000d88 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d90:	f7ff fff0 	bl	8000d74 <HAL_GetTick>
 8000d94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000da0:	d005      	beq.n	8000dae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000da2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dcc <HAL_Delay+0x44>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	461a      	mov	r2, r3
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	4413      	add	r3, r2
 8000dac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dae:	bf00      	nop
 8000db0:	f7ff ffe0 	bl	8000d74 <HAL_GetTick>
 8000db4:	4602      	mov	r2, r0
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d8f7      	bhi.n	8000db0 <HAL_Delay+0x28>
  {
  }
}
 8000dc0:	bf00      	nop
 8000dc2:	bf00      	nop
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000008 	.word	0x20000008

08000dd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e14 <__NVIC_SetPriorityGrouping+0x44>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000de6:	68ba      	ldr	r2, [r7, #8]
 8000de8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dec:	4013      	ands	r3, r2
 8000dee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e02:	4a04      	ldr	r2, [pc, #16]	@ (8000e14 <__NVIC_SetPriorityGrouping+0x44>)
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	60d3      	str	r3, [r2, #12]
}
 8000e08:	bf00      	nop
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e1c:	4b04      	ldr	r3, [pc, #16]	@ (8000e30 <__NVIC_GetPriorityGrouping+0x18>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	0a1b      	lsrs	r3, r3, #8
 8000e22:	f003 0307 	and.w	r3, r3, #7
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	db0b      	blt.n	8000e5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	f003 021f 	and.w	r2, r3, #31
 8000e4c:	4906      	ldr	r1, [pc, #24]	@ (8000e68 <__NVIC_EnableIRQ+0x34>)
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	095b      	lsrs	r3, r3, #5
 8000e54:	2001      	movs	r0, #1
 8000e56:	fa00 f202 	lsl.w	r2, r0, r2
 8000e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr
 8000e68:	e000e100 	.word	0xe000e100

08000e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	6039      	str	r1, [r7, #0]
 8000e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	db0a      	blt.n	8000e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	490c      	ldr	r1, [pc, #48]	@ (8000eb8 <__NVIC_SetPriority+0x4c>)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	0112      	lsls	r2, r2, #4
 8000e8c:	b2d2      	uxtb	r2, r2
 8000e8e:	440b      	add	r3, r1
 8000e90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e94:	e00a      	b.n	8000eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	4908      	ldr	r1, [pc, #32]	@ (8000ebc <__NVIC_SetPriority+0x50>)
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	f003 030f 	and.w	r3, r3, #15
 8000ea2:	3b04      	subs	r3, #4
 8000ea4:	0112      	lsls	r2, r2, #4
 8000ea6:	b2d2      	uxtb	r2, r2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	761a      	strb	r2, [r3, #24]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000e100 	.word	0xe000e100
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b089      	sub	sp, #36	@ 0x24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	f1c3 0307 	rsb	r3, r3, #7
 8000eda:	2b04      	cmp	r3, #4
 8000edc:	bf28      	it	cs
 8000ede:	2304      	movcs	r3, #4
 8000ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	2b06      	cmp	r3, #6
 8000ee8:	d902      	bls.n	8000ef0 <NVIC_EncodePriority+0x30>
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3b03      	subs	r3, #3
 8000eee:	e000      	b.n	8000ef2 <NVIC_EncodePriority+0x32>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43da      	mvns	r2, r3
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	401a      	ands	r2, r3
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f08:	f04f 31ff 	mov.w	r1, #4294967295
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f12:	43d9      	mvns	r1, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	4313      	orrs	r3, r2
         );
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3724      	adds	r7, #36	@ 0x24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bc80      	pop	{r7}
 8000f22:	4770      	bx	lr

08000f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f34:	d301      	bcc.n	8000f3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f36:	2301      	movs	r3, #1
 8000f38:	e00f      	b.n	8000f5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f64 <SysTick_Config+0x40>)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f42:	210f      	movs	r1, #15
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295
 8000f48:	f7ff ff90 	bl	8000e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f4c:	4b05      	ldr	r3, [pc, #20]	@ (8000f64 <SysTick_Config+0x40>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f52:	4b04      	ldr	r3, [pc, #16]	@ (8000f64 <SysTick_Config+0x40>)
 8000f54:	2207      	movs	r2, #7
 8000f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	e000e010 	.word	0xe000e010

08000f68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f7ff ff2d 	bl	8000dd0 <__NVIC_SetPriorityGrouping>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b086      	sub	sp, #24
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	4603      	mov	r3, r0
 8000f86:	60b9      	str	r1, [r7, #8]
 8000f88:	607a      	str	r2, [r7, #4]
 8000f8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f90:	f7ff ff42 	bl	8000e18 <__NVIC_GetPriorityGrouping>
 8000f94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	68b9      	ldr	r1, [r7, #8]
 8000f9a:	6978      	ldr	r0, [r7, #20]
 8000f9c:	f7ff ff90 	bl	8000ec0 <NVIC_EncodePriority>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff ff5f 	bl	8000e6c <__NVIC_SetPriority>
}
 8000fae:	bf00      	nop
 8000fb0:	3718      	adds	r7, #24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ff35 	bl	8000e34 <__NVIC_EnableIRQ>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff ffa2 	bl	8000f24 <SysTick_Config>
 8000fe0:	4603      	mov	r3, r0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61fb      	str	r3, [r7, #28]
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8000ffc:	4ba3      	ldr	r3, [pc, #652]	@ (800128c <HAL_ETH_Init+0x2a0>)
 8000ffe:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001004:	2300      	movs	r3, #0
 8001006:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d101      	bne.n	8001012 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e173      	b.n	80012fa <HAL_ETH_Init+0x30e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b00      	cmp	r3, #0
 800101c:	d106      	bne.n	800102c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f002 fe10 	bl	8003c4c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102c:	2300      	movs	r3, #0
 800102e:	60bb      	str	r3, [r7, #8]
 8001030:	4b97      	ldr	r3, [pc, #604]	@ (8001290 <HAL_ETH_Init+0x2a4>)
 8001032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001034:	4a96      	ldr	r2, [pc, #600]	@ (8001290 <HAL_ETH_Init+0x2a4>)
 8001036:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800103a:	6453      	str	r3, [r2, #68]	@ 0x44
 800103c:	4b94      	ldr	r3, [pc, #592]	@ (8001290 <HAL_ETH_Init+0x2a4>)
 800103e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001040:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001048:	4b92      	ldr	r3, [pc, #584]	@ (8001294 <HAL_ETH_Init+0x2a8>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	4a91      	ldr	r2, [pc, #580]	@ (8001294 <HAL_ETH_Init+0x2a8>)
 800104e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001052:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001054:	4b8f      	ldr	r3, [pc, #572]	@ (8001294 <HAL_ETH_Init+0x2a8>)
 8001056:	685a      	ldr	r2, [r3, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a1b      	ldr	r3, [r3, #32]
 800105c:	498d      	ldr	r1, [pc, #564]	@ (8001294 <HAL_ETH_Init+0x2a8>)
 800105e:	4313      	orrs	r3, r2
 8001060:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	6812      	ldr	r2, [r2, #0]
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001078:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800107a:	f7ff fe7b 	bl	8000d74 <HAL_GetTick>
 800107e:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001080:	e011      	b.n	80010a6 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 8001082:	f7ff fe77 	bl	8000d74 <HAL_GetTick>
 8001086:	4602      	mov	r2, r0
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001090:	d909      	bls.n	80010a6 <HAL_ETH_Init+0xba>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2203      	movs	r2, #3
 8001096:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e129      	b.n	80012fa <HAL_ETH_Init+0x30e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1e4      	bne.n	8001082 <HAL_ETH_Init+0x96>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	691b      	ldr	r3, [r3, #16]
 80010be:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f023 031c 	bic.w	r3, r3, #28
 80010c6:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80010c8:	f002 f818 	bl	80030fc <HAL_RCC_GetHCLKFreq>
 80010cc:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	4a71      	ldr	r2, [pc, #452]	@ (8001298 <HAL_ETH_Init+0x2ac>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d908      	bls.n	80010e8 <HAL_ETH_Init+0xfc>
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	4a70      	ldr	r2, [pc, #448]	@ (800129c <HAL_ETH_Init+0x2b0>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d804      	bhi.n	80010e8 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	f043 0308 	orr.w	r3, r3, #8
 80010e4:	61fb      	str	r3, [r7, #28]
 80010e6:	e01a      	b.n	800111e <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	4a6c      	ldr	r2, [pc, #432]	@ (800129c <HAL_ETH_Init+0x2b0>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d908      	bls.n	8001102 <HAL_ETH_Init+0x116>
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	4a66      	ldr	r2, [pc, #408]	@ (800128c <HAL_ETH_Init+0x2a0>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d204      	bcs.n	8001102 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f043 030c 	orr.w	r3, r3, #12
 80010fe:	61fb      	str	r3, [r7, #28]
 8001100:	e00d      	b.n	800111e <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	4a61      	ldr	r2, [pc, #388]	@ (800128c <HAL_ETH_Init+0x2a0>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d303      	bcc.n	8001112 <HAL_ETH_Init+0x126>
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	4a64      	ldr	r2, [pc, #400]	@ (80012a0 <HAL_ETH_Init+0x2b4>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d904      	bls.n	800111c <HAL_ETH_Init+0x130>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else /* ((hclk >= 100000000)&&(hclk < 120000000)) */
  {
    /* CSR Clock Range between 100-120 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	f043 0304 	orr.w	r3, r3, #4
 8001118:	61fb      	str	r3, [r7, #28]
 800111a:	e000      	b.n	800111e <HAL_ETH_Init+0x132>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800111c:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	69fa      	ldr	r2, [r7, #28]
 8001124:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001126:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800112a:	2100      	movs	r1, #0
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f000 fc0d 	bl	800194c <HAL_ETH_WritePHYRegister>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d00b      	beq.n	8001150 <HAL_ETH_Init+0x164>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800113c:	6939      	ldr	r1, [r7, #16]
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f000 fdc2 	bl	8001cc8 <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2201      	movs	r2, #1
 8001148:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e0d4      	b.n	80012fa <HAL_ETH_Init+0x30e>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001150:	20ff      	movs	r0, #255	@ 0xff
 8001152:	f7ff fe19 	bl	8000d88 <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	f000 80a2 	beq.w	80012a4 <HAL_ETH_Init+0x2b8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001160:	f7ff fe08 	bl	8000d74 <HAL_GetTick>
 8001164:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001166:	f107 030c 	add.w	r3, r7, #12
 800116a:	461a      	mov	r2, r3
 800116c:	2101      	movs	r1, #1
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 fb84 	bl	800187c <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 8001174:	f7ff fdfe 	bl	8000d74 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001182:	4293      	cmp	r3, r2
 8001184:	d90f      	bls.n	80011a6 <HAL_ETH_Init+0x1ba>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800118a:	6939      	ldr	r1, [r7, #16]
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f000 fd9b 	bl	8001cc8 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2201      	movs	r2, #1
 8001196:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e0a9      	b.n	80012fa <HAL_ETH_Init+0x30e>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	f003 0304 	and.w	r3, r3, #4
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d0da      	beq.n	8001166 <HAL_ETH_Init+0x17a>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80011b0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80011b4:	2100      	movs	r1, #0
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f000 fbc8 	bl	800194c <HAL_ETH_WritePHYRegister>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d00b      	beq.n	80011da <HAL_ETH_Init+0x1ee>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80011c6:	6939      	ldr	r1, [r7, #16]
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f000 fd7d 	bl	8001cc8 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2201      	movs	r2, #1
 80011d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e08f      	b.n	80012fa <HAL_ETH_Init+0x30e>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 80011da:	f7ff fdcb 	bl	8000d74 <HAL_GetTick>
 80011de:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	461a      	mov	r2, r3
 80011e6:	2101      	movs	r1, #1
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f000 fb47 	bl	800187c <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80011ee:	f7ff fdc1 	bl	8000d74 <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d90f      	bls.n	8001220 <HAL_ETH_Init+0x234>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001204:	6939      	ldr	r1, [r7, #16]
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f000 fd5e 	bl	8001cc8 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2201      	movs	r2, #1
 8001210:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        return HAL_TIMEOUT;
 800121c:	2303      	movs	r3, #3
 800121e:	e06c      	b.n	80012fa <HAL_ETH_Init+0x30e>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f003 0320 	and.w	r3, r3, #32
 8001226:	2b00      	cmp	r3, #0
 8001228:	d0da      	beq.n	80011e0 <HAL_ETH_Init+0x1f4>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800122a:	f107 030c 	add.w	r3, r7, #12
 800122e:	461a      	mov	r2, r3
 8001230:	2110      	movs	r1, #16
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f000 fb22 	bl	800187c <HAL_ETH_ReadPHYRegister>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d00b      	beq.n	8001256 <HAL_ETH_Init+0x26a>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001242:	6939      	ldr	r1, [r7, #16]
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f000 fd3f 	bl	8001cc8 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2201      	movs	r2, #1
 800124e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e051      	b.n	80012fa <HAL_ETH_Init+0x30e>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f003 0304 	and.w	r3, r3, #4
 800125c:	2b00      	cmp	r3, #0
 800125e:	d004      	beq.n	800126a <HAL_ETH_Init+0x27e>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001266:	60da      	str	r2, [r3, #12]
 8001268:	e002      	b.n	8001270 <HAL_ETH_Init+0x284>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	e032      	b.n	80012e8 <HAL_ETH_Init+0x2fc>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	e02d      	b.n	80012e8 <HAL_ETH_Init+0x2fc>
 800128c:	03938700 	.word	0x03938700
 8001290:	40023800 	.word	0x40023800
 8001294:	40013800 	.word	0x40013800
 8001298:	01312cff 	.word	0x01312cff
 800129c:	02160ebf 	.word	0x02160ebf
 80012a0:	05f5e0ff 	.word	0x05f5e0ff
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	08db      	lsrs	r3, r3, #3
 80012aa:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	085b      	lsrs	r3, r3, #1
 80012b2:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80012b4:	4313      	orrs	r3, r2
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	461a      	mov	r2, r3
 80012ba:	2100      	movs	r1, #0
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 fb45 	bl	800194c <HAL_ETH_WritePHYRegister>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d00b      	beq.n	80012e0 <HAL_ETH_Init+0x2f4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80012cc:	6939      	ldr	r1, [r7, #16]
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f000 fcfa 	bl	8001cc8 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2201      	movs	r2, #1
 80012d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e00c      	b.n	80012fa <HAL_ETH_Init+0x30e>
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80012e0:	f640 70ff 	movw	r0, #4095	@ 0xfff
 80012e4:	f7ff fd50 	bl	8000d88 <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80012e8:	6939      	ldr	r1, [r7, #16]
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f000 fcec 	bl	8001cc8 <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2201      	movs	r2, #1
 80012f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3720      	adds	r7, #32
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop

08001304 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001304:	b480      	push	{r7}
 8001306:	b087      	sub	sp, #28
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
 8001310:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800131c:	2b01      	cmp	r3, #1
 800131e:	d101      	bne.n	8001324 <HAL_ETH_DMATxDescListInit+0x20>
 8001320:	2302      	movs	r3, #2
 8001322:	e051      	b.n	80013c8 <HAL_ETH_DMATxDescListInit+0xc4>
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2201      	movs	r2, #1
 8001328:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2202      	movs	r2, #2
 8001330:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0U; i < TxBuffCount; i++)
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
 800133e:	e030      	b.n	80013a2 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	015b      	lsls	r3, r3, #5
 8001344:	68ba      	ldr	r2, [r7, #8]
 8001346:	4413      	add	r3, r2
 8001348:	613b      	str	r3, [r7, #16]

    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001350:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001358:	fb02 f303 	mul.w	r3, r2, r3
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	4413      	add	r3, r2
 8001360:	461a      	mov	r2, r3
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	609a      	str	r2, [r3, #8]

    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d105      	bne.n	800137a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	601a      	str	r2, [r3, #0]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (TxBuffCount - 1))
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	3b01      	subs	r3, #1
 800137e:	697a      	ldr	r2, [r7, #20]
 8001380:	429a      	cmp	r2, r3
 8001382:	d208      	bcs.n	8001396 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1);
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	3301      	adds	r3, #1
 8001388:	015b      	lsls	r3, r3, #5
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	4413      	add	r3, r2
 800138e:	461a      	mov	r2, r3
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	60da      	str	r2, [r3, #12]
 8001394:	e002      	b.n	800139c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;
 8001396:	68ba      	ldr	r2, [r7, #8]
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < TxBuffCount; i++)
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	3301      	adds	r3, #1
 80013a0:	617b      	str	r3, [r7, #20]
 80013a2:	697a      	ldr	r2, [r7, #20]
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d3ca      	bcc.n	8001340 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }

  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013b4:	6113      	str	r3, [r2, #16]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2201      	movs	r2, #1
 80013ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	371c      	adds	r7, #28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr

080013d2 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b087      	sub	sp, #28
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	60f8      	str	r0, [r7, #12]
 80013da:	60b9      	str	r1, [r7, #8]
 80013dc:	607a      	str	r2, [r7, #4]
 80013de:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d101      	bne.n	80013f2 <HAL_ETH_DMARxDescListInit+0x20>
 80013ee:	2302      	movs	r3, #2
 80013f0:	e055      	b.n	800149e <HAL_ETH_DMARxDescListInit+0xcc>
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2201      	movs	r2, #1
 80013f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2202      	movs	r2, #2
 80013fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	68ba      	ldr	r2, [r7, #8]
 8001406:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Fill each DMARxDesc descriptor with the right values */
  for (i = 0U; i < RxBuffCount; i++)
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	e034      	b.n	8001478 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab + i;
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	015b      	lsls	r3, r3, #5
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	4413      	add	r3, r2
 8001416:	613b      	str	r3, [r7, #16]

    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800141e:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8001426:	605a      	str	r2, [r3, #4]

    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800142e:	fb02 f303 	mul.w	r3, r2, r3
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	4413      	add	r3, r2
 8001436:	461a      	mov	r2, r3
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	609a      	str	r2, [r3, #8]

    if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d105      	bne.n	8001450 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	605a      	str	r2, [r3, #4]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (RxBuffCount - 1U))
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	3b01      	subs	r3, #1
 8001454:	697a      	ldr	r2, [r7, #20]
 8001456:	429a      	cmp	r2, r3
 8001458:	d208      	bcs.n	800146c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	3301      	adds	r3, #1
 800145e:	015b      	lsls	r3, r3, #5
 8001460:	68ba      	ldr	r2, [r7, #8]
 8001462:	4413      	add	r3, r2
 8001464:	461a      	mov	r2, r3
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	e002      	b.n	8001472 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab);
 800146c:	68ba      	ldr	r2, [r7, #8]
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < RxBuffCount; i++)
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	3301      	adds	r3, #1
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	697a      	ldr	r2, [r7, #20]
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	429a      	cmp	r2, r3
 800147e:	d3c6      	bcc.n	800140e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }

  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800148a:	60d3      	str	r3, [r2, #12]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	371c      	adds	r7, #28
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr

080014a8 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b087      	sub	sp, #28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(heth);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d101      	bne.n	80014cc <HAL_ETH_TransmitFrame+0x24>
 80014c8:	2302      	movs	r3, #2
 80014ca:	e0cc      	b.n	8001666 <HAL_ETH_TransmitFrame+0x1be>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2201      	movs	r2, #1
 80014d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2202      	movs	r2, #2
 80014d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  if (FrameLength == 0U)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d109      	bne.n	80014f6 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2201      	movs	r2, #1
 80014e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    return  HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e0b7      	b.n	8001666 <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if (((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	da09      	bge.n	8001514 <HAL_ETH_TransmitFrame+0x6c>
  {
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2212      	movs	r2, #18
 8001504:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e0a8      	b.n	8001666 <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800151a:	4293      	cmp	r3, r2
 800151c:	d915      	bls.n	800154a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength / ETH_TX_BUF_SIZE;
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	4a53      	ldr	r2, [pc, #332]	@ (8001670 <HAL_ETH_TransmitFrame+0x1c8>)
 8001522:	fba2 2303 	umull	r2, r3, r2, r3
 8001526:	0a9b      	lsrs	r3, r3, #10
 8001528:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE)
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	4b50      	ldr	r3, [pc, #320]	@ (8001670 <HAL_ETH_TransmitFrame+0x1c8>)
 800152e:	fba3 1302 	umull	r1, r3, r3, r2
 8001532:	0a9b      	lsrs	r3, r3, #10
 8001534:	f240 51f4 	movw	r1, #1524	@ 0x5f4
 8001538:	fb01 f303 	mul.w	r3, r1, r3
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d005      	beq.n	800154e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	3301      	adds	r3, #1
 8001546:	617b      	str	r3, [r7, #20]
 8001548:	e001      	b.n	800154e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else
  {
    bufcount = 1U;
 800154a:	2301      	movs	r3, #1
 800154c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d11c      	bne.n	800158e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800155e:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
 8001562:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800156e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800157a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800157e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	461a      	mov	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800158c:	e04b      	b.n	8001626 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i = 0U; i < bufcount; i++)
 800158e:	2300      	movs	r3, #0
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	e044      	b.n	800161e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800159e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80015a2:	601a      	str	r2, [r3, #0]

      if (i == 0U)
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d107      	bne.n	80015ba <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015b4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80015b8:	601a      	str	r2, [r3, #0]
      }

      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015be:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80015c2:	605a      	str	r2, [r3, #4]

      if (i == (bufcount - 1U))
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d116      	bne.n	80015fc <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015d8:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80015dc:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount - 1U) * ETH_TX_BUF_SIZE;
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	4a24      	ldr	r2, [pc, #144]	@ (8001674 <HAL_ETH_TransmitFrame+0x1cc>)
 80015e2:	fb03 f202 	mul.w	r2, r3, r2
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	4413      	add	r3, r2
 80015ea:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 80015ee:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80015fa:	605a      	str	r2, [r3, #4]
      }

      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001606:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800160a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	461a      	mov	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	62da      	str	r2, [r3, #44]	@ 0x2c
    for (i = 0U; i < bufcount; i++)
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	3301      	adds	r3, #1
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	429a      	cmp	r2, r3
 8001624:	d3b6      	bcc.n	8001594 <HAL_ETH_TransmitFrame+0xec>
    }
  }

  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800162e:	695b      	ldr	r3, [r3, #20]
 8001630:	f003 0304 	and.w	r3, r3, #4
 8001634:	2b00      	cmp	r3, #0
 8001636:	d00d      	beq.n	8001654 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001640:	461a      	mov	r2, r3
 8001642:	2304      	movs	r3, #4
 8001644:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800164e:	461a      	mov	r2, r3
 8001650:	2300      	movs	r3, #0
 8001652:	6053      	str	r3, [r2, #4]
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	371c      	adds	r7, #28
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr
 8001670:	ac02b00b 	.word	0xac02b00b
 8001674:	fffffa0c 	.word	0xfffffa0c

08001678 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8001680:	2300      	movs	r3, #0
 8001682:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800168a:	2b01      	cmp	r3, #1
 800168c:	d101      	bne.n	8001692 <HAL_ETH_GetReceivedFrame+0x1a>
 800168e:	2302      	movs	r3, #2
 8001690:	e070      	b.n	8001774 <HAL_ETH_GetReceivedFrame+0xfc>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2202      	movs	r2, #2
 800169e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	db5a      	blt.n	8001762 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if (((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d030      	beq.n	800171c <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016be:	1c5a      	adds	r2, r3, #1
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d103      	bne.n	80016d4 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	0c1b      	lsrs	r3, r3, #16
 80016e4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80016e8:	3b04      	subs	r3, #4
 80016ea:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	641a      	str	r2, [r3, #64]	@ 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)((heth->RxDesc)->Buffer2NextDescAddr);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	461a      	mov	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2201      	movs	r2, #1
 800170c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      /* Return function status */
      return HAL_OK;
 8001718:	2300      	movs	r3, #0
 800171a:	e02b      	b.n	8001774 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001726:	2b00      	cmp	r3, #0
 8001728:	d010      	beq.n	800174c <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	631a      	str	r2, [r3, #48]	@ 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	635a      	str	r2, [r3, #52]	@ 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2201      	movs	r2, #1
 800173c:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	461a      	mov	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	629a      	str	r2, [r3, #40]	@ 0x28
 800174a:	e00a      	b.n	8001762 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */
    else
    {
      (heth->RxFrameInfos).SegCount++;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001750:	1c5a      	adds	r2, r3, #1
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	461a      	mov	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2201      	movs	r2, #1
 8001766:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
}
 8001774:	4618      	mov	r0, r3
 8001776:	3714      	adds	r7, #20
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr

0800177e <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800178e:	695b      	ldr	r3, [r3, #20]
 8001790:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001794:	2b40      	cmp	r3, #64	@ 0x40
 8001796:	d112      	bne.n	80017be <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f000 f85d 	bl	8001858 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017a6:	461a      	mov	r2, r3
 80017a8:	2340      	movs	r3, #64	@ 0x40
 80017aa:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80017bc:	e01a      	b.n	80017f4 <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017c6:	695b      	ldr	r3, [r3, #20]
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d111      	bne.n	80017f4 <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 f838 	bl	8001846 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017de:	461a      	mov	r2, r3
 80017e0:	2301      	movs	r3, #1
 80017e2:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017fc:	461a      	mov	r2, r3
 80017fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001802:	6153      	str	r3, [r2, #20]

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001812:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001816:	d112      	bne.n	800183e <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 f826 	bl	800186a <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001826:	461a      	mov	r2, r3
 8001828:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800182c:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2201      	movs	r2, #1
 8001832:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }
}
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	bc80      	pop	{r7}
 8001868:	4770      	bx	lr

0800186a <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param  RegValue PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	460b      	mov	r3, r1
 8001886:	607a      	str	r2, [r7, #4]
 8001888:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b82      	cmp	r3, #130	@ 0x82
 800189c:	d101      	bne.n	80018a2 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800189e:	2302      	movs	r3, #2
 80018a0:	e050      	b.n	8001944 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2282      	movs	r2, #130	@ 0x82
 80018a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	f003 031c 	and.w	r3, r3, #28
 80018b8:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	8a1b      	ldrh	r3, [r3, #16]
 80018be:	02db      	lsls	r3, r3, #11
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80018c8:	897b      	ldrh	r3, [r7, #10]
 80018ca:	019b      	lsls	r3, r3, #6
 80018cc:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	f023 0302 	bic.w	r3, r3, #2
 80018dc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018ee:	f7ff fa41 	bl	8000d74 <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018f4:	e015      	b.n	8001922 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80018f6:	f7ff fa3d 	bl	8000d74 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001904:	d309      	bcc.n	800191a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e014      	b.n	8001944 <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1e4      	bne.n	80018f6 <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	b29b      	uxth	r3, r3
 8001934:	461a      	mov	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2201      	movs	r2, #1
 800193e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return HAL_OK;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	460b      	mov	r3, r1
 8001956:	607a      	str	r2, [r7, #4]
 8001958:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b42      	cmp	r3, #66	@ 0x42
 800196c:	d101      	bne.n	8001972 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800196e:	2302      	movs	r3, #2
 8001970:	e04e      	b.n	8001a10 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2242      	movs	r2, #66	@ 0x42
 8001976:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	f003 031c 	and.w	r3, r3, #28
 8001988:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	8a1b      	ldrh	r3, [r3, #16]
 800198e:	02db      	lsls	r3, r3, #11
 8001990:	b29b      	uxth	r3, r3
 8001992:	697a      	ldr	r2, [r7, #20]
 8001994:	4313      	orrs	r3, r2
 8001996:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001998:	897b      	ldrh	r3, [r7, #10]
 800199a:	019b      	lsls	r3, r3, #6
 800199c:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f043 0302 	orr.w	r3, r3, #2
 80019ac:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019c8:	f7ff f9d4 	bl	8000d74 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019ce:	e015      	b.n	80019fc <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80019d0:	f7ff f9d0 	bl	8000d74 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019de:	d309      	bcc.n	80019f4 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e00d      	b.n	8001a10 <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1e4      	bne.n	80019d0 <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3718      	adds	r7, #24
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <HAL_ETH_Start>:
 * @param  heth pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d101      	bne.n	8001a2e <HAL_ETH_Start+0x16>
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	e01f      	b.n	8001a6e <HAL_ETH_Start+0x56>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2201      	movs	r2, #1
 8001a32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2202      	movs	r2, #2
 8001a3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 fb3e 	bl	80020c0 <ETH_MACTransmissionEnable>

  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 fb75 	bl	8002134 <ETH_MACReceptionEnable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 fc00 	bl	8002250 <ETH_FlushTransmitFIFO>

  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 fba9 	bl	80021a8 <ETH_DMATransmissionEnable>

  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 fbd0 	bl	80021fc <ETH_DMAReceptionEnable>

  /* Set the ETH state to READY*/
  heth->State = HAL_ETH_STATE_READY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b082      	sub	sp, #8
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d101      	bne.n	8001a8c <HAL_ETH_Stop+0x16>
 8001a88:	2302      	movs	r3, #2
 8001a8a:	e01f      	b.n	8001acc <HAL_ETH_Stop+0x56>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2202      	movs	r2, #2
 8001a98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 fb98 	bl	80021d2 <ETH_DMATransmissionDisable>

  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 fbbf 	bl	8002226 <ETH_DMAReceptionDisable>

  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 fb60 	bl	800216e <ETH_MACReceptionDisable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 fbce 	bl	8002250 <ETH_FlushTransmitFIFO>

  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 fb20 	bl	80020fa <ETH_MACTransmissionDisable>

  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d101      	bne.n	8001af0 <HAL_ETH_ConfigMAC+0x1c>
 8001aec:	2302      	movs	r3, #2
 8001aee:	e0e4      	b.n	8001cba <HAL_ETH_ConfigMAC+0x1e6>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2202      	movs	r2, #2
 8001afc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

  if (macconf != NULL)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 80b1 	beq.w	8001c6a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));

    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	4b6c      	ldr	r3, [pc, #432]	@ (8001cc4 <HAL_ETH_ConfigMAC+0x1f0>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
                          macconf->Jabber |
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8001b20:	431a      	orrs	r2, r3
                          macconf->InterFrameGap |
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	689b      	ldr	r3, [r3, #8]
                          macconf->Jabber |
 8001b26:	431a      	orrs	r2, r3
                          macconf->CarrierSense |
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	68db      	ldr	r3, [r3, #12]
                          macconf->InterFrameGap |
 8001b2c:	431a      	orrs	r2, r3
                          (heth->Init).Speed |
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
                          macconf->CarrierSense |
 8001b32:	431a      	orrs	r2, r3
                          macconf->ReceiveOwn |
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	691b      	ldr	r3, [r3, #16]
                          (heth->Init).Speed |
 8001b38:	431a      	orrs	r2, r3
                          macconf->LoopbackMode |
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	695b      	ldr	r3, [r3, #20]
                          macconf->ReceiveOwn |
 8001b3e:	431a      	orrs	r2, r3
                          (heth->Init).DuplexMode |
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68db      	ldr	r3, [r3, #12]
                          macconf->LoopbackMode |
 8001b44:	431a      	orrs	r2, r3
                          macconf->ChecksumOffload |
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	699b      	ldr	r3, [r3, #24]
                          (heth->Init).DuplexMode |
 8001b4a:	431a      	orrs	r2, r3
                          macconf->RetryTransmission |
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	69db      	ldr	r3, [r3, #28]
                          macconf->ChecksumOffload |
 8001b50:	431a      	orrs	r2, r3
                          macconf->AutomaticPadCRCStrip |
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	6a1b      	ldr	r3, [r3, #32]
                          macconf->RetryTransmission |
 8001b56:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          macconf->AutomaticPadCRCStrip |
 8001b5c:	431a      	orrs	r2, r3
                          macconf->DeferralCheck);
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          macconf->BackOffLimit |
 8001b62:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b7a:	2001      	movs	r0, #1
 8001b7c:	f7ff f904 	bl	8000d88 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	601a      	str	r2, [r3, #0]

    /*----------------------- ETHERNET MACFFR Configuration --------------------*/
    /* Write to ETHERNET MACFFR */
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
                                          macconf->SourceAddrFilter |
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001b90:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                                          macconf->SourceAddrFilter |
 8001b96:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception |
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                          macconf->PassControlFrames |
 8001b9c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                          macconf->BroadcastFramesReception |
 8001ba2:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                                          macconf->DestinationAddrFilter |
 8001ba8:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                                          macconf->PromiscuousMode |
 8001bae:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001bba:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001bbc:	605a      	str	r2, [r3, #4]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFFR;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bc6:	2001      	movs	r0, #1
 8001bc8:	f7ff f8de 	bl	8000d88 <HAL_Delay>
    (heth->Instance)->MACFFR = tmpreg1;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	605a      	str	r2, [r3, #4]

    /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
    /* Write to ETHERNET MACHTHR */
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001bdc:	609a      	str	r2, [r3, #8]

    /* Write to ETHERNET MACHTLR */
    (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001be6:	60da      	str	r2, [r3, #12]
    /*----------------------- ETHERNET MACFCR Configuration --------------------*/

    /* Get the ETHERNET MACFCR value */
    tmpreg1 = (heth->Instance)->MACFCR;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	60fb      	str	r3, [r7, #12]
    /* Clear xx bits */
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bfe:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001c04:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                          macconf->ZeroQuantaPause |
 8001c0a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect |
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                          macconf->PauseLowThreshold |
 8001c10:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
                          macconf->UnicastPauseFrameDetect |
 8001c16:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                          macconf->ReceiveFlowControl |
 8001c1c:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACFCR */
    (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	619a      	str	r2, [r3, #24]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFCR;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c34:	2001      	movs	r0, #1
 8001c36:	f7ff f8a7 	bl	8000d88 <HAL_Delay>
    (heth->Instance)->MACFCR = tmpreg1;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	619a      	str	r2, [r3, #24]

    /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
                                             macconf->VLANTagIdentifier);
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	61da      	str	r2, [r3, #28]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	69db      	ldr	r3, [r3, #28]
 8001c58:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c5a:	2001      	movs	r0, #1
 8001c5c:	f7ff f894 	bl	8000d88 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	61da      	str	r2, [r3, #28]
 8001c68:	e01e      	b.n	8001ca8 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	60fb      	str	r3, [r7, #12]

    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8001c78:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c9a:	2001      	movs	r0, #1
 8001c9c:	f7ff f874 	bl	8000d88 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	601a      	str	r2, [r3, #0]
  }

  /* Set the ETH state to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	ff20810f 	.word	0xff20810f

08001cc8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b0b0      	sub	sp, #192	@ 0xc0
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d007      	beq.n	8001cee <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ce4:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001cec:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	64bb      	str	r3, [r7, #72]	@ 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	653b      	str	r3, [r7, #80]	@ 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	657b      	str	r3, [r7, #84]	@ 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	65bb      	str	r3, [r7, #88]	@ 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001d02:	2300      	movs	r3, #0
 8001d04:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d103      	bne.n	8001d16 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001d0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d12:	663b      	str	r3, [r7, #96]	@ 0x60
 8001d14:	e001      	b.n	8001d1a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001d1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d1e:	667b      	str	r3, [r7, #100]	@ 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001d20:	2300      	movs	r3, #0
 8001d22:	66bb      	str	r3, [r7, #104]	@ 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001d24:	2300      	movs	r3, #0
 8001d26:	66fb      	str	r3, [r7, #108]	@ 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	673b      	str	r3, [r7, #112]	@ 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	677b      	str	r3, [r7, #116]	@ 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001d30:	2300      	movs	r3, #0
 8001d32:	67bb      	str	r3, [r7, #120]	@ 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001d34:	2340      	movs	r3, #64	@ 0x40
 8001d36:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001d44:	2300      	movs	r3, #0
 8001d46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001d50:	2300      	movs	r3, #0
 8001d52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  macinit.HashTableHigh = 0x0U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  macinit.HashTableLow = 0x0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  macinit.PauseTime = 0x0U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001d68:	2380      	movs	r3, #128	@ 0x80
 8001d6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001d74:	2300      	movs	r3, #0
 8001d76:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001d80:	2300      	movs	r3, #0
 8001d82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001d86:	2300      	movs	r3, #0
 8001d88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001d9c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001da0:	4baa      	ldr	r3, [pc, #680]	@ (800204c <ETH_MACDMAConfig+0x384>)
 8001da2:	4013      	ands	r3, r2
 8001da4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001da8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
                        macinit.Jabber |
 8001daa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001dac:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 8001dae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
                        macinit.Jabber |
 8001db0:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 8001db2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
                        macinit.InterFrameGap |
 8001db4:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 8001dba:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 8001dbc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
                        (heth->Init).Speed |
 8001dbe:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 8001dc0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
                        macinit.ReceiveOwn |
 8001dc2:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 8001dc8:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 8001dca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
                        (heth->Init).DuplexMode |
 8001dcc:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 8001dce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
                        macinit.ChecksumOffload |
 8001dd0:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 8001dd2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
                        macinit.RetryTransmission |
 8001dd4:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 8001dd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
                        macinit.AutomaticPadCRCStrip |
 8001dd8:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 8001dda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
                        macinit.BackOffLimit |
 8001ddc:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001dde:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001de2:	4313      	orrs	r3, r2
 8001de4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001df0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	f7fe ffc3 	bl	8000d88 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001e0a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001e0c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
                                        macinit.SourceAddrFilter |
 8001e0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001e10:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001e12:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
                                        macinit.SourceAddrFilter |
 8001e14:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 8001e16:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
                                        macinit.PassControlFrames |
 8001e1a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001e1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
                                        macinit.BroadcastFramesReception |
 8001e20:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001e22:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
                                        macinit.DestinationAddrFilter |
 8001e26:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001e28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
                                        macinit.PromiscuousMode |
 8001e2c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001e30:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001e38:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001e3a:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e46:	2001      	movs	r0, #1
 8001e48:	f7fe ff9e 	bl	8000d88 <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001e54:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001e5e:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001e68:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001e74:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001e78:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8001e82:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001e86:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001e88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8001e8c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001e8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                        macinit.ZeroQuantaPause |
 8001e92:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 8001e94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
                        macinit.PauseLowThreshold |
 8001e98:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001e9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
                        macinit.UnicastPauseFrameDetect |
 8001e9e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 8001ea0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
                        macinit.ReceiveFlowControl |
 8001ea4:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8001ea6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001eb8:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	f7fe ff5f 	bl	8000d88 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001ed2:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8001ed4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
                                           macinit.VLANTagIdentifier);
 8001ed8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001eee:	2001      	movs	r0, #1
 8001ef0:	f7fe ff4a 	bl	8000d88 <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001efc:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001efe:	2300      	movs	r3, #0
 8001f00:	60bb      	str	r3, [r7, #8]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001f02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f06:	60fb      	str	r3, [r7, #12]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	613b      	str	r3, [r7, #16]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 8001f0c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001f10:	617b      	str	r3, [r7, #20]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61bb      	str	r3, [r7, #24]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001f16:	2300      	movs	r3, #0
 8001f18:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	623b      	str	r3, [r7, #32]
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	627b      	str	r3, [r7, #36]	@ 0x24
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001f22:	2304      	movs	r3, #4
 8001f24:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001f26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001f2c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f30:	633b      	str	r3, [r7, #48]	@ 0x30
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f32:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001f36:	637b      	str	r3, [r7, #52]	@ 0x34
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001f38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001f3e:	2380      	movs	r3, #128	@ 0x80
 8001f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	643b      	str	r3, [r7, #64]	@ 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001f46:	2300      	movs	r3, #0
 8001f48:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001f58:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001f5c:	4b3c      	ldr	r3, [pc, #240]	@ (8002050 <ETH_MACDMAConfig+0x388>)
 8001f5e:	4013      	ands	r3, r2
 8001f60:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8001f64:	68ba      	ldr	r2, [r7, #8]
                        dmainit.ReceiveStoreForward |
 8001f66:	68fb      	ldr	r3, [r7, #12]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8001f68:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 8001f6a:	693b      	ldr	r3, [r7, #16]
                        dmainit.ReceiveStoreForward |
 8001f6c:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 8001f6e:	697b      	ldr	r3, [r7, #20]
                        dmainit.FlushReceivedFrame |
 8001f70:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 8001f72:	69bb      	ldr	r3, [r7, #24]
                        dmainit.TransmitStoreForward |
 8001f74:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 8001f76:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitThresholdControl |
 8001f78:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.ForwardErrorFrames |
 8001f7c:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                        dmainit.ForwardUndersizedGoodFrames |
 8001f80:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 8001f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
                        dmainit.ReceiveThresholdControl |
 8001f84:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8001f86:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f98:	461a      	mov	r2, r3
 8001f9a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001f9e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fae:	2001      	movs	r0, #1
 8001fb0:	f7fe feea 	bl	8000d88 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001fc2:	6193      	str	r3, [r2, #24]
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8001fc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
                                        dmainit.FixedBurst |
 8001fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8001fc8:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001fca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
                                        dmainit.FixedBurst |
 8001fcc:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 8001fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001fd0:	431a      	orrs	r2, r3
                                        dmainit.EnhancedDescriptorFormat |
 8001fd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
                                        dmainit.TxDMABurstLength |
 8001fd4:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 8001fd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fd8:	009b      	lsls	r3, r3, #2
                                        dmainit.EnhancedDescriptorFormat |
 8001fda:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 8001fdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 8001fde:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	6812      	ldr	r2, [r2, #0]
 8001fe4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001fe8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001fec:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	f7fe fec3 	bl	8000d88 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800200a:	461a      	mov	r2, r3
 800200c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002010:	6013      	str	r3, [r2, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d10d      	bne.n	8002036 <ETH_MACDMAConfig+0x36e>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	6812      	ldr	r2, [r2, #0]
 8002028:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800202c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002030:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002034:	61d3      	str	r3, [r2, #28]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	461a      	mov	r2, r3
 800203c:	2100      	movs	r1, #0
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f808 	bl	8002054 <ETH_MACAddressConfig>
}
 8002044:	bf00      	nop
 8002046:	37c0      	adds	r7, #192	@ 0xc0
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	ff20810f 	.word	0xff20810f
 8002050:	f8de3f23 	.word	0xf8de3f23

08002054 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002054:	b480      	push	{r7}
 8002056:	b087      	sub	sp, #28
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3305      	adds	r3, #5
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	021b      	lsls	r3, r3, #8
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	3204      	adds	r2, #4
 800206c:	7812      	ldrb	r2, [r2, #0]
 800206e:	4313      	orrs	r3, r2
 8002070:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	4b10      	ldr	r3, [pc, #64]	@ (80020b8 <ETH_MACAddressConfig+0x64>)
 8002076:	4413      	add	r3, r2
 8002078:	461a      	mov	r2, r3
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3303      	adds	r3, #3
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	061a      	lsls	r2, r3, #24
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3302      	adds	r3, #2
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	041b      	lsls	r3, r3, #16
 800208e:	431a      	orrs	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3301      	adds	r3, #1
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	021b      	lsls	r3, r3, #8
 8002098:	4313      	orrs	r3, r2
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	7812      	ldrb	r2, [r2, #0]
 800209e:	4313      	orrs	r3, r2
 80020a0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	4b05      	ldr	r3, [pc, #20]	@ (80020bc <ETH_MACAddressConfig+0x68>)
 80020a6:	4413      	add	r3, r2
 80020a8:	461a      	mov	r2, r3
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	6013      	str	r3, [r2, #0]
}
 80020ae:	bf00      	nop
 80020b0:	371c      	adds	r7, #28
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr
 80020b8:	40028040 	.word	0x40028040
 80020bc:	40028044 	.word	0x40028044

080020c0 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 0208 	orr.w	r2, r2, #8
 80020da:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80020e4:	2001      	movs	r0, #1
 80020e6:	f000 f8d9 	bl	800229c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	601a      	str	r2, [r3, #0]
}
 80020f2:	bf00      	nop
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b084      	sub	sp, #16
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002102:	2300      	movs	r3, #0
 8002104:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 0208 	bic.w	r2, r2, #8
 8002114:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800211e:	2001      	movs	r0, #1
 8002120:	f000 f8bc 	bl	800229c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	601a      	str	r2, [r3, #0]
}
 800212c:	bf00      	nop
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f042 0204 	orr.w	r2, r2, #4
 800214e:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002158:	2001      	movs	r0, #1
 800215a:	f000 f89f 	bl	800229c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	601a      	str	r2, [r3, #0]
}
 8002166:	bf00      	nop
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b084      	sub	sp, #16
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 0204 	bic.w	r2, r2, #4
 8002188:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002192:	2001      	movs	r0, #1
 8002194:	f000 f882 	bl	800229c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	601a      	str	r2, [r3, #0]
}
 80021a0:	bf00      	nop
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6812      	ldr	r2, [r2, #0]
 80021be:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80021c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80021c6:	6193      	str	r3, [r2, #24]
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr

080021d2 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	6812      	ldr	r2, [r2, #0]
 80021e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80021ec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80021f0:	6193      	str	r3, [r2, #24]
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr

080021fc <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6812      	ldr	r2, [r2, #0]
 8002212:	f043 0302 	orr.w	r3, r3, #2
 8002216:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800221a:	6193      	str	r3, [r2, #24]
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr

08002226 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	6812      	ldr	r2, [r2, #0]
 800223c:	f023 0302 	bic.w	r3, r3, #2
 8002240:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002244:	6193      	str	r3, [r2, #24]
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr

08002250 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002258:	2300      	movs	r3, #0
 800225a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6812      	ldr	r2, [r2, #0]
 800226a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800226e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002272:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002280:	2001      	movs	r0, #1
 8002282:	f000 f80b 	bl	800229c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002290:	6193      	str	r3, [r2, #24]
}
 8002292:	bf00      	nop
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022a4:	4b0a      	ldr	r3, [pc, #40]	@ (80022d0 <ETH_Delay+0x34>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a0a      	ldr	r2, [pc, #40]	@ (80022d4 <ETH_Delay+0x38>)
 80022aa:	fba2 2303 	umull	r2, r3, r2, r3
 80022ae:	0a5b      	lsrs	r3, r3, #9
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	fb02 f303 	mul.w	r3, r2, r3
 80022b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022b8:	bf00      	nop
  }
  while (Delay --);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	1e5a      	subs	r2, r3, #1
 80022be:	60fa      	str	r2, [r7, #12]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1f9      	bne.n	80022b8 <ETH_Delay+0x1c>
}
 80022c4:	bf00      	nop
 80022c6:	bf00      	nop
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr
 80022d0:	20000000 	.word	0x20000000
 80022d4:	10624dd3 	.word	0x10624dd3

080022d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022d8:	b480      	push	{r7}
 80022da:	b087      	sub	sp, #28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022e2:	2300      	movs	r3, #0
 80022e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022e6:	e16f      	b.n	80025c8 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	2101      	movs	r1, #1
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	fa01 f303 	lsl.w	r3, r1, r3
 80022f4:	4013      	ands	r3, r2
 80022f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 8161 	beq.w	80025c2 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 0303 	and.w	r3, r3, #3
 8002308:	2b01      	cmp	r3, #1
 800230a:	d005      	beq.n	8002318 <HAL_GPIO_Init+0x40>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f003 0303 	and.w	r3, r3, #3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d130      	bne.n	800237a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	2203      	movs	r2, #3
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	4013      	ands	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	68da      	ldr	r2, [r3, #12]
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	4313      	orrs	r3, r2
 8002340:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800234e:	2201      	movs	r2, #1
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43db      	mvns	r3, r3
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	4013      	ands	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	091b      	lsrs	r3, r3, #4
 8002364:	f003 0201 	and.w	r2, r3, #1
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	2b03      	cmp	r3, #3
 8002384:	d017      	beq.n	80023b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	2203      	movs	r2, #3
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43db      	mvns	r3, r3
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	4013      	ands	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d123      	bne.n	800240a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	08da      	lsrs	r2, r3, #3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3208      	adds	r2, #8
 80023ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	220f      	movs	r2, #15
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43db      	mvns	r3, r3
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	4013      	ands	r3, r2
 80023e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	691a      	ldr	r2, [r3, #16]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	08da      	lsrs	r2, r3, #3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3208      	adds	r2, #8
 8002404:	6939      	ldr	r1, [r7, #16]
 8002406:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	2203      	movs	r2, #3
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43db      	mvns	r3, r3
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	4013      	ands	r3, r2
 8002420:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f003 0203 	and.w	r2, r3, #3
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	4313      	orrs	r3, r2
 8002436:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002446:	2b00      	cmp	r3, #0
 8002448:	f000 80bb 	beq.w	80025c2 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800244c:	2300      	movs	r3, #0
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	4b64      	ldr	r3, [pc, #400]	@ (80025e4 <HAL_GPIO_Init+0x30c>)
 8002452:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002454:	4a63      	ldr	r2, [pc, #396]	@ (80025e4 <HAL_GPIO_Init+0x30c>)
 8002456:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800245a:	6453      	str	r3, [r2, #68]	@ 0x44
 800245c:	4b61      	ldr	r3, [pc, #388]	@ (80025e4 <HAL_GPIO_Init+0x30c>)
 800245e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002460:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002464:	60bb      	str	r3, [r7, #8]
 8002466:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002468:	4a5f      	ldr	r2, [pc, #380]	@ (80025e8 <HAL_GPIO_Init+0x310>)
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	089b      	lsrs	r3, r3, #2
 800246e:	3302      	adds	r3, #2
 8002470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002474:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	220f      	movs	r2, #15
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	43db      	mvns	r3, r3
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	4013      	ands	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a57      	ldr	r2, [pc, #348]	@ (80025ec <HAL_GPIO_Init+0x314>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d031      	beq.n	80024f8 <HAL_GPIO_Init+0x220>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a56      	ldr	r2, [pc, #344]	@ (80025f0 <HAL_GPIO_Init+0x318>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d02b      	beq.n	80024f4 <HAL_GPIO_Init+0x21c>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a55      	ldr	r2, [pc, #340]	@ (80025f4 <HAL_GPIO_Init+0x31c>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d025      	beq.n	80024f0 <HAL_GPIO_Init+0x218>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a54      	ldr	r2, [pc, #336]	@ (80025f8 <HAL_GPIO_Init+0x320>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d01f      	beq.n	80024ec <HAL_GPIO_Init+0x214>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a53      	ldr	r2, [pc, #332]	@ (80025fc <HAL_GPIO_Init+0x324>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d019      	beq.n	80024e8 <HAL_GPIO_Init+0x210>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a52      	ldr	r2, [pc, #328]	@ (8002600 <HAL_GPIO_Init+0x328>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d013      	beq.n	80024e4 <HAL_GPIO_Init+0x20c>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a51      	ldr	r2, [pc, #324]	@ (8002604 <HAL_GPIO_Init+0x32c>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d00d      	beq.n	80024e0 <HAL_GPIO_Init+0x208>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a50      	ldr	r2, [pc, #320]	@ (8002608 <HAL_GPIO_Init+0x330>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d007      	beq.n	80024dc <HAL_GPIO_Init+0x204>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a4f      	ldr	r2, [pc, #316]	@ (800260c <HAL_GPIO_Init+0x334>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d101      	bne.n	80024d8 <HAL_GPIO_Init+0x200>
 80024d4:	2308      	movs	r3, #8
 80024d6:	e010      	b.n	80024fa <HAL_GPIO_Init+0x222>
 80024d8:	2309      	movs	r3, #9
 80024da:	e00e      	b.n	80024fa <HAL_GPIO_Init+0x222>
 80024dc:	2307      	movs	r3, #7
 80024de:	e00c      	b.n	80024fa <HAL_GPIO_Init+0x222>
 80024e0:	2306      	movs	r3, #6
 80024e2:	e00a      	b.n	80024fa <HAL_GPIO_Init+0x222>
 80024e4:	2305      	movs	r3, #5
 80024e6:	e008      	b.n	80024fa <HAL_GPIO_Init+0x222>
 80024e8:	2304      	movs	r3, #4
 80024ea:	e006      	b.n	80024fa <HAL_GPIO_Init+0x222>
 80024ec:	2303      	movs	r3, #3
 80024ee:	e004      	b.n	80024fa <HAL_GPIO_Init+0x222>
 80024f0:	2302      	movs	r3, #2
 80024f2:	e002      	b.n	80024fa <HAL_GPIO_Init+0x222>
 80024f4:	2301      	movs	r3, #1
 80024f6:	e000      	b.n	80024fa <HAL_GPIO_Init+0x222>
 80024f8:	2300      	movs	r3, #0
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	f002 0203 	and.w	r2, r2, #3
 8002500:	0092      	lsls	r2, r2, #2
 8002502:	4093      	lsls	r3, r2
 8002504:	461a      	mov	r2, r3
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800250c:	4936      	ldr	r1, [pc, #216]	@ (80025e8 <HAL_GPIO_Init+0x310>)
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	089b      	lsrs	r3, r3, #2
 8002512:	3302      	adds	r3, #2
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800251a:	4b3d      	ldr	r3, [pc, #244]	@ (8002610 <HAL_GPIO_Init+0x338>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	43db      	mvns	r3, r3
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4013      	ands	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4313      	orrs	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800253e:	4a34      	ldr	r2, [pc, #208]	@ (8002610 <HAL_GPIO_Init+0x338>)
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002544:	4b32      	ldr	r3, [pc, #200]	@ (8002610 <HAL_GPIO_Init+0x338>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	43db      	mvns	r3, r3
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	4013      	ands	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	4313      	orrs	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002568:	4a29      	ldr	r2, [pc, #164]	@ (8002610 <HAL_GPIO_Init+0x338>)
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800256e:	4b28      	ldr	r3, [pc, #160]	@ (8002610 <HAL_GPIO_Init+0x338>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	43db      	mvns	r3, r3
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4013      	ands	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4313      	orrs	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002592:	4a1f      	ldr	r2, [pc, #124]	@ (8002610 <HAL_GPIO_Init+0x338>)
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002598:	4b1d      	ldr	r3, [pc, #116]	@ (8002610 <HAL_GPIO_Init+0x338>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	43db      	mvns	r3, r3
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	4013      	ands	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80025bc:	4a14      	ldr	r2, [pc, #80]	@ (8002610 <HAL_GPIO_Init+0x338>)
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	3301      	adds	r3, #1
 80025c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	fa22 f303 	lsr.w	r3, r2, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f47f ae88 	bne.w	80022e8 <HAL_GPIO_Init+0x10>
  }
}
 80025d8:	bf00      	nop
 80025da:	bf00      	nop
 80025dc:	371c      	adds	r7, #28
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr
 80025e4:	40023800 	.word	0x40023800
 80025e8:	40013800 	.word	0x40013800
 80025ec:	40020000 	.word	0x40020000
 80025f0:	40020400 	.word	0x40020400
 80025f4:	40020800 	.word	0x40020800
 80025f8:	40020c00 	.word	0x40020c00
 80025fc:	40021000 	.word	0x40021000
 8002600:	40021400 	.word	0x40021400
 8002604:	40021800 	.word	0x40021800
 8002608:	40021c00 	.word	0x40021c00
 800260c:	40022000 	.word	0x40022000
 8002610:	40013c00 	.word	0x40013c00

08002614 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	460b      	mov	r3, r1
 800261e:	807b      	strh	r3, [r7, #2]
 8002620:	4613      	mov	r3, r2
 8002622:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002624:	787b      	ldrb	r3, [r7, #1]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800262a:	887a      	ldrh	r2, [r7, #2]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002630:	e003      	b.n	800263a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002632:	887b      	ldrh	r3, [r7, #2]
 8002634:	041a      	lsls	r2, r3, #16
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	619a      	str	r2, [r3, #24]
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr

08002644 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af02      	add	r7, sp, #8
 800264a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e101      	b.n	800285a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	d106      	bne.n	8002676 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f7fe f937 	bl	80008e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2203      	movs	r2, #3
 800267a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002684:	d102      	bne.n	800268c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4618      	mov	r0, r3
 8002692:	f000 ff14 	bl	80034be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6818      	ldr	r0, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	7c1a      	ldrb	r2, [r3, #16]
 800269e:	f88d 2000 	strb.w	r2, [sp]
 80026a2:	3304      	adds	r3, #4
 80026a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026a6:	f000 feb1 	bl	800340c <USB_CoreInit>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d005      	beq.n	80026bc <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2202      	movs	r2, #2
 80026b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e0ce      	b.n	800285a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2100      	movs	r1, #0
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 ff0b 	bl	80034de <USB_SetCurrentMode>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d005      	beq.n	80026da <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2202      	movs	r2, #2
 80026d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e0bf      	b.n	800285a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026da:	2300      	movs	r3, #0
 80026dc:	73fb      	strb	r3, [r7, #15]
 80026de:	e04a      	b.n	8002776 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026e0:	7bfa      	ldrb	r2, [r7, #15]
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	4613      	mov	r3, r2
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	4413      	add	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	3315      	adds	r3, #21
 80026f0:	2201      	movs	r2, #1
 80026f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026f4:	7bfa      	ldrb	r2, [r7, #15]
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	4413      	add	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	3314      	adds	r3, #20
 8002704:	7bfa      	ldrb	r2, [r7, #15]
 8002706:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002708:	7bfa      	ldrb	r2, [r7, #15]
 800270a:	7bfb      	ldrb	r3, [r7, #15]
 800270c:	b298      	uxth	r0, r3
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	4613      	mov	r3, r2
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	4413      	add	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	440b      	add	r3, r1
 800271a:	332e      	adds	r3, #46	@ 0x2e
 800271c:	4602      	mov	r2, r0
 800271e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002720:	7bfa      	ldrb	r2, [r7, #15]
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	4613      	mov	r3, r2
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	4413      	add	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	3318      	adds	r3, #24
 8002730:	2200      	movs	r2, #0
 8002732:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002734:	7bfa      	ldrb	r2, [r7, #15]
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	4613      	mov	r3, r2
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	4413      	add	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	331c      	adds	r3, #28
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002748:	7bfa      	ldrb	r2, [r7, #15]
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	4613      	mov	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	4413      	add	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	3320      	adds	r3, #32
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800275c:	7bfa      	ldrb	r2, [r7, #15]
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	4613      	mov	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	4413      	add	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	3324      	adds	r3, #36	@ 0x24
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002770:	7bfb      	ldrb	r3, [r7, #15]
 8002772:	3301      	adds	r3, #1
 8002774:	73fb      	strb	r3, [r7, #15]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	791b      	ldrb	r3, [r3, #4]
 800277a:	7bfa      	ldrb	r2, [r7, #15]
 800277c:	429a      	cmp	r2, r3
 800277e:	d3af      	bcc.n	80026e0 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002780:	2300      	movs	r3, #0
 8002782:	73fb      	strb	r3, [r7, #15]
 8002784:	e044      	b.n	8002810 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002786:	7bfa      	ldrb	r2, [r7, #15]
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	4413      	add	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	440b      	add	r3, r1
 8002794:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002798:	2200      	movs	r2, #0
 800279a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800279c:	7bfa      	ldrb	r2, [r7, #15]
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	4413      	add	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80027ae:	7bfa      	ldrb	r2, [r7, #15]
 80027b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027b2:	7bfa      	ldrb	r2, [r7, #15]
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	4613      	mov	r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	4413      	add	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	440b      	add	r3, r1
 80027c0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80027c4:	2200      	movs	r2, #0
 80027c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027c8:	7bfa      	ldrb	r2, [r7, #15]
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	4613      	mov	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	4413      	add	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027de:	7bfa      	ldrb	r2, [r7, #15]
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	4613      	mov	r3, r2
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	4413      	add	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	440b      	add	r3, r1
 80027ec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027f4:	7bfa      	ldrb	r2, [r7, #15]
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	4613      	mov	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	4413      	add	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	440b      	add	r3, r1
 8002802:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800280a:	7bfb      	ldrb	r3, [r7, #15]
 800280c:	3301      	adds	r3, #1
 800280e:	73fb      	strb	r3, [r7, #15]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	791b      	ldrb	r3, [r3, #4]
 8002814:	7bfa      	ldrb	r2, [r7, #15]
 8002816:	429a      	cmp	r2, r3
 8002818:	d3b5      	bcc.n	8002786 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6818      	ldr	r0, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	7c1a      	ldrb	r2, [r3, #16]
 8002822:	f88d 2000 	strb.w	r2, [sp]
 8002826:	3304      	adds	r3, #4
 8002828:	cb0e      	ldmia	r3, {r1, r2, r3}
 800282a:	f000 fea5 	bl	8003578 <USB_DevInit>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d005      	beq.n	8002840 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2202      	movs	r2, #2
 8002838:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e00c      	b.n	800285a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
  (void)USB_DevDisconnect(hpcd->Instance);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f001 f86a 	bl	800392c <USB_DevDisconnect>

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
	...

08002864 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b08a      	sub	sp, #40	@ 0x28
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e23b      	b.n	8002cee <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d050      	beq.n	8002924 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002882:	4b9e      	ldr	r3, [pc, #632]	@ (8002afc <HAL_RCC_OscConfig+0x298>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 030c 	and.w	r3, r3, #12
 800288a:	2b04      	cmp	r3, #4
 800288c:	d00c      	beq.n	80028a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800288e:	4b9b      	ldr	r3, [pc, #620]	@ (8002afc <HAL_RCC_OscConfig+0x298>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002896:	2b08      	cmp	r3, #8
 8002898:	d112      	bne.n	80028c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800289a:	4b98      	ldr	r3, [pc, #608]	@ (8002afc <HAL_RCC_OscConfig+0x298>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028a6:	d10b      	bne.n	80028c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a8:	4b94      	ldr	r3, [pc, #592]	@ (8002afc <HAL_RCC_OscConfig+0x298>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d036      	beq.n	8002922 <HAL_RCC_OscConfig+0xbe>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d132      	bne.n	8002922 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e216      	b.n	8002cee <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	4b8e      	ldr	r3, [pc, #568]	@ (8002b00 <HAL_RCC_OscConfig+0x29c>)
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d013      	beq.n	80028fa <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d2:	f7fe fa4f 	bl	8000d74 <HAL_GetTick>
 80028d6:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028da:	f7fe fa4b 	bl	8000d74 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	6a3b      	ldr	r3, [r7, #32]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b64      	cmp	r3, #100	@ 0x64
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e200      	b.n	8002cee <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ec:	4b83      	ldr	r3, [pc, #524]	@ (8002afc <HAL_RCC_OscConfig+0x298>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0f0      	beq.n	80028da <HAL_RCC_OscConfig+0x76>
 80028f8:	e014      	b.n	8002924 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fa:	f7fe fa3b 	bl	8000d74 <HAL_GetTick>
 80028fe:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002900:	e008      	b.n	8002914 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002902:	f7fe fa37 	bl	8000d74 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	6a3b      	ldr	r3, [r7, #32]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b64      	cmp	r3, #100	@ 0x64
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e1ec      	b.n	8002cee <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002914:	4b79      	ldr	r3, [pc, #484]	@ (8002afc <HAL_RCC_OscConfig+0x298>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1f0      	bne.n	8002902 <HAL_RCC_OscConfig+0x9e>
 8002920:	e000      	b.n	8002924 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002922:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d077      	beq.n	8002a20 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002930:	4b72      	ldr	r3, [pc, #456]	@ (8002afc <HAL_RCC_OscConfig+0x298>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f003 030c 	and.w	r3, r3, #12
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00b      	beq.n	8002954 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800293c:	4b6f      	ldr	r3, [pc, #444]	@ (8002afc <HAL_RCC_OscConfig+0x298>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002944:	2b08      	cmp	r3, #8
 8002946:	d126      	bne.n	8002996 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002948:	4b6c      	ldr	r3, [pc, #432]	@ (8002afc <HAL_RCC_OscConfig+0x298>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d120      	bne.n	8002996 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002954:	4b69      	ldr	r3, [pc, #420]	@ (8002afc <HAL_RCC_OscConfig+0x298>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d005      	beq.n	800296c <HAL_RCC_OscConfig+0x108>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d001      	beq.n	800296c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e1c0      	b.n	8002cee <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800296c:	4b63      	ldr	r3, [pc, #396]	@ (8002afc <HAL_RCC_OscConfig+0x298>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	21f8      	movs	r1, #248	@ 0xf8
 800297a:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297c:	69b9      	ldr	r1, [r7, #24]
 800297e:	fa91 f1a1 	rbit	r1, r1
 8002982:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002984:	6979      	ldr	r1, [r7, #20]
 8002986:	fab1 f181 	clz	r1, r1
 800298a:	b2c9      	uxtb	r1, r1
 800298c:	408b      	lsls	r3, r1
 800298e:	495b      	ldr	r1, [pc, #364]	@ (8002afc <HAL_RCC_OscConfig+0x298>)
 8002990:	4313      	orrs	r3, r2
 8002992:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002994:	e044      	b.n	8002a20 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d02a      	beq.n	80029f4 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800299e:	4b59      	ldr	r3, [pc, #356]	@ (8002b04 <HAL_RCC_OscConfig+0x2a0>)
 80029a0:	2201      	movs	r2, #1
 80029a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a4:	f7fe f9e6 	bl	8000d74 <HAL_GetTick>
 80029a8:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029ac:	f7fe f9e2 	bl	8000d74 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	6a3b      	ldr	r3, [r7, #32]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e197      	b.n	8002cee <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029be:	4b4f      	ldr	r3, [pc, #316]	@ (8002afc <HAL_RCC_OscConfig+0x298>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0f0      	beq.n	80029ac <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ca:	4b4c      	ldr	r3, [pc, #304]	@ (8002afc <HAL_RCC_OscConfig+0x298>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	21f8      	movs	r1, #248	@ 0xf8
 80029d8:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029da:	6939      	ldr	r1, [r7, #16]
 80029dc:	fa91 f1a1 	rbit	r1, r1
 80029e0:	60f9      	str	r1, [r7, #12]
  return result;
 80029e2:	68f9      	ldr	r1, [r7, #12]
 80029e4:	fab1 f181 	clz	r1, r1
 80029e8:	b2c9      	uxtb	r1, r1
 80029ea:	408b      	lsls	r3, r1
 80029ec:	4943      	ldr	r1, [pc, #268]	@ (8002afc <HAL_RCC_OscConfig+0x298>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	600b      	str	r3, [r1, #0]
 80029f2:	e015      	b.n	8002a20 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029f4:	4b43      	ldr	r3, [pc, #268]	@ (8002b04 <HAL_RCC_OscConfig+0x2a0>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fa:	f7fe f9bb 	bl	8000d74 <HAL_GetTick>
 80029fe:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a02:	f7fe f9b7 	bl	8000d74 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e16c      	b.n	8002cee <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a14:	4b39      	ldr	r3, [pc, #228]	@ (8002afc <HAL_RCC_OscConfig+0x298>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1f0      	bne.n	8002a02 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0308 	and.w	r3, r3, #8
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d030      	beq.n	8002a8e <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d016      	beq.n	8002a62 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a34:	4b34      	ldr	r3, [pc, #208]	@ (8002b08 <HAL_RCC_OscConfig+0x2a4>)
 8002a36:	2201      	movs	r2, #1
 8002a38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a3a:	f7fe f99b 	bl	8000d74 <HAL_GetTick>
 8002a3e:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a42:	f7fe f997 	bl	8000d74 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	6a3b      	ldr	r3, [r7, #32]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e14c      	b.n	8002cee <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a54:	4b29      	ldr	r3, [pc, #164]	@ (8002afc <HAL_RCC_OscConfig+0x298>)
 8002a56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0f0      	beq.n	8002a42 <HAL_RCC_OscConfig+0x1de>
 8002a60:	e015      	b.n	8002a8e <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a62:	4b29      	ldr	r3, [pc, #164]	@ (8002b08 <HAL_RCC_OscConfig+0x2a4>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a68:	f7fe f984 	bl	8000d74 <HAL_GetTick>
 8002a6c:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a70:	f7fe f980 	bl	8000d74 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e135      	b.n	8002cee <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a82:	4b1e      	ldr	r3, [pc, #120]	@ (8002afc <HAL_RCC_OscConfig+0x298>)
 8002a84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1f0      	bne.n	8002a70 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 8087 	beq.w	8002baa <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aa2:	4b16      	ldr	r3, [pc, #88]	@ (8002afc <HAL_RCC_OscConfig+0x298>)
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d110      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60bb      	str	r3, [r7, #8]
 8002ab2:	4b12      	ldr	r3, [pc, #72]	@ (8002afc <HAL_RCC_OscConfig+0x298>)
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab6:	4a11      	ldr	r2, [pc, #68]	@ (8002afc <HAL_RCC_OscConfig+0x298>)
 8002ab8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002abc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002abe:	4b0f      	ldr	r3, [pc, #60]	@ (8002afc <HAL_RCC_OscConfig+0x298>)
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ac6:	60bb      	str	r3, [r7, #8]
 8002ac8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aca:	2301      	movs	r3, #1
 8002acc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002ad0:	4b0e      	ldr	r3, [pc, #56]	@ (8002b0c <HAL_RCC_OscConfig+0x2a8>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a0d      	ldr	r2, [pc, #52]	@ (8002b0c <HAL_RCC_OscConfig+0x2a8>)
 8002ad6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ada:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002adc:	4b0b      	ldr	r3, [pc, #44]	@ (8002b0c <HAL_RCC_OscConfig+0x2a8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d122      	bne.n	8002b2e <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ae8:	4b08      	ldr	r3, [pc, #32]	@ (8002b0c <HAL_RCC_OscConfig+0x2a8>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a07      	ldr	r2, [pc, #28]	@ (8002b0c <HAL_RCC_OscConfig+0x2a8>)
 8002aee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002af2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002af4:	f7fe f93e 	bl	8000d74 <HAL_GetTick>
 8002af8:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afa:	e012      	b.n	8002b22 <HAL_RCC_OscConfig+0x2be>
 8002afc:	40023800 	.word	0x40023800
 8002b00:	40023802 	.word	0x40023802
 8002b04:	42470000 	.word	0x42470000
 8002b08:	42470e80 	.word	0x42470e80
 8002b0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b10:	f7fe f930 	bl	8000d74 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	6a3b      	ldr	r3, [r7, #32]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e0e5      	b.n	8002cee <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b22:	4b75      	ldr	r3, [pc, #468]	@ (8002cf8 <HAL_RCC_OscConfig+0x494>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0f0      	beq.n	8002b10 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	4b72      	ldr	r3, [pc, #456]	@ (8002cfc <HAL_RCC_OscConfig+0x498>)
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d015      	beq.n	8002b6c <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b40:	f7fe f918 	bl	8000d74 <HAL_GetTick>
 8002b44:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b46:	e00a      	b.n	8002b5e <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b48:	f7fe f914 	bl	8000d74 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e0c7      	b.n	8002cee <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b5e:	4b68      	ldr	r3, [pc, #416]	@ (8002d00 <HAL_RCC_OscConfig+0x49c>)
 8002b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0ee      	beq.n	8002b48 <HAL_RCC_OscConfig+0x2e4>
 8002b6a:	e014      	b.n	8002b96 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b6c:	f7fe f902 	bl	8000d74 <HAL_GetTick>
 8002b70:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b72:	e00a      	b.n	8002b8a <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b74:	f7fe f8fe 	bl	8000d74 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e0b1      	b.n	8002cee <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b8a:	4b5d      	ldr	r3, [pc, #372]	@ (8002d00 <HAL_RCC_OscConfig+0x49c>)
 8002b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1ee      	bne.n	8002b74 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d105      	bne.n	8002baa <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b9e:	4b58      	ldr	r3, [pc, #352]	@ (8002d00 <HAL_RCC_OscConfig+0x49c>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba2:	4a57      	ldr	r2, [pc, #348]	@ (8002d00 <HAL_RCC_OscConfig+0x49c>)
 8002ba4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ba8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 809c 	beq.w	8002cec <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bb4:	4b52      	ldr	r3, [pc, #328]	@ (8002d00 <HAL_RCC_OscConfig+0x49c>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f003 030c 	and.w	r3, r3, #12
 8002bbc:	2b08      	cmp	r3, #8
 8002bbe:	d061      	beq.n	8002c84 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d146      	bne.n	8002c56 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc8:	4b4e      	ldr	r3, [pc, #312]	@ (8002d04 <HAL_RCC_OscConfig+0x4a0>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bce:	f7fe f8d1 	bl	8000d74 <HAL_GetTick>
 8002bd2:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd4:	e008      	b.n	8002be8 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd6:	f7fe f8cd 	bl	8000d74 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b64      	cmp	r3, #100	@ 0x64
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e082      	b.n	8002cee <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002be8:	4b45      	ldr	r3, [pc, #276]	@ (8002d00 <HAL_RCC_OscConfig+0x49c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1f0      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bf4:	4b42      	ldr	r3, [pc, #264]	@ (8002d00 <HAL_RCC_OscConfig+0x49c>)
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	4b43      	ldr	r3, [pc, #268]	@ (8002d08 <HAL_RCC_OscConfig+0x4a4>)
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	69d1      	ldr	r1, [r2, #28]
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6a12      	ldr	r2, [r2, #32]
 8002c04:	4311      	orrs	r1, r2
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c0a:	0192      	lsls	r2, r2, #6
 8002c0c:	4311      	orrs	r1, r2
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002c12:	0612      	lsls	r2, r2, #24
 8002c14:	4311      	orrs	r1, r2
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002c1a:	0852      	lsrs	r2, r2, #1
 8002c1c:	3a01      	subs	r2, #1
 8002c1e:	0412      	lsls	r2, r2, #16
 8002c20:	430a      	orrs	r2, r1
 8002c22:	4937      	ldr	r1, [pc, #220]	@ (8002d00 <HAL_RCC_OscConfig+0x49c>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c28:	4b36      	ldr	r3, [pc, #216]	@ (8002d04 <HAL_RCC_OscConfig+0x4a0>)
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2e:	f7fe f8a1 	bl	8000d74 <HAL_GetTick>
 8002c32:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c34:	e008      	b.n	8002c48 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c36:	f7fe f89d 	bl	8000d74 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	6a3b      	ldr	r3, [r7, #32]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b64      	cmp	r3, #100	@ 0x64
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e052      	b.n	8002cee <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c48:	4b2d      	ldr	r3, [pc, #180]	@ (8002d00 <HAL_RCC_OscConfig+0x49c>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d0f0      	beq.n	8002c36 <HAL_RCC_OscConfig+0x3d2>
 8002c54:	e04a      	b.n	8002cec <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c56:	4b2b      	ldr	r3, [pc, #172]	@ (8002d04 <HAL_RCC_OscConfig+0x4a0>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5c:	f7fe f88a 	bl	8000d74 <HAL_GetTick>
 8002c60:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c64:	f7fe f886 	bl	8000d74 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	6a3b      	ldr	r3, [r7, #32]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b64      	cmp	r3, #100	@ 0x64
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e03b      	b.n	8002cee <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c76:	4b22      	ldr	r3, [pc, #136]	@ (8002d00 <HAL_RCC_OscConfig+0x49c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1f0      	bne.n	8002c64 <HAL_RCC_OscConfig+0x400>
 8002c82:	e033      	b.n	8002cec <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d101      	bne.n	8002c90 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e02e      	b.n	8002cee <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8002c90:	4b1b      	ldr	r3, [pc, #108]	@ (8002d00 <HAL_RCC_OscConfig+0x49c>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d121      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d11a      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cb2:	69fa      	ldr	r2, [r7, #28]
 8002cb4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002cb8:	4013      	ands	r3, r2
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002cbe:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d111      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cce:	085b      	lsrs	r3, r3, #1
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d107      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce2:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d001      	beq.n	8002cec <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e000      	b.n	8002cee <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3728      	adds	r7, #40	@ 0x28
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40007000 	.word	0x40007000
 8002cfc:	40023870 	.word	0x40023870
 8002d00:	40023800 	.word	0x40023800
 8002d04:	42470060 	.word	0x42470060
 8002d08:	f0bc8000 	.word	0xf0bc8000

08002d0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e0d2      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d20:	4b6b      	ldr	r3, [pc, #428]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 030f 	and.w	r3, r3, #15
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d90c      	bls.n	8002d48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d2e:	4b68      	ldr	r3, [pc, #416]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d36:	4b66      	ldr	r3, [pc, #408]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d001      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e0be      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d020      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d005      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d60:	4b5c      	ldr	r3, [pc, #368]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	4a5b      	ldr	r2, [pc, #364]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d66:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0308 	and.w	r3, r3, #8
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d005      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8002d78:	4b56      	ldr	r3, [pc, #344]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	4a55      	ldr	r2, [pc, #340]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d82:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d84:	4b53      	ldr	r3, [pc, #332]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	4950      	ldr	r1, [pc, #320]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d040      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d107      	bne.n	8002dba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002daa:	4b4a      	ldr	r3, [pc, #296]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d115      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e085      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d107      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc2:	4b44      	ldr	r3, [pc, #272]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d109      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e079      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd2:	4b40      	ldr	r3, [pc, #256]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e071      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002de2:	4b3c      	ldr	r3, [pc, #240]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f023 0203 	bic.w	r2, r3, #3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	4939      	ldr	r1, [pc, #228]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002df4:	f7fd ffbe 	bl	8000d74 <HAL_GetTick>
 8002df8:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfa:	e00a      	b.n	8002e12 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dfc:	f7fd ffba 	bl	8000d74 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e059      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e12:	4b30      	ldr	r3, [pc, #192]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 020c 	and.w	r2, r3, #12
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d1eb      	bne.n	8002dfc <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e24:	4b2a      	ldr	r3, [pc, #168]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 030f 	and.w	r3, r3, #15
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d20c      	bcs.n	8002e4c <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e32:	4b27      	ldr	r3, [pc, #156]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3a:	4b25      	ldr	r3, [pc, #148]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d001      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e03c      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d008      	beq.n	8002e6a <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e58:	4b1e      	ldr	r3, [pc, #120]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	491b      	ldr	r1, [pc, #108]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d009      	beq.n	8002e8a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e76:	4b17      	ldr	r3, [pc, #92]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	4913      	ldr	r1, [pc, #76]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002e8a:	f000 f82b 	bl	8002ee4 <HAL_RCC_GetSysClockFreq>
 8002e8e:	4601      	mov	r1, r0
 8002e90:	4b10      	ldr	r3, [pc, #64]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e98:	22f0      	movs	r2, #240	@ 0xf0
 8002e9a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	fa92 f2a2 	rbit	r2, r2
 8002ea2:	60fa      	str	r2, [r7, #12]
  return result;
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	fab2 f282 	clz	r2, r2
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	40d3      	lsrs	r3, r2
 8002eae:	4a0a      	ldr	r2, [pc, #40]	@ (8002ed8 <HAL_RCC_ClockConfig+0x1cc>)
 8002eb0:	5cd3      	ldrb	r3, [r2, r3]
 8002eb2:	fa21 f303 	lsr.w	r3, r1, r3
 8002eb6:	4a09      	ldr	r2, [pc, #36]	@ (8002edc <HAL_RCC_ClockConfig+0x1d0>)
 8002eb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002eba:	4b09      	ldr	r3, [pc, #36]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1d4>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fd ff16 	bl	8000cf0 <HAL_InitTick>

  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3718      	adds	r7, #24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40023c00 	.word	0x40023c00
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	0801019c 	.word	0x0801019c
 8002edc:	20000000 	.word	0x20000000
 8002ee0:	20000004 	.word	0x20000004

08002ee4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ee8:	b094      	sub	sp, #80	@ 0x50
 8002eea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002eec:	2300      	movs	r3, #0
 8002eee:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002efc:	4b7c      	ldr	r3, [pc, #496]	@ (80030f0 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 030c 	and.w	r3, r3, #12
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d00d      	beq.n	8002f24 <HAL_RCC_GetSysClockFreq+0x40>
 8002f08:	2b08      	cmp	r3, #8
 8002f0a:	f200 80e7 	bhi.w	80030dc <HAL_RCC_GetSysClockFreq+0x1f8>
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <HAL_RCC_GetSysClockFreq+0x34>
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d003      	beq.n	8002f1e <HAL_RCC_GetSysClockFreq+0x3a>
 8002f16:	e0e1      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f18:	4b76      	ldr	r3, [pc, #472]	@ (80030f4 <HAL_RCC_GetSysClockFreq+0x210>)
 8002f1a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002f1c:	e0e1      	b.n	80030e2 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f1e:	4b76      	ldr	r3, [pc, #472]	@ (80030f8 <HAL_RCC_GetSysClockFreq+0x214>)
 8002f20:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f22:	e0de      	b.n	80030e2 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f24:	4b72      	ldr	r3, [pc, #456]	@ (80030f0 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f2c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f2e:	4b70      	ldr	r3, [pc, #448]	@ (80030f0 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d065      	beq.n	8003006 <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f3a:	4b6d      	ldr	r3, [pc, #436]	@ (80030f0 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	099b      	lsrs	r3, r3, #6
 8002f40:	2200      	movs	r2, #0
 8002f42:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f44:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f4e:	2300      	movs	r3, #0
 8002f50:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002f56:	4622      	mov	r2, r4
 8002f58:	462b      	mov	r3, r5
 8002f5a:	f04f 0000 	mov.w	r0, #0
 8002f5e:	f04f 0100 	mov.w	r1, #0
 8002f62:	0159      	lsls	r1, r3, #5
 8002f64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f68:	0150      	lsls	r0, r2, #5
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	4621      	mov	r1, r4
 8002f70:	1a51      	subs	r1, r2, r1
 8002f72:	6139      	str	r1, [r7, #16]
 8002f74:	4629      	mov	r1, r5
 8002f76:	eb63 0301 	sbc.w	r3, r3, r1
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	f04f 0300 	mov.w	r3, #0
 8002f84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f88:	4659      	mov	r1, fp
 8002f8a:	018b      	lsls	r3, r1, #6
 8002f8c:	4651      	mov	r1, sl
 8002f8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f92:	4651      	mov	r1, sl
 8002f94:	018a      	lsls	r2, r1, #6
 8002f96:	46d4      	mov	ip, sl
 8002f98:	ebb2 080c 	subs.w	r8, r2, ip
 8002f9c:	4659      	mov	r1, fp
 8002f9e:	eb63 0901 	sbc.w	r9, r3, r1
 8002fa2:	f04f 0200 	mov.w	r2, #0
 8002fa6:	f04f 0300 	mov.w	r3, #0
 8002faa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fb6:	4690      	mov	r8, r2
 8002fb8:	4699      	mov	r9, r3
 8002fba:	4623      	mov	r3, r4
 8002fbc:	eb18 0303 	adds.w	r3, r8, r3
 8002fc0:	60bb      	str	r3, [r7, #8]
 8002fc2:	462b      	mov	r3, r5
 8002fc4:	eb49 0303 	adc.w	r3, r9, r3
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	f04f 0300 	mov.w	r3, #0
 8002fd2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002fd6:	4629      	mov	r1, r5
 8002fd8:	024b      	lsls	r3, r1, #9
 8002fda:	4620      	mov	r0, r4
 8002fdc:	4629      	mov	r1, r5
 8002fde:	4604      	mov	r4, r0
 8002fe0:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002fe4:	4601      	mov	r1, r0
 8002fe6:	024a      	lsls	r2, r1, #9
 8002fe8:	4610      	mov	r0, r2
 8002fea:	4619      	mov	r1, r3
 8002fec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fee:	2200      	movs	r2, #0
 8002ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ff2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ff4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ff8:	f7fd f8e4 	bl	80001c4 <__aeabi_uldivmod>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	4613      	mov	r3, r2
 8003002:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003004:	e05c      	b.n	80030c0 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003006:	4b3a      	ldr	r3, [pc, #232]	@ (80030f0 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	099b      	lsrs	r3, r3, #6
 800300c:	2200      	movs	r2, #0
 800300e:	4618      	mov	r0, r3
 8003010:	4611      	mov	r1, r2
 8003012:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003016:	623b      	str	r3, [r7, #32]
 8003018:	2300      	movs	r3, #0
 800301a:	627b      	str	r3, [r7, #36]	@ 0x24
 800301c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003020:	4642      	mov	r2, r8
 8003022:	464b      	mov	r3, r9
 8003024:	f04f 0000 	mov.w	r0, #0
 8003028:	f04f 0100 	mov.w	r1, #0
 800302c:	0159      	lsls	r1, r3, #5
 800302e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003032:	0150      	lsls	r0, r2, #5
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	46c4      	mov	ip, r8
 800303a:	ebb2 0a0c 	subs.w	sl, r2, ip
 800303e:	4640      	mov	r0, r8
 8003040:	4649      	mov	r1, r9
 8003042:	468c      	mov	ip, r1
 8003044:	eb63 0b0c 	sbc.w	fp, r3, ip
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	f04f 0300 	mov.w	r3, #0
 8003050:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003054:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003058:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800305c:	ebb2 040a 	subs.w	r4, r2, sl
 8003060:	eb63 050b 	sbc.w	r5, r3, fp
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	f04f 0300 	mov.w	r3, #0
 800306c:	00eb      	lsls	r3, r5, #3
 800306e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003072:	00e2      	lsls	r2, r4, #3
 8003074:	4614      	mov	r4, r2
 8003076:	461d      	mov	r5, r3
 8003078:	4603      	mov	r3, r0
 800307a:	18e3      	adds	r3, r4, r3
 800307c:	603b      	str	r3, [r7, #0]
 800307e:	460b      	mov	r3, r1
 8003080:	eb45 0303 	adc.w	r3, r5, r3
 8003084:	607b      	str	r3, [r7, #4]
 8003086:	f04f 0200 	mov.w	r2, #0
 800308a:	f04f 0300 	mov.w	r3, #0
 800308e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003092:	4629      	mov	r1, r5
 8003094:	028b      	lsls	r3, r1, #10
 8003096:	4620      	mov	r0, r4
 8003098:	4629      	mov	r1, r5
 800309a:	4604      	mov	r4, r0
 800309c:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80030a0:	4601      	mov	r1, r0
 80030a2:	028a      	lsls	r2, r1, #10
 80030a4:	4610      	mov	r0, r2
 80030a6:	4619      	mov	r1, r3
 80030a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030aa:	2200      	movs	r2, #0
 80030ac:	61bb      	str	r3, [r7, #24]
 80030ae:	61fa      	str	r2, [r7, #28]
 80030b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030b4:	f7fd f886 	bl	80001c4 <__aeabi_uldivmod>
 80030b8:	4602      	mov	r2, r0
 80030ba:	460b      	mov	r3, r1
 80030bc:	4613      	mov	r3, r2
 80030be:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030c0:	4b0b      	ldr	r3, [pc, #44]	@ (80030f0 <HAL_RCC_GetSysClockFreq+0x20c>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	0c1b      	lsrs	r3, r3, #16
 80030c6:	f003 0303 	and.w	r3, r3, #3
 80030ca:	3301      	adds	r3, #1
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80030d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80030d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030da:	e002      	b.n	80030e2 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030dc:	4b05      	ldr	r3, [pc, #20]	@ (80030f4 <HAL_RCC_GetSysClockFreq+0x210>)
 80030de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3750      	adds	r7, #80	@ 0x50
 80030e8:	46bd      	mov	sp, r7
 80030ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030ee:	bf00      	nop
 80030f0:	40023800 	.word	0x40023800
 80030f4:	00f42400 	.word	0x00f42400
 80030f8:	007a1200 	.word	0x007a1200

080030fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003100:	4b02      	ldr	r3, [pc, #8]	@ (800310c <HAL_RCC_GetHCLKFreq+0x10>)
 8003102:	681b      	ldr	r3, [r3, #0]
}
 8003104:	4618      	mov	r0, r3
 8003106:	46bd      	mov	sp, r7
 8003108:	bc80      	pop	{r7}
 800310a:	4770      	bx	lr
 800310c:	20000000 	.word	0x20000000

08003110 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8003116:	f7ff fff1 	bl	80030fc <HAL_RCC_GetHCLKFreq>
 800311a:	4601      	mov	r1, r0
 800311c:	4b0b      	ldr	r3, [pc, #44]	@ (800314c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8003124:	f44f 52e0 	mov.w	r2, #7168	@ 0x1c00
 8003128:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	fa92 f2a2 	rbit	r2, r2
 8003130:	603a      	str	r2, [r7, #0]
  return result;
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	fab2 f282 	clz	r2, r2
 8003138:	b2d2      	uxtb	r2, r2
 800313a:	40d3      	lsrs	r3, r2
 800313c:	4a04      	ldr	r2, [pc, #16]	@ (8003150 <HAL_RCC_GetPCLK1Freq+0x40>)
 800313e:	5cd3      	ldrb	r3, [r2, r3]
 8003140:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003144:	4618      	mov	r0, r3
 8003146:	3708      	adds	r7, #8
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40023800 	.word	0x40023800
 8003150:	080101ac 	.word	0x080101ac

08003154 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800315a:	f7ff ffcf 	bl	80030fc <HAL_RCC_GetHCLKFreq>
 800315e:	4601      	mov	r1, r0
 8003160:	4b0b      	ldr	r3, [pc, #44]	@ (8003190 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8003168:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 800316c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	fa92 f2a2 	rbit	r2, r2
 8003174:	603a      	str	r2, [r7, #0]
  return result;
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	fab2 f282 	clz	r2, r2
 800317c:	b2d2      	uxtb	r2, r2
 800317e:	40d3      	lsrs	r3, r2
 8003180:	4a04      	ldr	r2, [pc, #16]	@ (8003194 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003182:	5cd3      	ldrb	r3, [r2, r3]
 8003184:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003188:	4618      	mov	r0, r3
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40023800 	.word	0x40023800
 8003194:	080101ac 	.word	0x080101ac

08003198 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e042      	b.n	8003230 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d106      	bne.n	80031c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7fd fb48 	bl	8000854 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2224      	movs	r2, #36	@ 0x24
 80031c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 f82b 	bl	8003238 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	691a      	ldr	r2, [r3, #16]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	695a      	ldr	r2, [r3, #20]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003200:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003210:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2220      	movs	r2, #32
 800321c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2220      	movs	r2, #32
 8003224:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	431a      	orrs	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	4313      	orrs	r3, r2
 800326c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003278:	f023 030c 	bic.w	r3, r3, #12
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6812      	ldr	r2, [r2, #0]
 8003280:	68b9      	ldr	r1, [r7, #8]
 8003282:	430b      	orrs	r3, r1
 8003284:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	699a      	ldr	r2, [r3, #24]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a57      	ldr	r2, [pc, #348]	@ (8003400 <UART_SetConfig+0x1c8>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d004      	beq.n	80032b0 <UART_SetConfig+0x78>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a56      	ldr	r2, [pc, #344]	@ (8003404 <UART_SetConfig+0x1cc>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d103      	bne.n	80032b8 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80032b0:	f7ff ff50 	bl	8003154 <HAL_RCC_GetPCLK2Freq>
 80032b4:	60f8      	str	r0, [r7, #12]
 80032b6:	e002      	b.n	80032be <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80032b8:	f7ff ff2a 	bl	8003110 <HAL_RCC_GetPCLK1Freq>
 80032bc:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032c6:	d14c      	bne.n	8003362 <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	4613      	mov	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	009a      	lsls	r2, r3, #2
 80032d2:	441a      	add	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	fbb2 f3f3 	udiv	r3, r2, r3
 80032de:	4a4a      	ldr	r2, [pc, #296]	@ (8003408 <UART_SetConfig+0x1d0>)
 80032e0:	fba2 2303 	umull	r2, r3, r2, r3
 80032e4:	095b      	lsrs	r3, r3, #5
 80032e6:	0119      	lsls	r1, r3, #4
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	4613      	mov	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	009a      	lsls	r2, r3, #2
 80032f2:	441a      	add	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80032fe:	4b42      	ldr	r3, [pc, #264]	@ (8003408 <UART_SetConfig+0x1d0>)
 8003300:	fba3 0302 	umull	r0, r3, r3, r2
 8003304:	095b      	lsrs	r3, r3, #5
 8003306:	2064      	movs	r0, #100	@ 0x64
 8003308:	fb00 f303 	mul.w	r3, r0, r3
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	3332      	adds	r3, #50	@ 0x32
 8003312:	4a3d      	ldr	r2, [pc, #244]	@ (8003408 <UART_SetConfig+0x1d0>)
 8003314:	fba2 2303 	umull	r2, r3, r2, r3
 8003318:	095b      	lsrs	r3, r3, #5
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003320:	4419      	add	r1, r3
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	4613      	mov	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4413      	add	r3, r2
 800332a:	009a      	lsls	r2, r3, #2
 800332c:	441a      	add	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	fbb2 f2f3 	udiv	r2, r2, r3
 8003338:	4b33      	ldr	r3, [pc, #204]	@ (8003408 <UART_SetConfig+0x1d0>)
 800333a:	fba3 0302 	umull	r0, r3, r3, r2
 800333e:	095b      	lsrs	r3, r3, #5
 8003340:	2064      	movs	r0, #100	@ 0x64
 8003342:	fb00 f303 	mul.w	r3, r0, r3
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	3332      	adds	r3, #50	@ 0x32
 800334c:	4a2e      	ldr	r2, [pc, #184]	@ (8003408 <UART_SetConfig+0x1d0>)
 800334e:	fba2 2303 	umull	r2, r3, r2, r3
 8003352:	095b      	lsrs	r3, r3, #5
 8003354:	f003 0207 	and.w	r2, r3, #7
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	440a      	add	r2, r1
 800335e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003360:	e04a      	b.n	80033f8 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	4613      	mov	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	009a      	lsls	r2, r3, #2
 800336c:	441a      	add	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	fbb2 f3f3 	udiv	r3, r2, r3
 8003378:	4a23      	ldr	r2, [pc, #140]	@ (8003408 <UART_SetConfig+0x1d0>)
 800337a:	fba2 2303 	umull	r2, r3, r2, r3
 800337e:	095b      	lsrs	r3, r3, #5
 8003380:	0119      	lsls	r1, r3, #4
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	4613      	mov	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	009a      	lsls	r2, r3, #2
 800338c:	441a      	add	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	fbb2 f2f3 	udiv	r2, r2, r3
 8003398:	4b1b      	ldr	r3, [pc, #108]	@ (8003408 <UART_SetConfig+0x1d0>)
 800339a:	fba3 0302 	umull	r0, r3, r3, r2
 800339e:	095b      	lsrs	r3, r3, #5
 80033a0:	2064      	movs	r0, #100	@ 0x64
 80033a2:	fb00 f303 	mul.w	r3, r0, r3
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	3332      	adds	r3, #50	@ 0x32
 80033ac:	4a16      	ldr	r2, [pc, #88]	@ (8003408 <UART_SetConfig+0x1d0>)
 80033ae:	fba2 2303 	umull	r2, r3, r2, r3
 80033b2:	095b      	lsrs	r3, r3, #5
 80033b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033b8:	4419      	add	r1, r3
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	4613      	mov	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	009a      	lsls	r2, r3, #2
 80033c4:	441a      	add	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80033d0:	4b0d      	ldr	r3, [pc, #52]	@ (8003408 <UART_SetConfig+0x1d0>)
 80033d2:	fba3 0302 	umull	r0, r3, r3, r2
 80033d6:	095b      	lsrs	r3, r3, #5
 80033d8:	2064      	movs	r0, #100	@ 0x64
 80033da:	fb00 f303 	mul.w	r3, r0, r3
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	3332      	adds	r3, #50	@ 0x32
 80033e4:	4a08      	ldr	r2, [pc, #32]	@ (8003408 <UART_SetConfig+0x1d0>)
 80033e6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ea:	095b      	lsrs	r3, r3, #5
 80033ec:	f003 020f 	and.w	r2, r3, #15
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	440a      	add	r2, r1
 80033f6:	609a      	str	r2, [r3, #8]
}
 80033f8:	bf00      	nop
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40011000 	.word	0x40011000
 8003404:	40011400 	.word	0x40011400
 8003408:	51eb851f 	.word	0x51eb851f

0800340c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800340c:	b084      	sub	sp, #16
 800340e:	b580      	push	{r7, lr}
 8003410:	b084      	sub	sp, #16
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
 8003416:	f107 001c 	add.w	r0, r7, #28
 800341a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800341e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003422:	2b01      	cmp	r3, #1
 8003424:	d123      	bne.n	800346e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800342a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800343a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800344e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003452:	2b01      	cmp	r3, #1
 8003454:	d105      	bne.n	8003462 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 fa8f 	bl	8003986 <USB_CoreReset>
 8003468:	4603      	mov	r3, r0
 800346a:	73fb      	strb	r3, [r7, #15]
 800346c:	e010      	b.n	8003490 <USB_CoreInit+0x84>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 fa83 	bl	8003986 <USB_CoreReset>
 8003480:	4603      	mov	r3, r0
 8003482:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003488:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8003490:	7fbb      	ldrb	r3, [r7, #30]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d10b      	bne.n	80034ae <USB_CoreInit+0xa2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f043 0206 	orr.w	r2, r3, #6
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f043 0220 	orr.w	r2, r3, #32
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80034ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80034ba:	b004      	add	sp, #16
 80034bc:	4770      	bx	lr

080034be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f023 0201 	bic.w	r2, r3, #1
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	bc80      	pop	{r7}
 80034dc:	4770      	bx	lr

080034de <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b084      	sub	sp, #16
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
 80034e6:	460b      	mov	r3, r1
 80034e8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80034fa:	78fb      	ldrb	r3, [r7, #3]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d115      	bne.n	800352c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800350c:	200a      	movs	r0, #10
 800350e:	f7fd fc3b 	bl	8000d88 <HAL_Delay>
      ms += 10U;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	330a      	adds	r3, #10
 8003516:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 fa27 	bl	800396c <USB_GetMode>
 800351e:	4603      	mov	r3, r0
 8003520:	2b01      	cmp	r3, #1
 8003522:	d01e      	beq.n	8003562 <USB_SetCurrentMode+0x84>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2bc7      	cmp	r3, #199	@ 0xc7
 8003528:	d9f0      	bls.n	800350c <USB_SetCurrentMode+0x2e>
 800352a:	e01a      	b.n	8003562 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800352c:	78fb      	ldrb	r3, [r7, #3]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d115      	bne.n	800355e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800353e:	200a      	movs	r0, #10
 8003540:	f7fd fc22 	bl	8000d88 <HAL_Delay>
      ms += 10U;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	330a      	adds	r3, #10
 8003548:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 fa0e 	bl	800396c <USB_GetMode>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d005      	beq.n	8003562 <USB_SetCurrentMode+0x84>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2bc7      	cmp	r3, #199	@ 0xc7
 800355a:	d9f0      	bls.n	800353e <USB_SetCurrentMode+0x60>
 800355c:	e001      	b.n	8003562 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e005      	b.n	800356e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2bc8      	cmp	r3, #200	@ 0xc8
 8003566:	d101      	bne.n	800356c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e000      	b.n	800356e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
	...

08003578 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003578:	b084      	sub	sp, #16
 800357a:	b580      	push	{r7, lr}
 800357c:	b086      	sub	sp, #24
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
 8003582:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003586:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800358a:	2300      	movs	r3, #0
 800358c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003592:	2300      	movs	r3, #0
 8003594:	613b      	str	r3, [r7, #16]
 8003596:	e009      	b.n	80035ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	3340      	adds	r3, #64	@ 0x40
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4413      	add	r3, r2
 80035a2:	2200      	movs	r2, #0
 80035a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	3301      	adds	r3, #1
 80035aa:	613b      	str	r3, [r7, #16]
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	2b0e      	cmp	r3, #14
 80035b0:	d9f2      	bls.n	8003598 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80035b2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d11c      	bne.n	80035f4 <USB_DevInit+0x7c>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80035c8:	f043 0302 	orr.w	r3, r3, #2
 80035cc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035de:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ea:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	639a      	str	r2, [r3, #56]	@ 0x38
 80035f2:	e00b      	b.n	800360c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003604:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003612:	461a      	mov	r2, r3
 8003614:	2300      	movs	r3, #0
 8003616:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003618:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800361c:	2b01      	cmp	r3, #1
 800361e:	d10d      	bne.n	800363c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003620:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003624:	2b00      	cmp	r3, #0
 8003626:	d104      	bne.n	8003632 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003628:	2100      	movs	r1, #0
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f966 	bl	80038fc <USB_SetDevSpeed>
 8003630:	e008      	b.n	8003644 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003632:	2101      	movs	r1, #1
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 f961 	bl	80038fc <USB_SetDevSpeed>
 800363a:	e003      	b.n	8003644 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800363c:	2103      	movs	r1, #3
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f95c 	bl	80038fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003644:	2110      	movs	r1, #16
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f8fa 	bl	8003840 <USB_FlushTxFifo>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f923 	bl	80038a2 <USB_FlushRxFifo>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800366c:	461a      	mov	r2, r3
 800366e:	2300      	movs	r3, #0
 8003670:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003678:	461a      	mov	r2, r3
 800367a:	2300      	movs	r3, #0
 800367c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003684:	461a      	mov	r2, r3
 8003686:	2300      	movs	r3, #0
 8003688:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800368a:	2300      	movs	r3, #0
 800368c:	613b      	str	r3, [r7, #16]
 800368e:	e043      	b.n	8003718 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	015a      	lsls	r2, r3, #5
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4413      	add	r3, r2
 8003698:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80036a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80036a6:	d118      	bne.n	80036da <USB_DevInit+0x162>
    {
      if (i == 0U)
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10a      	bne.n	80036c4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	015a      	lsls	r2, r3, #5
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	4413      	add	r3, r2
 80036b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036ba:	461a      	mov	r2, r3
 80036bc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	e013      	b.n	80036ec <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	015a      	lsls	r2, r3, #5
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4413      	add	r3, r2
 80036cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036d0:	461a      	mov	r2, r3
 80036d2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80036d6:	6013      	str	r3, [r2, #0]
 80036d8:	e008      	b.n	80036ec <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	015a      	lsls	r2, r3, #5
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	4413      	add	r3, r2
 80036e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036e6:	461a      	mov	r2, r3
 80036e8:	2300      	movs	r3, #0
 80036ea:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	015a      	lsls	r2, r3, #5
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4413      	add	r3, r2
 80036f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036f8:	461a      	mov	r2, r3
 80036fa:	2300      	movs	r3, #0
 80036fc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	015a      	lsls	r2, r3, #5
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	4413      	add	r3, r2
 8003706:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800370a:	461a      	mov	r2, r3
 800370c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003710:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	3301      	adds	r3, #1
 8003716:	613b      	str	r3, [r7, #16]
 8003718:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800371c:	461a      	mov	r2, r3
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	4293      	cmp	r3, r2
 8003722:	d3b5      	bcc.n	8003690 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003724:	2300      	movs	r3, #0
 8003726:	613b      	str	r3, [r7, #16]
 8003728:	e043      	b.n	80037b2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	015a      	lsls	r2, r3, #5
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	4413      	add	r3, r2
 8003732:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800373c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003740:	d118      	bne.n	8003774 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10a      	bne.n	800375e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	015a      	lsls	r2, r3, #5
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4413      	add	r3, r2
 8003750:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003754:	461a      	mov	r2, r3
 8003756:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800375a:	6013      	str	r3, [r2, #0]
 800375c:	e013      	b.n	8003786 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	015a      	lsls	r2, r3, #5
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	4413      	add	r3, r2
 8003766:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800376a:	461a      	mov	r2, r3
 800376c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	e008      	b.n	8003786 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	015a      	lsls	r2, r3, #5
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4413      	add	r3, r2
 800377c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003780:	461a      	mov	r2, r3
 8003782:	2300      	movs	r3, #0
 8003784:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	015a      	lsls	r2, r3, #5
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	4413      	add	r3, r2
 800378e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003792:	461a      	mov	r2, r3
 8003794:	2300      	movs	r3, #0
 8003796:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	015a      	lsls	r2, r3, #5
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4413      	add	r3, r2
 80037a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037a4:	461a      	mov	r2, r3
 80037a6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80037aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	3301      	adds	r3, #1
 80037b0:	613b      	str	r3, [r7, #16]
 80037b2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80037b6:	461a      	mov	r2, r3
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d3b5      	bcc.n	800372a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037d0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80037de:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80037e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d105      	bne.n	80037f4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	f043 0210 	orr.w	r2, r3, #16
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	699a      	ldr	r2, [r3, #24]
 80037f8:	4b10      	ldr	r3, [pc, #64]	@ (800383c <USB_DevInit+0x2c4>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003800:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003804:	2b00      	cmp	r3, #0
 8003806:	d005      	beq.n	8003814 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	f043 0208 	orr.w	r2, r3, #8
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003814:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003818:	2b01      	cmp	r3, #1
 800381a:	d107      	bne.n	800382c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003824:	f043 0304 	orr.w	r3, r3, #4
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800382c:	7dfb      	ldrb	r3, [r7, #23]
}
 800382e:	4618      	mov	r0, r3
 8003830:	3718      	adds	r7, #24
 8003832:	46bd      	mov	sp, r7
 8003834:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003838:	b004      	add	sp, #16
 800383a:	4770      	bx	lr
 800383c:	803c3800 	.word	0x803c3800

08003840 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800384a:	2300      	movs	r3, #0
 800384c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	3301      	adds	r3, #1
 8003852:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800385a:	d901      	bls.n	8003860 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e01b      	b.n	8003898 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	2b00      	cmp	r3, #0
 8003866:	daf2      	bge.n	800384e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003868:	2300      	movs	r3, #0
 800386a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	019b      	lsls	r3, r3, #6
 8003870:	f043 0220 	orr.w	r2, r3, #32
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	3301      	adds	r3, #1
 800387c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003884:	d901      	bls.n	800388a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e006      	b.n	8003898 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	f003 0320 	and.w	r3, r3, #32
 8003892:	2b20      	cmp	r3, #32
 8003894:	d0f0      	beq.n	8003878 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	bc80      	pop	{r7}
 80038a0:	4770      	bx	lr

080038a2 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b085      	sub	sp, #20
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	3301      	adds	r3, #1
 80038b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80038ba:	d901      	bls.n	80038c0 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e018      	b.n	80038f2 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	daf2      	bge.n	80038ae <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80038c8:	2300      	movs	r3, #0
 80038ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2210      	movs	r2, #16
 80038d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	3301      	adds	r3, #1
 80038d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80038de:	d901      	bls.n	80038e4 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e006      	b.n	80038f2 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	f003 0310 	and.w	r3, r3, #16
 80038ec:	2b10      	cmp	r3, #16
 80038ee:	d0f0      	beq.n	80038d2 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bc80      	pop	{r7}
 80038fa:	4770      	bx	lr

080038fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	460b      	mov	r3, r1
 8003906:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	78fb      	ldrb	r3, [r7, #3]
 8003916:	68f9      	ldr	r1, [r7, #12]
 8003918:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800391c:	4313      	orrs	r3, r2
 800391e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3714      	adds	r7, #20
 8003926:	46bd      	mov	sp, r7
 8003928:	bc80      	pop	{r7}
 800392a:	4770      	bx	lr

0800392c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003946:	f023 0303 	bic.w	r3, r3, #3
 800394a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800395a:	f043 0302 	orr.w	r3, r3, #2
 800395e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3714      	adds	r7, #20
 8003966:	46bd      	mov	sp, r7
 8003968:	bc80      	pop	{r7}
 800396a:	4770      	bx	lr

0800396c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	f003 0301 	and.w	r3, r3, #1
}
 800397c:	4618      	mov	r0, r3
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	bc80      	pop	{r7}
 8003984:	4770      	bx	lr

08003986 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003986:	b480      	push	{r7}
 8003988:	b085      	sub	sp, #20
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	3301      	adds	r3, #1
 8003996:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800399e:	d901      	bls.n	80039a4 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e01b      	b.n	80039dc <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	daf2      	bge.n	8003992 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80039ac:	2300      	movs	r3, #0
 80039ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	f043 0201 	orr.w	r2, r3, #1
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	3301      	adds	r3, #1
 80039c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80039c8:	d901      	bls.n	80039ce <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e006      	b.n	80039dc <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d0f0      	beq.n	80039bc <USB_CoreReset+0x36>

  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3714      	adds	r7, #20
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bc80      	pop	{r7}
 80039e4:	4770      	bx	lr
	...

080039e8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80039ee:	4b87      	ldr	r3, [pc, #540]	@ (8003c0c <MX_LWIP_Init+0x224>)
 80039f0:	22c0      	movs	r2, #192	@ 0xc0
 80039f2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80039f4:	4b85      	ldr	r3, [pc, #532]	@ (8003c0c <MX_LWIP_Init+0x224>)
 80039f6:	22a8      	movs	r2, #168	@ 0xa8
 80039f8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 80039fa:	4b84      	ldr	r3, [pc, #528]	@ (8003c0c <MX_LWIP_Init+0x224>)
 80039fc:	2201      	movs	r2, #1
 80039fe:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 123;
 8003a00:	4b82      	ldr	r3, [pc, #520]	@ (8003c0c <MX_LWIP_Init+0x224>)
 8003a02:	227b      	movs	r2, #123	@ 0x7b
 8003a04:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003a06:	4b82      	ldr	r3, [pc, #520]	@ (8003c10 <MX_LWIP_Init+0x228>)
 8003a08:	22ff      	movs	r2, #255	@ 0xff
 8003a0a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003a0c:	4b80      	ldr	r3, [pc, #512]	@ (8003c10 <MX_LWIP_Init+0x228>)
 8003a0e:	22ff      	movs	r2, #255	@ 0xff
 8003a10:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003a12:	4b7f      	ldr	r3, [pc, #508]	@ (8003c10 <MX_LWIP_Init+0x228>)
 8003a14:	22ff      	movs	r2, #255	@ 0xff
 8003a16:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003a18:	4b7d      	ldr	r3, [pc, #500]	@ (8003c10 <MX_LWIP_Init+0x228>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8003a1e:	4b7d      	ldr	r3, [pc, #500]	@ (8003c14 <MX_LWIP_Init+0x22c>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8003a24:	4b7b      	ldr	r3, [pc, #492]	@ (8003c14 <MX_LWIP_Init+0x22c>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8003a2a:	4b7a      	ldr	r3, [pc, #488]	@ (8003c14 <MX_LWIP_Init+0x22c>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8003a30:	4b78      	ldr	r3, [pc, #480]	@ (8003c14 <MX_LWIP_Init+0x22c>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 8003a36:	f000 fcd5 	bl	80043e4 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003a3a:	4b74      	ldr	r3, [pc, #464]	@ (8003c0c <MX_LWIP_Init+0x224>)
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	061a      	lsls	r2, r3, #24
 8003a40:	4b72      	ldr	r3, [pc, #456]	@ (8003c0c <MX_LWIP_Init+0x224>)
 8003a42:	785b      	ldrb	r3, [r3, #1]
 8003a44:	041b      	lsls	r3, r3, #16
 8003a46:	431a      	orrs	r2, r3
 8003a48:	4b70      	ldr	r3, [pc, #448]	@ (8003c0c <MX_LWIP_Init+0x224>)
 8003a4a:	789b      	ldrb	r3, [r3, #2]
 8003a4c:	021b      	lsls	r3, r3, #8
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	4a6e      	ldr	r2, [pc, #440]	@ (8003c0c <MX_LWIP_Init+0x224>)
 8003a52:	78d2      	ldrb	r2, [r2, #3]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	061a      	lsls	r2, r3, #24
 8003a58:	4b6c      	ldr	r3, [pc, #432]	@ (8003c0c <MX_LWIP_Init+0x224>)
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	0619      	lsls	r1, r3, #24
 8003a5e:	4b6b      	ldr	r3, [pc, #428]	@ (8003c0c <MX_LWIP_Init+0x224>)
 8003a60:	785b      	ldrb	r3, [r3, #1]
 8003a62:	041b      	lsls	r3, r3, #16
 8003a64:	4319      	orrs	r1, r3
 8003a66:	4b69      	ldr	r3, [pc, #420]	@ (8003c0c <MX_LWIP_Init+0x224>)
 8003a68:	789b      	ldrb	r3, [r3, #2]
 8003a6a:	021b      	lsls	r3, r3, #8
 8003a6c:	430b      	orrs	r3, r1
 8003a6e:	4967      	ldr	r1, [pc, #412]	@ (8003c0c <MX_LWIP_Init+0x224>)
 8003a70:	78c9      	ldrb	r1, [r1, #3]
 8003a72:	430b      	orrs	r3, r1
 8003a74:	021b      	lsls	r3, r3, #8
 8003a76:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	4b63      	ldr	r3, [pc, #396]	@ (8003c0c <MX_LWIP_Init+0x224>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	0619      	lsls	r1, r3, #24
 8003a82:	4b62      	ldr	r3, [pc, #392]	@ (8003c0c <MX_LWIP_Init+0x224>)
 8003a84:	785b      	ldrb	r3, [r3, #1]
 8003a86:	041b      	lsls	r3, r3, #16
 8003a88:	4319      	orrs	r1, r3
 8003a8a:	4b60      	ldr	r3, [pc, #384]	@ (8003c0c <MX_LWIP_Init+0x224>)
 8003a8c:	789b      	ldrb	r3, [r3, #2]
 8003a8e:	021b      	lsls	r3, r3, #8
 8003a90:	430b      	orrs	r3, r1
 8003a92:	495e      	ldr	r1, [pc, #376]	@ (8003c0c <MX_LWIP_Init+0x224>)
 8003a94:	78c9      	ldrb	r1, [r1, #3]
 8003a96:	430b      	orrs	r3, r1
 8003a98:	0a1b      	lsrs	r3, r3, #8
 8003a9a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	4b5a      	ldr	r3, [pc, #360]	@ (8003c0c <MX_LWIP_Init+0x224>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	0619      	lsls	r1, r3, #24
 8003aa6:	4b59      	ldr	r3, [pc, #356]	@ (8003c0c <MX_LWIP_Init+0x224>)
 8003aa8:	785b      	ldrb	r3, [r3, #1]
 8003aaa:	041b      	lsls	r3, r3, #16
 8003aac:	4319      	orrs	r1, r3
 8003aae:	4b57      	ldr	r3, [pc, #348]	@ (8003c0c <MX_LWIP_Init+0x224>)
 8003ab0:	789b      	ldrb	r3, [r3, #2]
 8003ab2:	021b      	lsls	r3, r3, #8
 8003ab4:	430b      	orrs	r3, r1
 8003ab6:	4955      	ldr	r1, [pc, #340]	@ (8003c0c <MX_LWIP_Init+0x224>)
 8003ab8:	78c9      	ldrb	r1, [r1, #3]
 8003aba:	430b      	orrs	r3, r1
 8003abc:	0e1b      	lsrs	r3, r3, #24
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	4a55      	ldr	r2, [pc, #340]	@ (8003c18 <MX_LWIP_Init+0x230>)
 8003ac2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003ac4:	4b52      	ldr	r3, [pc, #328]	@ (8003c10 <MX_LWIP_Init+0x228>)
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	061a      	lsls	r2, r3, #24
 8003aca:	4b51      	ldr	r3, [pc, #324]	@ (8003c10 <MX_LWIP_Init+0x228>)
 8003acc:	785b      	ldrb	r3, [r3, #1]
 8003ace:	041b      	lsls	r3, r3, #16
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	4b4f      	ldr	r3, [pc, #316]	@ (8003c10 <MX_LWIP_Init+0x228>)
 8003ad4:	789b      	ldrb	r3, [r3, #2]
 8003ad6:	021b      	lsls	r3, r3, #8
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	4a4d      	ldr	r2, [pc, #308]	@ (8003c10 <MX_LWIP_Init+0x228>)
 8003adc:	78d2      	ldrb	r2, [r2, #3]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	061a      	lsls	r2, r3, #24
 8003ae2:	4b4b      	ldr	r3, [pc, #300]	@ (8003c10 <MX_LWIP_Init+0x228>)
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	0619      	lsls	r1, r3, #24
 8003ae8:	4b49      	ldr	r3, [pc, #292]	@ (8003c10 <MX_LWIP_Init+0x228>)
 8003aea:	785b      	ldrb	r3, [r3, #1]
 8003aec:	041b      	lsls	r3, r3, #16
 8003aee:	4319      	orrs	r1, r3
 8003af0:	4b47      	ldr	r3, [pc, #284]	@ (8003c10 <MX_LWIP_Init+0x228>)
 8003af2:	789b      	ldrb	r3, [r3, #2]
 8003af4:	021b      	lsls	r3, r3, #8
 8003af6:	430b      	orrs	r3, r1
 8003af8:	4945      	ldr	r1, [pc, #276]	@ (8003c10 <MX_LWIP_Init+0x228>)
 8003afa:	78c9      	ldrb	r1, [r1, #3]
 8003afc:	430b      	orrs	r3, r1
 8003afe:	021b      	lsls	r3, r3, #8
 8003b00:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003b04:	431a      	orrs	r2, r3
 8003b06:	4b42      	ldr	r3, [pc, #264]	@ (8003c10 <MX_LWIP_Init+0x228>)
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	0619      	lsls	r1, r3, #24
 8003b0c:	4b40      	ldr	r3, [pc, #256]	@ (8003c10 <MX_LWIP_Init+0x228>)
 8003b0e:	785b      	ldrb	r3, [r3, #1]
 8003b10:	041b      	lsls	r3, r3, #16
 8003b12:	4319      	orrs	r1, r3
 8003b14:	4b3e      	ldr	r3, [pc, #248]	@ (8003c10 <MX_LWIP_Init+0x228>)
 8003b16:	789b      	ldrb	r3, [r3, #2]
 8003b18:	021b      	lsls	r3, r3, #8
 8003b1a:	430b      	orrs	r3, r1
 8003b1c:	493c      	ldr	r1, [pc, #240]	@ (8003c10 <MX_LWIP_Init+0x228>)
 8003b1e:	78c9      	ldrb	r1, [r1, #3]
 8003b20:	430b      	orrs	r3, r1
 8003b22:	0a1b      	lsrs	r3, r3, #8
 8003b24:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	4b39      	ldr	r3, [pc, #228]	@ (8003c10 <MX_LWIP_Init+0x228>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	0619      	lsls	r1, r3, #24
 8003b30:	4b37      	ldr	r3, [pc, #220]	@ (8003c10 <MX_LWIP_Init+0x228>)
 8003b32:	785b      	ldrb	r3, [r3, #1]
 8003b34:	041b      	lsls	r3, r3, #16
 8003b36:	4319      	orrs	r1, r3
 8003b38:	4b35      	ldr	r3, [pc, #212]	@ (8003c10 <MX_LWIP_Init+0x228>)
 8003b3a:	789b      	ldrb	r3, [r3, #2]
 8003b3c:	021b      	lsls	r3, r3, #8
 8003b3e:	430b      	orrs	r3, r1
 8003b40:	4933      	ldr	r1, [pc, #204]	@ (8003c10 <MX_LWIP_Init+0x228>)
 8003b42:	78c9      	ldrb	r1, [r1, #3]
 8003b44:	430b      	orrs	r3, r1
 8003b46:	0e1b      	lsrs	r3, r3, #24
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	4a34      	ldr	r2, [pc, #208]	@ (8003c1c <MX_LWIP_Init+0x234>)
 8003b4c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003b4e:	4b31      	ldr	r3, [pc, #196]	@ (8003c14 <MX_LWIP_Init+0x22c>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	061a      	lsls	r2, r3, #24
 8003b54:	4b2f      	ldr	r3, [pc, #188]	@ (8003c14 <MX_LWIP_Init+0x22c>)
 8003b56:	785b      	ldrb	r3, [r3, #1]
 8003b58:	041b      	lsls	r3, r3, #16
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	4b2d      	ldr	r3, [pc, #180]	@ (8003c14 <MX_LWIP_Init+0x22c>)
 8003b5e:	789b      	ldrb	r3, [r3, #2]
 8003b60:	021b      	lsls	r3, r3, #8
 8003b62:	4313      	orrs	r3, r2
 8003b64:	4a2b      	ldr	r2, [pc, #172]	@ (8003c14 <MX_LWIP_Init+0x22c>)
 8003b66:	78d2      	ldrb	r2, [r2, #3]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	061a      	lsls	r2, r3, #24
 8003b6c:	4b29      	ldr	r3, [pc, #164]	@ (8003c14 <MX_LWIP_Init+0x22c>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	0619      	lsls	r1, r3, #24
 8003b72:	4b28      	ldr	r3, [pc, #160]	@ (8003c14 <MX_LWIP_Init+0x22c>)
 8003b74:	785b      	ldrb	r3, [r3, #1]
 8003b76:	041b      	lsls	r3, r3, #16
 8003b78:	4319      	orrs	r1, r3
 8003b7a:	4b26      	ldr	r3, [pc, #152]	@ (8003c14 <MX_LWIP_Init+0x22c>)
 8003b7c:	789b      	ldrb	r3, [r3, #2]
 8003b7e:	021b      	lsls	r3, r3, #8
 8003b80:	430b      	orrs	r3, r1
 8003b82:	4924      	ldr	r1, [pc, #144]	@ (8003c14 <MX_LWIP_Init+0x22c>)
 8003b84:	78c9      	ldrb	r1, [r1, #3]
 8003b86:	430b      	orrs	r3, r1
 8003b88:	021b      	lsls	r3, r3, #8
 8003b8a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	4b20      	ldr	r3, [pc, #128]	@ (8003c14 <MX_LWIP_Init+0x22c>)
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	0619      	lsls	r1, r3, #24
 8003b96:	4b1f      	ldr	r3, [pc, #124]	@ (8003c14 <MX_LWIP_Init+0x22c>)
 8003b98:	785b      	ldrb	r3, [r3, #1]
 8003b9a:	041b      	lsls	r3, r3, #16
 8003b9c:	4319      	orrs	r1, r3
 8003b9e:	4b1d      	ldr	r3, [pc, #116]	@ (8003c14 <MX_LWIP_Init+0x22c>)
 8003ba0:	789b      	ldrb	r3, [r3, #2]
 8003ba2:	021b      	lsls	r3, r3, #8
 8003ba4:	430b      	orrs	r3, r1
 8003ba6:	491b      	ldr	r1, [pc, #108]	@ (8003c14 <MX_LWIP_Init+0x22c>)
 8003ba8:	78c9      	ldrb	r1, [r1, #3]
 8003baa:	430b      	orrs	r3, r1
 8003bac:	0a1b      	lsrs	r3, r3, #8
 8003bae:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	4b17      	ldr	r3, [pc, #92]	@ (8003c14 <MX_LWIP_Init+0x22c>)
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	0619      	lsls	r1, r3, #24
 8003bba:	4b16      	ldr	r3, [pc, #88]	@ (8003c14 <MX_LWIP_Init+0x22c>)
 8003bbc:	785b      	ldrb	r3, [r3, #1]
 8003bbe:	041b      	lsls	r3, r3, #16
 8003bc0:	4319      	orrs	r1, r3
 8003bc2:	4b14      	ldr	r3, [pc, #80]	@ (8003c14 <MX_LWIP_Init+0x22c>)
 8003bc4:	789b      	ldrb	r3, [r3, #2]
 8003bc6:	021b      	lsls	r3, r3, #8
 8003bc8:	430b      	orrs	r3, r1
 8003bca:	4912      	ldr	r1, [pc, #72]	@ (8003c14 <MX_LWIP_Init+0x22c>)
 8003bcc:	78c9      	ldrb	r1, [r1, #3]
 8003bce:	430b      	orrs	r3, r1
 8003bd0:	0e1b      	lsrs	r3, r3, #24
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	4a12      	ldr	r2, [pc, #72]	@ (8003c20 <MX_LWIP_Init+0x238>)
 8003bd6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003bd8:	4b12      	ldr	r3, [pc, #72]	@ (8003c24 <MX_LWIP_Init+0x23c>)
 8003bda:	9302      	str	r3, [sp, #8]
 8003bdc:	4b12      	ldr	r3, [pc, #72]	@ (8003c28 <MX_LWIP_Init+0x240>)
 8003bde:	9301      	str	r3, [sp, #4]
 8003be0:	2300      	movs	r3, #0
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	4b0e      	ldr	r3, [pc, #56]	@ (8003c20 <MX_LWIP_Init+0x238>)
 8003be6:	4a0d      	ldr	r2, [pc, #52]	@ (8003c1c <MX_LWIP_Init+0x234>)
 8003be8:	490b      	ldr	r1, [pc, #44]	@ (8003c18 <MX_LWIP_Init+0x230>)
 8003bea:	4810      	ldr	r0, [pc, #64]	@ (8003c2c <MX_LWIP_Init+0x244>)
 8003bec:	f000 fffa 	bl	8004be4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003bf0:	480e      	ldr	r0, [pc, #56]	@ (8003c2c <MX_LWIP_Init+0x244>)
 8003bf2:	f001 f8d9 	bl	8004da8 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8003bf6:	480d      	ldr	r0, [pc, #52]	@ (8003c2c <MX_LWIP_Init+0x244>)
 8003bf8:	f001 f8e4 	bl	8004dc4 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8003bfc:	490c      	ldr	r1, [pc, #48]	@ (8003c30 <MX_LWIP_Init+0x248>)
 8003bfe:	480b      	ldr	r0, [pc, #44]	@ (8003c2c <MX_LWIP_Init+0x244>)
 8003c00:	f001 f924 	bl	8004e4c <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003c04:	bf00      	nop
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	200005f8 	.word	0x200005f8
 8003c10:	200005fc 	.word	0x200005fc
 8003c14:	20000600 	.word	0x20000600
 8003c18:	200005ec 	.word	0x200005ec
 8003c1c:	200005f0 	.word	0x200005f0
 8003c20:	200005f4 	.word	0x200005f4
 8003c24:	0800d46d 	.word	0x0800d46d
 8003c28:	08004225 	.word	0x08004225
 8003c2c:	200005b8 	.word	0x200005b8
 8003c30:	08004291 	.word	0x08004291

08003c34 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8003c38:	4803      	ldr	r0, [pc, #12]	@ (8003c48 <MX_LWIP_Process+0x14>)
 8003c3a:	f000 fad3 	bl	80041e4 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8003c3e:	f007 f977 	bl	800af30 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8003c42:	bf00      	nop
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	200005b8 	.word	0x200005b8

08003c4c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b08e      	sub	sp, #56	@ 0x38
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]
 8003c5c:	605a      	str	r2, [r3, #4]
 8003c5e:	609a      	str	r2, [r3, #8]
 8003c60:	60da      	str	r2, [r3, #12]
 8003c62:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a59      	ldr	r2, [pc, #356]	@ (8003dd0 <HAL_ETH_MspInit+0x184>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	f040 80ac 	bne.w	8003dc8 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003c70:	2300      	movs	r3, #0
 8003c72:	623b      	str	r3, [r7, #32]
 8003c74:	4b57      	ldr	r3, [pc, #348]	@ (8003dd4 <HAL_ETH_MspInit+0x188>)
 8003c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c78:	4a56      	ldr	r2, [pc, #344]	@ (8003dd4 <HAL_ETH_MspInit+0x188>)
 8003c7a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003c7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c80:	4b54      	ldr	r3, [pc, #336]	@ (8003dd4 <HAL_ETH_MspInit+0x188>)
 8003c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c88:	623b      	str	r3, [r7, #32]
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	61fb      	str	r3, [r7, #28]
 8003c90:	4b50      	ldr	r3, [pc, #320]	@ (8003dd4 <HAL_ETH_MspInit+0x188>)
 8003c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c94:	4a4f      	ldr	r2, [pc, #316]	@ (8003dd4 <HAL_ETH_MspInit+0x188>)
 8003c96:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c9c:	4b4d      	ldr	r3, [pc, #308]	@ (8003dd4 <HAL_ETH_MspInit+0x188>)
 8003c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003ca4:	61fb      	str	r3, [r7, #28]
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	2300      	movs	r3, #0
 8003caa:	61bb      	str	r3, [r7, #24]
 8003cac:	4b49      	ldr	r3, [pc, #292]	@ (8003dd4 <HAL_ETH_MspInit+0x188>)
 8003cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb0:	4a48      	ldr	r2, [pc, #288]	@ (8003dd4 <HAL_ETH_MspInit+0x188>)
 8003cb2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003cb6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cb8:	4b46      	ldr	r3, [pc, #280]	@ (8003dd4 <HAL_ETH_MspInit+0x188>)
 8003cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003cc0:	61bb      	str	r3, [r7, #24]
 8003cc2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	617b      	str	r3, [r7, #20]
 8003cc8:	4b42      	ldr	r3, [pc, #264]	@ (8003dd4 <HAL_ETH_MspInit+0x188>)
 8003cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ccc:	4a41      	ldr	r2, [pc, #260]	@ (8003dd4 <HAL_ETH_MspInit+0x188>)
 8003cce:	f043 0304 	orr.w	r3, r3, #4
 8003cd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cd4:	4b3f      	ldr	r3, [pc, #252]	@ (8003dd4 <HAL_ETH_MspInit+0x188>)
 8003cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	617b      	str	r3, [r7, #20]
 8003cde:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	613b      	str	r3, [r7, #16]
 8003ce4:	4b3b      	ldr	r3, [pc, #236]	@ (8003dd4 <HAL_ETH_MspInit+0x188>)
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce8:	4a3a      	ldr	r2, [pc, #232]	@ (8003dd4 <HAL_ETH_MspInit+0x188>)
 8003cea:	f043 0301 	orr.w	r3, r3, #1
 8003cee:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cf0:	4b38      	ldr	r3, [pc, #224]	@ (8003dd4 <HAL_ETH_MspInit+0x188>)
 8003cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	613b      	str	r3, [r7, #16]
 8003cfa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	4b34      	ldr	r3, [pc, #208]	@ (8003dd4 <HAL_ETH_MspInit+0x188>)
 8003d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d04:	4a33      	ldr	r2, [pc, #204]	@ (8003dd4 <HAL_ETH_MspInit+0x188>)
 8003d06:	f043 0302 	orr.w	r3, r3, #2
 8003d0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d0c:	4b31      	ldr	r3, [pc, #196]	@ (8003dd4 <HAL_ETH_MspInit+0x188>)
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	60fb      	str	r3, [r7, #12]
 8003d16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003d18:	2300      	movs	r3, #0
 8003d1a:	60bb      	str	r3, [r7, #8]
 8003d1c:	4b2d      	ldr	r3, [pc, #180]	@ (8003dd4 <HAL_ETH_MspInit+0x188>)
 8003d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d20:	4a2c      	ldr	r2, [pc, #176]	@ (8003dd4 <HAL_ETH_MspInit+0x188>)
 8003d22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d26:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d28:	4b2a      	ldr	r3, [pc, #168]	@ (8003dd4 <HAL_ETH_MspInit+0x188>)
 8003d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d30:	60bb      	str	r3, [r7, #8]
 8003d32:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003d34:	2332      	movs	r3, #50	@ 0x32
 8003d36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d38:	2302      	movs	r3, #2
 8003d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d40:	2303      	movs	r3, #3
 8003d42:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003d44:	230b      	movs	r3, #11
 8003d46:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	4822      	ldr	r0, [pc, #136]	@ (8003dd8 <HAL_ETH_MspInit+0x18c>)
 8003d50:	f7fe fac2 	bl	80022d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003d54:	2386      	movs	r3, #134	@ 0x86
 8003d56:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d58:	2302      	movs	r3, #2
 8003d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d60:	2303      	movs	r3, #3
 8003d62:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003d64:	230b      	movs	r3, #11
 8003d66:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	481b      	ldr	r0, [pc, #108]	@ (8003ddc <HAL_ETH_MspInit+0x190>)
 8003d70:	f7fe fab2 	bl	80022d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003d74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003d78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d82:	2303      	movs	r3, #3
 8003d84:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003d86:	230b      	movs	r3, #11
 8003d88:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003d8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d8e:	4619      	mov	r1, r3
 8003d90:	4813      	ldr	r0, [pc, #76]	@ (8003de0 <HAL_ETH_MspInit+0x194>)
 8003d92:	f7fe faa1 	bl	80022d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003d96:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8003d9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da0:	2300      	movs	r3, #0
 8003da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003da4:	2303      	movs	r3, #3
 8003da6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003da8:	230b      	movs	r3, #11
 8003daa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003dac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003db0:	4619      	mov	r1, r3
 8003db2:	480c      	ldr	r0, [pc, #48]	@ (8003de4 <HAL_ETH_MspInit+0x198>)
 8003db4:	f7fe fa90 	bl	80022d8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8003db8:	2200      	movs	r2, #0
 8003dba:	2100      	movs	r1, #0
 8003dbc:	203d      	movs	r0, #61	@ 0x3d
 8003dbe:	f7fd f8de 	bl	8000f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8003dc2:	203d      	movs	r0, #61	@ 0x3d
 8003dc4:	f7fd f8f7 	bl	8000fb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003dc8:	bf00      	nop
 8003dca:	3738      	adds	r7, #56	@ 0x38
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	40028000 	.word	0x40028000
 8003dd4:	40023800 	.word	0x40023800
 8003dd8:	40020800 	.word	0x40020800
 8003ddc:	40020000 	.word	0x40020000
 8003de0:	40020400 	.word	0x40020400
 8003de4:	40021800 	.word	0x40021800

08003de8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003df0:	2300      	movs	r3, #0
 8003df2:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003df4:	4b4d      	ldr	r3, [pc, #308]	@ (8003f2c <low_level_init+0x144>)
 8003df6:	4a4e      	ldr	r2, [pc, #312]	@ (8003f30 <low_level_init+0x148>)
 8003df8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8003dfa:	4b4c      	ldr	r3, [pc, #304]	@ (8003f2c <low_level_init+0x144>)
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8003e00:	4b4a      	ldr	r3, [pc, #296]	@ (8003f2c <low_level_init+0x144>)
 8003e02:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003e06:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003e08:	4b48      	ldr	r3, [pc, #288]	@ (8003f2c <low_level_init+0x144>)
 8003e0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e0e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8003e10:	4b46      	ldr	r3, [pc, #280]	@ (8003f2c <low_level_init+0x144>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8003e16:	2300      	movs	r3, #0
 8003e18:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8003e1a:	2380      	movs	r3, #128	@ 0x80
 8003e1c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8003e1e:	23e1      	movs	r3, #225	@ 0xe1
 8003e20:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8003e22:	2300      	movs	r3, #0
 8003e24:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8003e26:	2300      	movs	r3, #0
 8003e28:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8003e2e:	4a3f      	ldr	r2, [pc, #252]	@ (8003f2c <low_level_init+0x144>)
 8003e30:	f107 0308 	add.w	r3, r7, #8
 8003e34:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8003e36:	4b3d      	ldr	r3, [pc, #244]	@ (8003f2c <low_level_init+0x144>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8003e3c:	4b3b      	ldr	r3, [pc, #236]	@ (8003f2c <low_level_init+0x144>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8003e42:	4b3a      	ldr	r3, [pc, #232]	@ (8003f2c <low_level_init+0x144>)
 8003e44:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003e48:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003e4a:	4838      	ldr	r0, [pc, #224]	@ (8003f2c <low_level_init+0x144>)
 8003e4c:	f7fd f8ce 	bl	8000fec <HAL_ETH_Init>
 8003e50:	4603      	mov	r3, r0
 8003e52:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8003e54:	7dfb      	ldrb	r3, [r7, #23]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d108      	bne.n	8003e6c <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8003e60:	f043 0304 	orr.w	r3, r3, #4
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8003e6c:	2304      	movs	r3, #4
 8003e6e:	4a31      	ldr	r2, [pc, #196]	@ (8003f34 <low_level_init+0x14c>)
 8003e70:	4931      	ldr	r1, [pc, #196]	@ (8003f38 <low_level_init+0x150>)
 8003e72:	482e      	ldr	r0, [pc, #184]	@ (8003f2c <low_level_init+0x144>)
 8003e74:	f7fd fa46 	bl	8001304 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003e78:	2304      	movs	r3, #4
 8003e7a:	4a30      	ldr	r2, [pc, #192]	@ (8003f3c <low_level_init+0x154>)
 8003e7c:	4930      	ldr	r1, [pc, #192]	@ (8003f40 <low_level_init+0x158>)
 8003e7e:	482b      	ldr	r0, [pc, #172]	@ (8003f2c <low_level_init+0x144>)
 8003e80:	f7fd faa7 	bl	80013d2 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2206      	movs	r2, #6
 8003e88:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003e8c:	4b27      	ldr	r3, [pc, #156]	@ (8003f2c <low_level_init+0x144>)
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	781a      	ldrb	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003e98:	4b24      	ldr	r3, [pc, #144]	@ (8003f2c <low_level_init+0x144>)
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	785a      	ldrb	r2, [r3, #1]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003ea4:	4b21      	ldr	r3, [pc, #132]	@ (8003f2c <low_level_init+0x144>)
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	789a      	ldrb	r2, [r3, #2]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003eb0:	4b1e      	ldr	r3, [pc, #120]	@ (8003f2c <low_level_init+0x144>)
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	78da      	ldrb	r2, [r3, #3]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8003f2c <low_level_init+0x144>)
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	791a      	ldrb	r2, [r3, #4]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003ec8:	4b18      	ldr	r3, [pc, #96]	@ (8003f2c <low_level_init+0x144>)
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	795a      	ldrb	r2, [r3, #5]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

  /* maximum transfer unit */
  netif->mtu = 1500;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003eda:	84da      	strh	r2, [r3, #38]	@ 0x26

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8003ee2:	f043 030a 	orr.w	r3, r3, #10
 8003ee6:	b2da      	uxtb	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8003eee:	480f      	ldr	r0, [pc, #60]	@ (8003f2c <low_level_init+0x144>)
 8003ef0:	f7fd fd92 	bl	8001a18 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8003ef4:	f107 0310 	add.w	r3, r7, #16
 8003ef8:	461a      	mov	r2, r3
 8003efa:	211d      	movs	r1, #29
 8003efc:	480b      	ldr	r0, [pc, #44]	@ (8003f2c <low_level_init+0x144>)
 8003efe:	f7fd fcbd 	bl	800187c <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	f043 030b 	orr.w	r3, r3, #11
 8003f08:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	211d      	movs	r1, #29
 8003f10:	4806      	ldr	r0, [pc, #24]	@ (8003f2c <low_level_init+0x144>)
 8003f12:	f7fd fd1b 	bl	800194c <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8003f16:	f107 0310 	add.w	r3, r7, #16
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	211d      	movs	r1, #29
 8003f1e:	4803      	ldr	r0, [pc, #12]	@ (8003f2c <low_level_init+0x144>)
 8003f20:	f7fd fcac 	bl	800187c <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003f24:	bf00      	nop
 8003f26:	3718      	adds	r7, #24
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	200036a4 	.word	0x200036a4
 8003f30:	40028000 	.word	0x40028000
 8003f34:	20001ed4 	.word	0x20001ed4
 8003f38:	20000684 	.word	0x20000684
 8003f3c:	20000704 	.word	0x20000704
 8003f40:	20000604 	.word	0x20000604

08003f44 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b08a      	sub	sp, #40	@ 0x28
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8003f4e:	4b4b      	ldr	r3, [pc, #300]	@ (800407c <low_level_output+0x138>)
 8003f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8003f56:	2300      	movs	r3, #0
 8003f58:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8003f62:	2300      	movs	r3, #0
 8003f64:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8003f66:	4b45      	ldr	r3, [pc, #276]	@ (800407c <low_level_output+0x138>)
 8003f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f6a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	623b      	str	r3, [r7, #32]
 8003f74:	e05a      	b.n	800402c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	da03      	bge.n	8003f86 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8003f7e:	23f8      	movs	r3, #248	@ 0xf8
 8003f80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
 8003f84:	e05c      	b.n	8004040 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	895b      	ldrh	r3, [r3, #10]
 8003f8a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003f90:	e02f      	b.n	8003ff2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8003f92:	69fa      	ldr	r2, [r7, #28]
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	18d0      	adds	r0, r2, r3
 8003f98:	6a3b      	ldr	r3, [r7, #32]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	18d1      	adds	r1, r2, r3
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	f5c3 63be 	rsb	r3, r3, #1520	@ 0x5f0
 8003fa6:	3304      	adds	r3, #4
 8003fa8:	461a      	mov	r2, r3
 8003faa:	f009 fcda 	bl	800d962 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	da03      	bge.n	8003fc4 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8003fbc:	23f8      	movs	r3, #248	@ 0xf8
 8003fbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
 8003fc2:	e03d      	b.n	8004040 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	4413      	add	r3, r2
 8003fd0:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 8003fd4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8003fe0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8003fec:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d8c8      	bhi.n	8003f92 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004000:	69fa      	ldr	r2, [r7, #28]
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	18d0      	adds	r0, r2, r3
 8004006:	6a3b      	ldr	r3, [r7, #32]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	4413      	add	r3, r2
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	4619      	mov	r1, r3
 8004012:	f009 fca6 	bl	800d962 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4413      	add	r3, r2
 800401c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4413      	add	r3, r2
 8004024:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8004026:	6a3b      	ldr	r3, [r7, #32]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	623b      	str	r3, [r7, #32]
 800402c:	6a3b      	ldr	r3, [r7, #32]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1a1      	bne.n	8003f76 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8004032:	6979      	ldr	r1, [r7, #20]
 8004034:	4811      	ldr	r0, [pc, #68]	@ (800407c <low_level_output+0x138>)
 8004036:	f7fd fa37 	bl	80014a8 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800403a:	2300      	movs	r3, #0
 800403c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004040:	4b0e      	ldr	r3, [pc, #56]	@ (800407c <low_level_output+0x138>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	f003 0320 	and.w	r3, r3, #32
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00d      	beq.n	800406e <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004052:	4b0a      	ldr	r3, [pc, #40]	@ (800407c <low_level_output+0x138>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800405a:	461a      	mov	r2, r3
 800405c:	2320      	movs	r3, #32
 800405e:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8004060:	4b06      	ldr	r3, [pc, #24]	@ (800407c <low_level_output+0x138>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004068:	461a      	mov	r2, r3
 800406a:	2300      	movs	r3, #0
 800406c:	6053      	str	r3, [r2, #4]
  }
  return errval;
 800406e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8004072:	4618      	mov	r0, r3
 8004074:	3728      	adds	r7, #40	@ 0x28
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	200036a4 	.word	0x200036a4

08004080 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b08c      	sub	sp, #48	@ 0x30
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004088:	2300      	movs	r3, #0
 800408a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct pbuf *q = NULL;
 800408c:	2300      	movs	r3, #0
 800408e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint16_t len = 0;
 8004090:	2300      	movs	r3, #0
 8004092:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8004094:	2300      	movs	r3, #0
 8004096:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8004098:	2300      	movs	r3, #0
 800409a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800409c:	2300      	movs	r3, #0
 800409e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80040a0:	2300      	movs	r3, #0
 80040a2:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80040a4:	484e      	ldr	r0, [pc, #312]	@ (80041e0 <low_level_input+0x160>)
 80040a6:	f7fd fae7 	bl	8001678 <HAL_ETH_GetReceivedFrame>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <low_level_input+0x34>

    return NULL;
 80040b0:	2300      	movs	r3, #0
 80040b2:	e090      	b.n	80041d6 <low_level_input+0x156>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80040b4:	4b4a      	ldr	r3, [pc, #296]	@ (80041e0 <low_level_input+0x160>)
 80040b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b8:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80040ba:	4b49      	ldr	r3, [pc, #292]	@ (80041e0 <low_level_input+0x160>)
 80040bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040be:	627b      	str	r3, [r7, #36]	@ 0x24

  if (len > 0)
 80040c0:	89fb      	ldrh	r3, [r7, #14]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d006      	beq.n	80040d4 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80040c6:	89fb      	ldrh	r3, [r7, #14]
 80040c8:	2203      	movs	r2, #3
 80040ca:	4619      	mov	r1, r3
 80040cc:	2004      	movs	r0, #4
 80040ce:	f000 fefd 	bl	8004ecc <pbuf_alloc>
 80040d2:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  if (p != NULL)
 80040d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d04b      	beq.n	8004172 <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80040da:	4b41      	ldr	r3, [pc, #260]	@ (80041e0 <low_level_input+0x160>)
 80040dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040de:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80040e0:	2300      	movs	r3, #0
 80040e2:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80040e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040e8:	e040      	b.n	800416c <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 80040ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ec:	895b      	ldrh	r3, [r3, #10]
 80040ee:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80040f0:	2300      	movs	r3, #0
 80040f2:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80040f4:	e021      	b.n	800413a <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80040f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	18d0      	adds	r0, r2, r3
 80040fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	18d1      	adds	r1, r2, r3
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	f5c3 63be 	rsb	r3, r3, #1520	@ 0x5f0
 800410a:	3304      	adds	r3, #4
 800410c:	461a      	mov	r2, r3
 800410e:	f009 fc28 	bl	800d962 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004112:	6a3b      	ldr	r3, [r7, #32]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8004118:	6a3b      	ldr	r3, [r7, #32]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	627b      	str	r3, [r7, #36]	@ 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800411e:	69fa      	ldr	r2, [r7, #28]
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	4413      	add	r3, r2
 8004124:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 8004128:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8004134:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8004136:	2300      	movs	r3, #0
 8004138:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	4413      	add	r3, r2
 8004140:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8004144:	4293      	cmp	r3, r2
 8004146:	d8d6      	bhi.n	80040f6 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8004148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	18d0      	adds	r0, r2, r3
 8004150:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	4413      	add	r3, r2
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	4619      	mov	r1, r3
 800415a:	f009 fc02 	bl	800d962 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800415e:	69fa      	ldr	r2, [r7, #28]
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	4413      	add	r3, r2
 8004164:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800416c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1bb      	bne.n	80040ea <low_level_input+0x6a>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004172:	4b1b      	ldr	r3, [pc, #108]	@ (80041e0 <low_level_input+0x160>)
 8004174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004176:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004178:	2300      	movs	r3, #0
 800417a:	613b      	str	r3, [r7, #16]
 800417c:	e00b      	b.n	8004196 <low_level_input+0x116>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800417e:	6a3b      	ldr	r3, [r7, #32]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004186:	6a3b      	ldr	r3, [r7, #32]
 8004188:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800418a:	6a3b      	ldr	r3, [r7, #32]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	3301      	adds	r3, #1
 8004194:	613b      	str	r3, [r7, #16]
 8004196:	4b12      	ldr	r3, [pc, #72]	@ (80041e0 <low_level_input+0x160>)
 8004198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	429a      	cmp	r2, r3
 800419e:	d3ee      	bcc.n	800417e <low_level_input+0xfe>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80041a0:	4b0f      	ldr	r3, [pc, #60]	@ (80041e0 <low_level_input+0x160>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80041a6:	4b0e      	ldr	r3, [pc, #56]	@ (80041e0 <low_level_input+0x160>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00d      	beq.n	80041d4 <low_level_input+0x154>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80041b8:	4b09      	ldr	r3, [pc, #36]	@ (80041e0 <low_level_input+0x160>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041c0:	461a      	mov	r2, r3
 80041c2:	2380      	movs	r3, #128	@ 0x80
 80041c4:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80041c6:	4b06      	ldr	r3, [pc, #24]	@ (80041e0 <low_level_input+0x160>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041ce:	461a      	mov	r2, r3
 80041d0:	2300      	movs	r3, #0
 80041d2:	6093      	str	r3, [r2, #8]
  }
  return p;
 80041d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3730      	adds	r7, #48	@ 0x30
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	200036a4 	.word	0x200036a4

080041e4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f7ff ff47 	bl	8004080 <low_level_input>
 80041f2:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d010      	beq.n	800421c <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	6879      	ldr	r1, [r7, #4]
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	4798      	blx	r3
 8004204:	4603      	mov	r3, r0
 8004206:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8004208:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d006      	beq.n	800421e <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f001 f9d3 	bl	80055bc <pbuf_free>
    p = NULL;
 8004216:	2300      	movs	r3, #0
 8004218:	60fb      	str	r3, [r7, #12]
 800421a:	e000      	b.n	800421e <ethernetif_input+0x3a>
  if (p == NULL) return;
 800421c:	bf00      	nop
  }
}
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d106      	bne.n	8004240 <ethernetif_init+0x1c>
 8004232:	4b0e      	ldr	r3, [pc, #56]	@ (800426c <ethernetif_init+0x48>)
 8004234:	f240 221a 	movw	r2, #538	@ 0x21a
 8004238:	490d      	ldr	r1, [pc, #52]	@ (8004270 <ethernetif_init+0x4c>)
 800423a:	480e      	ldr	r0, [pc, #56]	@ (8004274 <ethernetif_init+0x50>)
 800423c:	f009 fab6 	bl	800d7ac <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2273      	movs	r2, #115	@ 0x73
 8004244:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->name[1] = IFNAME1;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2274      	movs	r2, #116	@ 0x74
 800424c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a09      	ldr	r2, [pc, #36]	@ (8004278 <ethernetif_init+0x54>)
 8004254:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a08      	ldr	r2, [pc, #32]	@ (800427c <ethernetif_init+0x58>)
 800425a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f7ff fdc3 	bl	8003de8 <low_level_init>

  return ERR_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3708      	adds	r7, #8
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	0800e4e4 	.word	0x0800e4e4
 8004270:	0800e500 	.word	0x0800e500
 8004274:	0800e510 	.word	0x0800e510
 8004278:	0800ba59 	.word	0x0800ba59
 800427c:	08003f45 	.word	0x08003f45

08004280 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004284:	f7fc fd76 	bl	8000d74 <HAL_GetTick>
 8004288:	4603      	mov	r3, r0
}
 800428a:	4618      	mov	r0, r3
 800428c:	bd80      	pop	{r7, pc}
	...

08004290 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8004298:	2300      	movs	r3, #0
 800429a:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800429c:	2300      	movs	r3, #0
 800429e:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80042a6:	089b      	lsrs	r3, r3, #2
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d05d      	beq.n	800436e <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80042b2:	4b34      	ldr	r3, [pc, #208]	@ (8004384 <ethernetif_update_config+0xf4>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d03f      	beq.n	800433a <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80042ba:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80042be:	2100      	movs	r1, #0
 80042c0:	4830      	ldr	r0, [pc, #192]	@ (8004384 <ethernetif_update_config+0xf4>)
 80042c2:	f7fd fb43 	bl	800194c <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80042c6:	f7fc fd55 	bl	8000d74 <HAL_GetTick>
 80042ca:	4603      	mov	r3, r0
 80042cc:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80042ce:	f107 0308 	add.w	r3, r7, #8
 80042d2:	461a      	mov	r2, r3
 80042d4:	2101      	movs	r1, #1
 80042d6:	482b      	ldr	r0, [pc, #172]	@ (8004384 <ethernetif_update_config+0xf4>)
 80042d8:	f7fd fad0 	bl	800187c <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80042dc:	f7fc fd4a 	bl	8000d74 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80042ea:	d828      	bhi.n	800433e <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	f003 0320 	and.w	r3, r3, #32
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d0eb      	beq.n	80042ce <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80042f6:	f107 0308 	add.w	r3, r7, #8
 80042fa:	461a      	mov	r2, r3
 80042fc:	2110      	movs	r1, #16
 80042fe:	4821      	ldr	r0, [pc, #132]	@ (8004384 <ethernetif_update_config+0xf4>)
 8004300:	f7fd fabc 	bl	800187c <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	f003 0304 	and.w	r3, r3, #4
 800430a:	2b00      	cmp	r3, #0
 800430c:	d004      	beq.n	8004318 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800430e:	4b1d      	ldr	r3, [pc, #116]	@ (8004384 <ethernetif_update_config+0xf4>)
 8004310:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004314:	60da      	str	r2, [r3, #12]
 8004316:	e002      	b.n	800431e <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8004318:	4b1a      	ldr	r3, [pc, #104]	@ (8004384 <ethernetif_update_config+0xf4>)
 800431a:	2200      	movs	r2, #0
 800431c:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d003      	beq.n	8004330 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8004328:	4b16      	ldr	r3, [pc, #88]	@ (8004384 <ethernetif_update_config+0xf4>)
 800432a:	2200      	movs	r2, #0
 800432c:	609a      	str	r2, [r3, #8]
 800432e:	e016      	b.n	800435e <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8004330:	4b14      	ldr	r3, [pc, #80]	@ (8004384 <ethernetif_update_config+0xf4>)
 8004332:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004336:	609a      	str	r2, [r3, #8]
 8004338:	e011      	b.n	800435e <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800433a:	bf00      	nop
 800433c:	e000      	b.n	8004340 <ethernetif_update_config+0xb0>
          goto error;
 800433e:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004340:	4b10      	ldr	r3, [pc, #64]	@ (8004384 <ethernetif_update_config+0xf4>)
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	08db      	lsrs	r3, r3, #3
 8004346:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8004348:	4b0e      	ldr	r3, [pc, #56]	@ (8004384 <ethernetif_update_config+0xf4>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	085b      	lsrs	r3, r3, #1
 800434e:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004350:	4313      	orrs	r3, r2
 8004352:	b29b      	uxth	r3, r3
 8004354:	461a      	mov	r2, r3
 8004356:	2100      	movs	r1, #0
 8004358:	480a      	ldr	r0, [pc, #40]	@ (8004384 <ethernetif_update_config+0xf4>)
 800435a:	f7fd faf7 	bl	800194c <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800435e:	2100      	movs	r1, #0
 8004360:	4808      	ldr	r0, [pc, #32]	@ (8004384 <ethernetif_update_config+0xf4>)
 8004362:	f7fd fbb7 	bl	8001ad4 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8004366:	4807      	ldr	r0, [pc, #28]	@ (8004384 <ethernetif_update_config+0xf4>)
 8004368:	f7fd fb56 	bl	8001a18 <HAL_ETH_Start>
 800436c:	e002      	b.n	8004374 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800436e:	4805      	ldr	r0, [pc, #20]	@ (8004384 <ethernetif_update_config+0xf4>)
 8004370:	f7fd fb81 	bl	8001a76 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 f807 	bl	8004388 <ethernetif_notify_conn_changed>
}
 800437a:	bf00      	nop
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	200036a4 	.word	0x200036a4

08004388 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	bc80      	pop	{r7}
 8004398:	4770      	bx	lr

0800439a <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	4603      	mov	r3, r0
 80043a2:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 80043a4:	88fb      	ldrh	r3, [r7, #6]
 80043a6:	ba5b      	rev16	r3, r3
 80043a8:	b29b      	uxth	r3, r3
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bc80      	pop	{r7}
 80043b2:	4770      	bx	lr

080043b4 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	061a      	lsls	r2, r3, #24
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	021b      	lsls	r3, r3, #8
 80043c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80043c8:	431a      	orrs	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	0a1b      	lsrs	r3, r3, #8
 80043ce:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80043d2:	431a      	orrs	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	0e1b      	lsrs	r3, r3, #24
 80043d8:	4313      	orrs	r3, r2
}
 80043da:	4618      	mov	r0, r3
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	bc80      	pop	{r7}
 80043e2:	4770      	bx	lr

080043e4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80043ea:	2300      	movs	r3, #0
 80043ec:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80043ee:	f000 f8a7 	bl	8004540 <mem_init>
  memp_init();
 80043f2:	f000 fb37 	bl	8004a64 <memp_init>
  pbuf_init();
  netif_init();
 80043f6:	f000 fbef 	bl	8004bd8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80043fa:	f006 fdeb 	bl	800afd4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80043fe:	f001 fb45 	bl	8005a8c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8004402:	f006 fcc9 	bl	800ad98 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004406:	bf00      	nop
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
	...

08004410 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004418:	4b40      	ldr	r3, [pc, #256]	@ (800451c <plug_holes+0x10c>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	429a      	cmp	r2, r3
 8004420:	d206      	bcs.n	8004430 <plug_holes+0x20>
 8004422:	4b3f      	ldr	r3, [pc, #252]	@ (8004520 <plug_holes+0x110>)
 8004424:	f240 125d 	movw	r2, #349	@ 0x15d
 8004428:	493e      	ldr	r1, [pc, #248]	@ (8004524 <plug_holes+0x114>)
 800442a:	483f      	ldr	r0, [pc, #252]	@ (8004528 <plug_holes+0x118>)
 800442c:	f009 f9be 	bl	800d7ac <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004430:	4b3e      	ldr	r3, [pc, #248]	@ (800452c <plug_holes+0x11c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	429a      	cmp	r2, r3
 8004438:	d306      	bcc.n	8004448 <plug_holes+0x38>
 800443a:	4b39      	ldr	r3, [pc, #228]	@ (8004520 <plug_holes+0x110>)
 800443c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8004440:	493b      	ldr	r1, [pc, #236]	@ (8004530 <plug_holes+0x120>)
 8004442:	4839      	ldr	r0, [pc, #228]	@ (8004528 <plug_holes+0x118>)
 8004444:	f009 f9b2 	bl	800d7ac <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	791b      	ldrb	r3, [r3, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d006      	beq.n	800445e <plug_holes+0x4e>
 8004450:	4b33      	ldr	r3, [pc, #204]	@ (8004520 <plug_holes+0x110>)
 8004452:	f240 125f 	movw	r2, #351	@ 0x15f
 8004456:	4937      	ldr	r1, [pc, #220]	@ (8004534 <plug_holes+0x124>)
 8004458:	4833      	ldr	r0, [pc, #204]	@ (8004528 <plug_holes+0x118>)
 800445a:	f009 f9a7 	bl	800d7ac <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	881b      	ldrh	r3, [r3, #0]
 8004462:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004466:	d906      	bls.n	8004476 <plug_holes+0x66>
 8004468:	4b2d      	ldr	r3, [pc, #180]	@ (8004520 <plug_holes+0x110>)
 800446a:	f44f 72b1 	mov.w	r2, #354	@ 0x162
 800446e:	4932      	ldr	r1, [pc, #200]	@ (8004538 <plug_holes+0x128>)
 8004470:	482d      	ldr	r0, [pc, #180]	@ (8004528 <plug_holes+0x118>)
 8004472:	f009 f99b 	bl	800d7ac <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8004476:	4b29      	ldr	r3, [pc, #164]	@ (800451c <plug_holes+0x10c>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	8812      	ldrh	r2, [r2, #0]
 800447e:	4413      	add	r3, r2
 8004480:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	429a      	cmp	r2, r3
 8004488:	d01f      	beq.n	80044ca <plug_holes+0xba>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	791b      	ldrb	r3, [r3, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d11b      	bne.n	80044ca <plug_holes+0xba>
 8004492:	4b26      	ldr	r3, [pc, #152]	@ (800452c <plug_holes+0x11c>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	429a      	cmp	r2, r3
 800449a:	d016      	beq.n	80044ca <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800449c:	4b27      	ldr	r3, [pc, #156]	@ (800453c <plug_holes+0x12c>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d102      	bne.n	80044ac <plug_holes+0x9c>
      lfree = mem;
 80044a6:	4a25      	ldr	r2, [pc, #148]	@ (800453c <plug_holes+0x12c>)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	881a      	ldrh	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 80044b4:	4b19      	ldr	r3, [pc, #100]	@ (800451c <plug_holes+0x10c>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	1ad1      	subs	r1, r2, r3
 80044bc:	4b17      	ldr	r3, [pc, #92]	@ (800451c <plug_holes+0x10c>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	8812      	ldrh	r2, [r2, #0]
 80044c4:	4413      	add	r3, r2
 80044c6:	b28a      	uxth	r2, r1
 80044c8:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 80044ca:	4b14      	ldr	r3, [pc, #80]	@ (800451c <plug_holes+0x10c>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	8852      	ldrh	r2, [r2, #2]
 80044d2:	4413      	add	r3, r2
 80044d4:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d01a      	beq.n	8004514 <plug_holes+0x104>
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	791b      	ldrb	r3, [r3, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d116      	bne.n	8004514 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80044e6:	4b15      	ldr	r3, [pc, #84]	@ (800453c <plug_holes+0x12c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d102      	bne.n	80044f6 <plug_holes+0xe6>
      lfree = pmem;
 80044f0:	4a12      	ldr	r2, [pc, #72]	@ (800453c <plug_holes+0x12c>)
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	881a      	ldrh	r2, [r3, #0]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 80044fe:	4b07      	ldr	r3, [pc, #28]	@ (800451c <plug_holes+0x10c>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	1ad1      	subs	r1, r2, r3
 8004506:	4b05      	ldr	r3, [pc, #20]	@ (800451c <plug_holes+0x10c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	8812      	ldrh	r2, [r2, #0]
 800450e:	4413      	add	r3, r2
 8004510:	b28a      	uxth	r2, r1
 8004512:	805a      	strh	r2, [r3, #2]
  }
}
 8004514:	bf00      	nop
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	20003d58 	.word	0x20003d58
 8004520:	0800e538 	.word	0x0800e538
 8004524:	0800e568 	.word	0x0800e568
 8004528:	0800e580 	.word	0x0800e580
 800452c:	20003d5c 	.word	0x20003d5c
 8004530:	0800e5a8 	.word	0x0800e5a8
 8004534:	0800e5c4 	.word	0x0800e5c4
 8004538:	0800e5e0 	.word	0x0800e5e0
 800453c:	20003d60 	.word	0x20003d60

08004540 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004546:	4b18      	ldr	r3, [pc, #96]	@ (80045a8 <mem_init+0x68>)
 8004548:	3303      	adds	r3, #3
 800454a:	f023 0303 	bic.w	r3, r3, #3
 800454e:	461a      	mov	r2, r3
 8004550:	4b16      	ldr	r3, [pc, #88]	@ (80045ac <mem_init+0x6c>)
 8004552:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004554:	4b15      	ldr	r3, [pc, #84]	@ (80045ac <mem_init+0x6c>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8004560:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800456e:	4b0f      	ldr	r3, [pc, #60]	@ (80045ac <mem_init+0x6c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 8004576:	4a0e      	ldr	r2, [pc, #56]	@ (80045b0 <mem_init+0x70>)
 8004578:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800457a:	4b0d      	ldr	r3, [pc, #52]	@ (80045b0 <mem_init+0x70>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2201      	movs	r2, #1
 8004580:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004582:	4b0b      	ldr	r3, [pc, #44]	@ (80045b0 <mem_init+0x70>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800458a:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800458c:	4b08      	ldr	r3, [pc, #32]	@ (80045b0 <mem_init+0x70>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8004594:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004596:	4b05      	ldr	r3, [pc, #20]	@ (80045ac <mem_init+0x6c>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a06      	ldr	r2, [pc, #24]	@ (80045b4 <mem_init+0x74>)
 800459c:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800459e:	bf00      	nop
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bc80      	pop	{r7}
 80045a6:	4770      	bx	lr
 80045a8:	20003704 	.word	0x20003704
 80045ac:	20003d58 	.word	0x20003d58
 80045b0:	20003d5c 	.word	0x20003d5c
 80045b4:	20003d60 	.word	0x20003d60

080045b8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d043      	beq.n	800464e <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f003 0303 	and.w	r3, r3, #3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d006      	beq.n	80045de <mem_free+0x26>
 80045d0:	4b22      	ldr	r3, [pc, #136]	@ (800465c <mem_free+0xa4>)
 80045d2:	f44f 72d6 	mov.w	r2, #428	@ 0x1ac
 80045d6:	4922      	ldr	r1, [pc, #136]	@ (8004660 <mem_free+0xa8>)
 80045d8:	4822      	ldr	r0, [pc, #136]	@ (8004664 <mem_free+0xac>)
 80045da:	f009 f8e7 	bl	800d7ac <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80045de:	4b22      	ldr	r3, [pc, #136]	@ (8004668 <mem_free+0xb0>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d304      	bcc.n	80045f2 <mem_free+0x3a>
 80045e8:	4b20      	ldr	r3, [pc, #128]	@ (800466c <mem_free+0xb4>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d306      	bcc.n	8004600 <mem_free+0x48>
 80045f2:	4b1a      	ldr	r3, [pc, #104]	@ (800465c <mem_free+0xa4>)
 80045f4:	f44f 72d7 	mov.w	r2, #430	@ 0x1ae
 80045f8:	491d      	ldr	r1, [pc, #116]	@ (8004670 <mem_free+0xb8>)
 80045fa:	481a      	ldr	r0, [pc, #104]	@ (8004664 <mem_free+0xac>)
 80045fc:	f009 f8d6 	bl	800d7ac <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004600:	4b19      	ldr	r3, [pc, #100]	@ (8004668 <mem_free+0xb0>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	429a      	cmp	r2, r3
 8004608:	d323      	bcc.n	8004652 <mem_free+0x9a>
 800460a:	4b18      	ldr	r3, [pc, #96]	@ (800466c <mem_free+0xb4>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	429a      	cmp	r2, r3
 8004612:	d21e      	bcs.n	8004652 <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	3b08      	subs	r3, #8
 8004618:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	791b      	ldrb	r3, [r3, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d106      	bne.n	8004630 <mem_free+0x78>
 8004622:	4b0e      	ldr	r3, [pc, #56]	@ (800465c <mem_free+0xa4>)
 8004624:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
 8004628:	4912      	ldr	r1, [pc, #72]	@ (8004674 <mem_free+0xbc>)
 800462a:	480e      	ldr	r0, [pc, #56]	@ (8004664 <mem_free+0xac>)
 800462c:	f009 f8be 	bl	800d7ac <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004636:	4b10      	ldr	r3, [pc, #64]	@ (8004678 <mem_free+0xc0>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	429a      	cmp	r2, r3
 800463e:	d202      	bcs.n	8004646 <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004640:	4a0d      	ldr	r2, [pc, #52]	@ (8004678 <mem_free+0xc0>)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f7ff fee2 	bl	8004410 <plug_holes>
 800464c:	e002      	b.n	8004654 <mem_free+0x9c>
    return;
 800464e:	bf00      	nop
 8004650:	e000      	b.n	8004654 <mem_free+0x9c>
    return;
 8004652:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	0800e538 	.word	0x0800e538
 8004660:	0800e60c 	.word	0x0800e60c
 8004664:	0800e580 	.word	0x0800e580
 8004668:	20003d58 	.word	0x20003d58
 800466c:	20003d5c 	.word	0x20003d5c
 8004670:	0800e630 	.word	0x0800e630
 8004674:	0800e648 	.word	0x0800e648
 8004678:	20003d60 	.word	0x20003d60

0800467c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	460b      	mov	r3, r1
 8004686:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8004688:	887b      	ldrh	r3, [r7, #2]
 800468a:	3303      	adds	r3, #3
 800468c:	b29b      	uxth	r3, r3
 800468e:	f023 0303 	bic.w	r3, r3, #3
 8004692:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 8004694:	887b      	ldrh	r3, [r7, #2]
 8004696:	2b0b      	cmp	r3, #11
 8004698:	d801      	bhi.n	800469e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800469a:	230c      	movs	r3, #12
 800469c:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800469e:	887b      	ldrh	r3, [r7, #2]
 80046a0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80046a4:	d901      	bls.n	80046aa <mem_trim+0x2e>
    return NULL;
 80046a6:	2300      	movs	r3, #0
 80046a8:	e0b1      	b.n	800480e <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80046aa:	4b5b      	ldr	r3, [pc, #364]	@ (8004818 <mem_trim+0x19c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d304      	bcc.n	80046be <mem_trim+0x42>
 80046b4:	4b59      	ldr	r3, [pc, #356]	@ (800481c <mem_trim+0x1a0>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d306      	bcc.n	80046cc <mem_trim+0x50>
 80046be:	4b58      	ldr	r3, [pc, #352]	@ (8004820 <mem_trim+0x1a4>)
 80046c0:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80046c4:	4957      	ldr	r1, [pc, #348]	@ (8004824 <mem_trim+0x1a8>)
 80046c6:	4858      	ldr	r0, [pc, #352]	@ (8004828 <mem_trim+0x1ac>)
 80046c8:	f009 f870 	bl	800d7ac <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80046cc:	4b52      	ldr	r3, [pc, #328]	@ (8004818 <mem_trim+0x19c>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d304      	bcc.n	80046e0 <mem_trim+0x64>
 80046d6:	4b51      	ldr	r3, [pc, #324]	@ (800481c <mem_trim+0x1a0>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d301      	bcc.n	80046e4 <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	e094      	b.n	800480e <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	3b08      	subs	r3, #8
 80046e8:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 80046ea:	4b4b      	ldr	r3, [pc, #300]	@ (8004818 <mem_trim+0x19c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	881a      	ldrh	r2, [r3, #0]
 80046f8:	8a7b      	ldrh	r3, [r7, #18]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	3b08      	subs	r3, #8
 8004700:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004702:	887a      	ldrh	r2, [r7, #2]
 8004704:	8a3b      	ldrh	r3, [r7, #16]
 8004706:	429a      	cmp	r2, r3
 8004708:	d906      	bls.n	8004718 <mem_trim+0x9c>
 800470a:	4b45      	ldr	r3, [pc, #276]	@ (8004820 <mem_trim+0x1a4>)
 800470c:	f240 2206 	movw	r2, #518	@ 0x206
 8004710:	4946      	ldr	r1, [pc, #280]	@ (800482c <mem_trim+0x1b0>)
 8004712:	4845      	ldr	r0, [pc, #276]	@ (8004828 <mem_trim+0x1ac>)
 8004714:	f009 f84a 	bl	800d7ac <iprintf>
  if (newsize > size) {
 8004718:	887a      	ldrh	r2, [r7, #2]
 800471a:	8a3b      	ldrh	r3, [r7, #16]
 800471c:	429a      	cmp	r2, r3
 800471e:	d901      	bls.n	8004724 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 8004720:	2300      	movs	r3, #0
 8004722:	e074      	b.n	800480e <mem_trim+0x192>
  }
  if (newsize == size) {
 8004724:	887a      	ldrh	r2, [r7, #2]
 8004726:	8a3b      	ldrh	r3, [r7, #16]
 8004728:	429a      	cmp	r2, r3
 800472a:	d101      	bne.n	8004730 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	e06e      	b.n	800480e <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8004730:	4b39      	ldr	r3, [pc, #228]	@ (8004818 <mem_trim+0x19c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	8812      	ldrh	r2, [r2, #0]
 8004738:	4413      	add	r3, r2
 800473a:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	791b      	ldrb	r3, [r3, #4]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d131      	bne.n	80047a8 <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	881b      	ldrh	r3, [r3, #0]
 8004748:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800474a:	8a7a      	ldrh	r2, [r7, #18]
 800474c:	887b      	ldrh	r3, [r7, #2]
 800474e:	4413      	add	r3, r2
 8004750:	b29b      	uxth	r3, r3
 8004752:	3308      	adds	r3, #8
 8004754:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 8004756:	4b36      	ldr	r3, [pc, #216]	@ (8004830 <mem_trim+0x1b4>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	429a      	cmp	r2, r3
 800475e:	d105      	bne.n	800476c <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8004760:	4b2d      	ldr	r3, [pc, #180]	@ (8004818 <mem_trim+0x19c>)
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	897b      	ldrh	r3, [r7, #10]
 8004766:	4413      	add	r3, r2
 8004768:	4a31      	ldr	r2, [pc, #196]	@ (8004830 <mem_trim+0x1b4>)
 800476a:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800476c:	4b2a      	ldr	r3, [pc, #168]	@ (8004818 <mem_trim+0x19c>)
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	897b      	ldrh	r3, [r7, #10]
 8004772:	4413      	add	r3, r2
 8004774:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	893a      	ldrh	r2, [r7, #8]
 8004780:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	8a7a      	ldrh	r2, [r7, #18]
 8004786:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	897a      	ldrh	r2, [r7, #10]
 800478c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	881b      	ldrh	r3, [r3, #0]
 8004792:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004796:	d039      	beq.n	800480c <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8004798:	4b1f      	ldr	r3, [pc, #124]	@ (8004818 <mem_trim+0x19c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	8812      	ldrh	r2, [r2, #0]
 80047a0:	4413      	add	r3, r2
 80047a2:	897a      	ldrh	r2, [r7, #10]
 80047a4:	805a      	strh	r2, [r3, #2]
 80047a6:	e031      	b.n	800480c <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80047a8:	887b      	ldrh	r3, [r7, #2]
 80047aa:	f103 0214 	add.w	r2, r3, #20
 80047ae:	8a3b      	ldrh	r3, [r7, #16]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d82b      	bhi.n	800480c <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80047b4:	8a7a      	ldrh	r2, [r7, #18]
 80047b6:	887b      	ldrh	r3, [r7, #2]
 80047b8:	4413      	add	r3, r2
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	3308      	adds	r3, #8
 80047be:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80047c0:	4b15      	ldr	r3, [pc, #84]	@ (8004818 <mem_trim+0x19c>)
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	897b      	ldrh	r3, [r7, #10]
 80047c6:	4413      	add	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 80047ca:	4b19      	ldr	r3, [pc, #100]	@ (8004830 <mem_trim+0x1b4>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d202      	bcs.n	80047da <mem_trim+0x15e>
      lfree = mem2;
 80047d4:	4a16      	ldr	r2, [pc, #88]	@ (8004830 <mem_trim+0x1b4>)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	881a      	ldrh	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	8a7a      	ldrh	r2, [r7, #18]
 80047ec:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	897a      	ldrh	r2, [r7, #10]
 80047f2:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	881b      	ldrh	r3, [r3, #0]
 80047f8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80047fc:	d006      	beq.n	800480c <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80047fe:	4b06      	ldr	r3, [pc, #24]	@ (8004818 <mem_trim+0x19c>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	8812      	ldrh	r2, [r2, #0]
 8004806:	4413      	add	r3, r2
 8004808:	897a      	ldrh	r2, [r7, #10]
 800480a:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800480c:	687b      	ldr	r3, [r7, #4]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3718      	adds	r7, #24
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	20003d58 	.word	0x20003d58
 800481c:	20003d5c 	.word	0x20003d5c
 8004820:	0800e538 	.word	0x0800e538
 8004824:	0800e65c 	.word	0x0800e65c
 8004828:	0800e580 	.word	0x0800e580
 800482c:	0800e674 	.word	0x0800e674
 8004830:	20003d60 	.word	0x20003d60

08004834 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b088      	sub	sp, #32
 8004838:	af00      	add	r7, sp, #0
 800483a:	4603      	mov	r3, r0
 800483c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800483e:	88fb      	ldrh	r3, [r7, #6]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d101      	bne.n	8004848 <mem_malloc+0x14>
    return NULL;
 8004844:	2300      	movs	r3, #0
 8004846:	e0c7      	b.n	80049d8 <mem_malloc+0x1a4>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8004848:	88fb      	ldrh	r3, [r7, #6]
 800484a:	3303      	adds	r3, #3
 800484c:	b29b      	uxth	r3, r3
 800484e:	f023 0303 	bic.w	r3, r3, #3
 8004852:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 8004854:	88fb      	ldrh	r3, [r7, #6]
 8004856:	2b0b      	cmp	r3, #11
 8004858:	d801      	bhi.n	800485e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800485a:	230c      	movs	r3, #12
 800485c:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800485e:	88fb      	ldrh	r3, [r7, #6]
 8004860:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004864:	d901      	bls.n	800486a <mem_malloc+0x36>
    return NULL;
 8004866:	2300      	movs	r3, #0
 8004868:	e0b6      	b.n	80049d8 <mem_malloc+0x1a4>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800486a:	4b5d      	ldr	r3, [pc, #372]	@ (80049e0 <mem_malloc+0x1ac>)
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	4b5d      	ldr	r3, [pc, #372]	@ (80049e4 <mem_malloc+0x1b0>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	83fb      	strh	r3, [r7, #30]
 8004876:	e0a7      	b.n	80049c8 <mem_malloc+0x194>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8004878:	4b5a      	ldr	r3, [pc, #360]	@ (80049e4 <mem_malloc+0x1b0>)
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	8bfb      	ldrh	r3, [r7, #30]
 800487e:	4413      	add	r3, r2
 8004880:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	791b      	ldrb	r3, [r3, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	f040 8098 	bne.w	80049bc <mem_malloc+0x188>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	881b      	ldrh	r3, [r3, #0]
 8004890:	461a      	mov	r2, r3
 8004892:	8bfb      	ldrh	r3, [r7, #30]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	f1a3 0208 	sub.w	r2, r3, #8
 800489a:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800489c:	429a      	cmp	r2, r3
 800489e:	f0c0 808d 	bcc.w	80049bc <mem_malloc+0x188>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	881b      	ldrh	r3, [r3, #0]
 80048a6:	461a      	mov	r2, r3
 80048a8:	8bfb      	ldrh	r3, [r7, #30]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	f1a3 0208 	sub.w	r2, r3, #8
 80048b0:	88fb      	ldrh	r3, [r7, #6]
 80048b2:	3314      	adds	r3, #20
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d327      	bcc.n	8004908 <mem_malloc+0xd4>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 80048b8:	8bfa      	ldrh	r2, [r7, #30]
 80048ba:	88fb      	ldrh	r3, [r7, #6]
 80048bc:	4413      	add	r3, r2
 80048be:	b29b      	uxth	r3, r3
 80048c0:	3308      	adds	r3, #8
 80048c2:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 80048c4:	4b47      	ldr	r3, [pc, #284]	@ (80049e4 <mem_malloc+0x1b0>)
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	8a7b      	ldrh	r3, [r7, #18]
 80048ca:	4413      	add	r3, r2
 80048cc:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	881a      	ldrh	r2, [r3, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8bfa      	ldrh	r2, [r7, #30]
 80048e0:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	8a7a      	ldrh	r2, [r7, #18]
 80048e6:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	2201      	movs	r2, #1
 80048ec:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	881b      	ldrh	r3, [r3, #0]
 80048f2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80048f6:	d00a      	beq.n	800490e <mem_malloc+0xda>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80048f8:	4b3a      	ldr	r3, [pc, #232]	@ (80049e4 <mem_malloc+0x1b0>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	8812      	ldrh	r2, [r2, #0]
 8004900:	4413      	add	r3, r2
 8004902:	8a7a      	ldrh	r2, [r7, #18]
 8004904:	805a      	strh	r2, [r3, #2]
 8004906:	e002      	b.n	800490e <mem_malloc+0xda>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	2201      	movs	r2, #1
 800490c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800490e:	4b34      	ldr	r3, [pc, #208]	@ (80049e0 <mem_malloc+0x1ac>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	429a      	cmp	r2, r3
 8004916:	d127      	bne.n	8004968 <mem_malloc+0x134>
          struct mem *cur = lfree;
 8004918:	4b31      	ldr	r3, [pc, #196]	@ (80049e0 <mem_malloc+0x1ac>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800491e:	e005      	b.n	800492c <mem_malloc+0xf8>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8004920:	4b30      	ldr	r3, [pc, #192]	@ (80049e4 <mem_malloc+0x1b0>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	8812      	ldrh	r2, [r2, #0]
 8004928:	4413      	add	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	791b      	ldrb	r3, [r3, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d004      	beq.n	800493e <mem_malloc+0x10a>
 8004934:	4b2c      	ldr	r3, [pc, #176]	@ (80049e8 <mem_malloc+0x1b4>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	429a      	cmp	r2, r3
 800493c:	d1f0      	bne.n	8004920 <mem_malloc+0xec>
          }
          lfree = cur;
 800493e:	4a28      	ldr	r2, [pc, #160]	@ (80049e0 <mem_malloc+0x1ac>)
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8004944:	4b26      	ldr	r3, [pc, #152]	@ (80049e0 <mem_malloc+0x1ac>)
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	4b27      	ldr	r3, [pc, #156]	@ (80049e8 <mem_malloc+0x1b4>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	429a      	cmp	r2, r3
 800494e:	d00b      	beq.n	8004968 <mem_malloc+0x134>
 8004950:	4b23      	ldr	r3, [pc, #140]	@ (80049e0 <mem_malloc+0x1ac>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	791b      	ldrb	r3, [r3, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d006      	beq.n	8004968 <mem_malloc+0x134>
 800495a:	4b24      	ldr	r3, [pc, #144]	@ (80049ec <mem_malloc+0x1b8>)
 800495c:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8004960:	4923      	ldr	r1, [pc, #140]	@ (80049f0 <mem_malloc+0x1bc>)
 8004962:	4824      	ldr	r0, [pc, #144]	@ (80049f4 <mem_malloc+0x1c0>)
 8004964:	f008 ff22 	bl	800d7ac <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004968:	88fa      	ldrh	r2, [r7, #6]
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	4413      	add	r3, r2
 800496e:	3308      	adds	r3, #8
 8004970:	4a1d      	ldr	r2, [pc, #116]	@ (80049e8 <mem_malloc+0x1b4>)
 8004972:	6812      	ldr	r2, [r2, #0]
 8004974:	4293      	cmp	r3, r2
 8004976:	d906      	bls.n	8004986 <mem_malloc+0x152>
 8004978:	4b1c      	ldr	r3, [pc, #112]	@ (80049ec <mem_malloc+0x1b8>)
 800497a:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800497e:	491e      	ldr	r1, [pc, #120]	@ (80049f8 <mem_malloc+0x1c4>)
 8004980:	481c      	ldr	r0, [pc, #112]	@ (80049f4 <mem_malloc+0x1c0>)
 8004982:	f008 ff13 	bl	800d7ac <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f003 0303 	and.w	r3, r3, #3
 800498c:	2b00      	cmp	r3, #0
 800498e:	d006      	beq.n	800499e <mem_malloc+0x16a>
 8004990:	4b16      	ldr	r3, [pc, #88]	@ (80049ec <mem_malloc+0x1b8>)
 8004992:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8004996:	4919      	ldr	r1, [pc, #100]	@ (80049fc <mem_malloc+0x1c8>)
 8004998:	4816      	ldr	r0, [pc, #88]	@ (80049f4 <mem_malloc+0x1c0>)
 800499a:	f008 ff07 	bl	800d7ac <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f003 0303 	and.w	r3, r3, #3
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d006      	beq.n	80049b6 <mem_malloc+0x182>
 80049a8:	4b10      	ldr	r3, [pc, #64]	@ (80049ec <mem_malloc+0x1b8>)
 80049aa:	f240 22d7 	movw	r2, #727	@ 0x2d7
 80049ae:	4914      	ldr	r1, [pc, #80]	@ (8004a00 <mem_malloc+0x1cc>)
 80049b0:	4810      	ldr	r0, [pc, #64]	@ (80049f4 <mem_malloc+0x1c0>)
 80049b2:	f008 fefb 	bl	800d7ac <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	3308      	adds	r3, #8
 80049ba:	e00d      	b.n	80049d8 <mem_malloc+0x1a4>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 80049bc:	4b09      	ldr	r3, [pc, #36]	@ (80049e4 <mem_malloc+0x1b0>)
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	8bfb      	ldrh	r3, [r7, #30]
 80049c2:	4413      	add	r3, r2
 80049c4:	881b      	ldrh	r3, [r3, #0]
 80049c6:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80049c8:	8bfa      	ldrh	r2, [r7, #30]
 80049ca:	88fb      	ldrh	r3, [r7, #6]
 80049cc:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 80049d0:	429a      	cmp	r2, r3
 80049d2:	f4ff af51 	bcc.w	8004878 <mem_malloc+0x44>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3720      	adds	r7, #32
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	20003d60 	.word	0x20003d60
 80049e4:	20003d58 	.word	0x20003d58
 80049e8:	20003d5c 	.word	0x20003d5c
 80049ec:	0800e538 	.word	0x0800e538
 80049f0:	0800e694 	.word	0x0800e694
 80049f4:	0800e580 	.word	0x0800e580
 80049f8:	0800e6b0 	.word	0x0800e6b0
 80049fc:	0800e6e0 	.word	0x0800e6e0
 8004a00:	0800e710 	.word	0x0800e710

08004a04 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	2200      	movs	r2, #0
 8004a12:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	3303      	adds	r3, #3
 8004a1a:	f023 0303 	bic.w	r3, r3, #3
 8004a1e:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8004a20:	2300      	movs	r3, #0
 8004a22:	60fb      	str	r3, [r7, #12]
 8004a24:	e011      	b.n	8004a4a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	881b      	ldrh	r3, [r3, #0]
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	4413      	add	r3, r2
 8004a42:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	3301      	adds	r3, #1
 8004a48:	60fb      	str	r3, [r7, #12]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	885b      	ldrh	r3, [r3, #2]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	4293      	cmp	r3, r2
 8004a54:	dbe7      	blt.n	8004a26 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8004a56:	bf00      	nop
 8004a58:	bf00      	nop
 8004a5a:	3714      	adds	r7, #20
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bc80      	pop	{r7}
 8004a60:	4770      	bx	lr
	...

08004a64 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	80fb      	strh	r3, [r7, #6]
 8004a6e:	e009      	b.n	8004a84 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8004a70:	88fb      	ldrh	r3, [r7, #6]
 8004a72:	4a08      	ldr	r2, [pc, #32]	@ (8004a94 <memp_init+0x30>)
 8004a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7ff ffc3 	bl	8004a04 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004a7e:	88fb      	ldrh	r3, [r7, #6]
 8004a80:	3301      	adds	r3, #1
 8004a82:	80fb      	strh	r3, [r7, #6]
 8004a84:	88fb      	ldrh	r3, [r7, #6]
 8004a86:	2b08      	cmp	r3, #8
 8004a88:	d9f2      	bls.n	8004a70 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8004a8a:	bf00      	nop
 8004a8c:	bf00      	nop
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	08010220 	.word	0x08010220

08004a98 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d012      	beq.n	8004ad4 <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	6812      	ldr	r2, [r2, #0]
 8004ab6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f003 0303 	and.w	r3, r3, #3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d006      	beq.n	8004ad0 <do_memp_malloc_pool+0x38>
 8004ac2:	4b07      	ldr	r3, [pc, #28]	@ (8004ae0 <do_memp_malloc_pool+0x48>)
 8004ac4:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 8004ac8:	4906      	ldr	r1, [pc, #24]	@ (8004ae4 <do_memp_malloc_pool+0x4c>)
 8004aca:	4807      	ldr	r0, [pc, #28]	@ (8004ae8 <do_memp_malloc_pool+0x50>)
 8004acc:	f008 fe6e 	bl	800d7ac <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	e000      	b.n	8004ad6 <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	0800e734 	.word	0x0800e734
 8004ae4:	0800e764 	.word	0x0800e764
 8004ae8:	0800e788 	.word	0x0800e788

08004aec <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	4603      	mov	r3, r0
 8004af4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004af6:	79fb      	ldrb	r3, [r7, #7]
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	d908      	bls.n	8004b0e <memp_malloc+0x22>
 8004afc:	4b0a      	ldr	r3, [pc, #40]	@ (8004b28 <memp_malloc+0x3c>)
 8004afe:	f240 1287 	movw	r2, #391	@ 0x187
 8004b02:	490a      	ldr	r1, [pc, #40]	@ (8004b2c <memp_malloc+0x40>)
 8004b04:	480a      	ldr	r0, [pc, #40]	@ (8004b30 <memp_malloc+0x44>)
 8004b06:	f008 fe51 	bl	800d7ac <iprintf>
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	e008      	b.n	8004b20 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8004b0e:	79fb      	ldrb	r3, [r7, #7]
 8004b10:	4a08      	ldr	r2, [pc, #32]	@ (8004b34 <memp_malloc+0x48>)
 8004b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7ff ffbe 	bl	8004a98 <do_memp_malloc_pool>
 8004b1c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	0800e734 	.word	0x0800e734
 8004b2c:	0800e7c4 	.word	0x0800e7c4
 8004b30:	0800e788 	.word	0x0800e788
 8004b34:	08010220 	.word	0x08010220

08004b38 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	f003 0303 	and.w	r3, r3, #3
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d006      	beq.n	8004b5a <do_memp_free_pool+0x22>
 8004b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8004b78 <do_memp_free_pool+0x40>)
 8004b4e:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8004b52:	490a      	ldr	r1, [pc, #40]	@ (8004b7c <do_memp_free_pool+0x44>)
 8004b54:	480a      	ldr	r0, [pc, #40]	@ (8004b80 <do_memp_free_pool+0x48>)
 8004b56:	f008 fe29 	bl	800d7ac <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004b70:	bf00      	nop
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	0800e734 	.word	0x0800e734
 8004b7c:	0800e7e4 	.word	0x0800e7e4
 8004b80:	0800e788 	.word	0x0800e788

08004b84 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	6039      	str	r1, [r7, #0]
 8004b8e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004b90:	79fb      	ldrb	r3, [r7, #7]
 8004b92:	2b08      	cmp	r3, #8
 8004b94:	d907      	bls.n	8004ba6 <memp_free+0x22>
 8004b96:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc8 <memp_free+0x44>)
 8004b98:	f240 12db 	movw	r2, #475	@ 0x1db
 8004b9c:	490b      	ldr	r1, [pc, #44]	@ (8004bcc <memp_free+0x48>)
 8004b9e:	480c      	ldr	r0, [pc, #48]	@ (8004bd0 <memp_free+0x4c>)
 8004ba0:	f008 fe04 	bl	800d7ac <iprintf>
 8004ba4:	e00c      	b.n	8004bc0 <memp_free+0x3c>

  if (mem == NULL) {
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d008      	beq.n	8004bbe <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004bac:	79fb      	ldrb	r3, [r7, #7]
 8004bae:	4a09      	ldr	r2, [pc, #36]	@ (8004bd4 <memp_free+0x50>)
 8004bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bb4:	6839      	ldr	r1, [r7, #0]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7ff ffbe 	bl	8004b38 <do_memp_free_pool>
 8004bbc:	e000      	b.n	8004bc0 <memp_free+0x3c>
    return;
 8004bbe:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004bc0:	3708      	adds	r7, #8
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	0800e734 	.word	0x0800e734
 8004bcc:	0800e804 	.word	0x0800e804
 8004bd0:	0800e788 	.word	0x0800e788
 8004bd4:	08010220 	.word	0x08010220

08004bd8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8004bdc:	bf00      	nop
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bc80      	pop	{r7}
 8004be2:	4770      	bx	lr

08004be4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
 8004bf0:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d105      	bne.n	8004c04 <netif_add+0x20>
 8004bf8:	4b21      	ldr	r3, [pc, #132]	@ (8004c80 <netif_add+0x9c>)
 8004bfa:	22fb      	movs	r2, #251	@ 0xfb
 8004bfc:	4921      	ldr	r1, [pc, #132]	@ (8004c84 <netif_add+0xa0>)
 8004bfe:	4822      	ldr	r0, [pc, #136]	@ (8004c88 <netif_add+0xa4>)
 8004c00:	f008 fdd4 	bl	800d7ac <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2203      	movs	r2, #3
 8004c22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 8004c32:	4b16      	ldr	r3, [pc, #88]	@ (8004c8c <netif_add+0xa8>)
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	1c5a      	adds	r2, r3, #1
 8004c38:	b2d1      	uxtb	r1, r2
 8004c3a:	4a14      	ldr	r2, [pc, #80]	@ (8004c8c <netif_add+0xa8>)
 8004c3c:	7011      	strb	r1, [r2, #0]
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	f882 3032 	strb.w	r3, [r2, #50]	@ 0x32
  netif->input = input;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6a3a      	ldr	r2, [r7, #32]
 8004c48:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	68b9      	ldr	r1, [r7, #8]
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f000 f81f 	bl	8004c94 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	4798      	blx	r3
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <netif_add+0x82>
    return NULL;
 8004c62:	2300      	movs	r3, #0
 8004c64:	e007      	b.n	8004c76 <netif_add+0x92>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8004c66:	4b0a      	ldr	r3, [pc, #40]	@ (8004c90 <netif_add+0xac>)
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8004c6e:	4a08      	ldr	r2, [pc, #32]	@ (8004c90 <netif_add+0xac>)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8004c74:	68fb      	ldr	r3, [r7, #12]
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	0800e820 	.word	0x0800e820
 8004c84:	0800e854 	.word	0x0800e854
 8004c88:	0800e86c 	.word	0x0800e86c
 8004c8c:	20006c44 	.word	0x20006c44
 8004c90:	20006c3c 	.word	0x20006c3c

08004c94 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
 8004ca0:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d003      	beq.n	8004cb0 <netif_set_addr+0x1c>
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10c      	bne.n	8004cca <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8004cb0:	68b9      	ldr	r1, [r7, #8]
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f000 f81a 	bl	8004cec <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8004cb8:	6879      	ldr	r1, [r7, #4]
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f000 f861 	bl	8004d82 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8004cc0:	6839      	ldr	r1, [r7, #0]
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f000 f84a 	bl	8004d5c <netif_set_gw>
 8004cc8:	e00c      	b.n	8004ce4 <netif_set_addr+0x50>
  } else {
    netif_set_netmask(netif, netmask);
 8004cca:	6879      	ldr	r1, [r7, #4]
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f000 f858 	bl	8004d82 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8004cd2:	6839      	ldr	r1, [r7, #0]
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f000 f841 	bl	8004d5c <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8004cda:	68b9      	ldr	r1, [r7, #8]
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f000 f805 	bl	8004cec <netif_set_ipaddr>
  }
}
 8004ce2:	bf00      	nop
 8004ce4:	bf00      	nop
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <netif_set_ipaddr+0x18>
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	60fb      	str	r3, [r7, #12]
 8004d02:	e002      	b.n	8004d0a <netif_set_ipaddr+0x1e>
 8004d04:	4b14      	ldr	r3, [pc, #80]	@ (8004d58 <netif_set_ipaddr+0x6c>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	3304      	adds	r3, #4
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d01c      	beq.n	8004d50 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	3304      	adds	r3, #4
 8004d1a:	f107 020c 	add.w	r2, r7, #12
 8004d1e:	4611      	mov	r1, r2
 8004d20:	4618      	mov	r0, r3
 8004d22:	f002 fa19 	bl	8007158 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	3304      	adds	r3, #4
 8004d2a:	f107 020c 	add.w	r2, r7, #12
 8004d2e:	4611      	mov	r1, r2
 8004d30:	4618      	mov	r0, r3
 8004d32:	f006 fa75 	bl	800b220 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d002      	beq.n	8004d42 <netif_set_ipaddr+0x56>
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	e000      	b.n	8004d44 <netif_set_ipaddr+0x58>
 8004d42:	2300      	movs	r3, #0
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8004d48:	2101      	movs	r1, #1
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f85d 	bl	8004e0a <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 8004d50:	bf00      	nop
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	08010284 	.word	0x08010284

08004d5c <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d002      	beq.n	8004d72 <netif_set_gw+0x16>
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	e000      	b.n	8004d74 <netif_set_gw+0x18>
 8004d72:	2300      	movs	r3, #0
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bc80      	pop	{r7}
 8004d80:	4770      	bx	lr

08004d82 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
 8004d8a:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d002      	beq.n	8004d98 <netif_set_netmask+0x16>
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	e000      	b.n	8004d9a <netif_set_netmask+0x18>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bc80      	pop	{r7}
 8004da6:	4770      	bx	lr

08004da8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8004db0:	4a03      	ldr	r2, [pc, #12]	@ (8004dc0 <netif_set_default+0x18>)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8004db6:	bf00      	nop
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bc80      	pop	{r7}
 8004dbe:	4770      	bx	lr
 8004dc0:	20006c40 	.word	0x20006c40

08004dc4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d113      	bne.n	8004e02 <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004de0:	f043 0301 	orr.w	r3, r3, #1
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004df2:	f003 0304 	and.w	r3, r3, #4
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8004dfa:	2103      	movs	r1, #3
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 f804 	bl	8004e0a <netif_issue_reports>
    }
  }
}
 8004e02:	bf00      	nop
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b082      	sub	sp, #8
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
 8004e12:	460b      	mov	r3, r1
 8004e14:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004e16:	78fb      	ldrb	r3, [r7, #3]
 8004e18:	f003 0301 	and.w	r3, r3, #1
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d011      	beq.n	8004e44 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	3304      	adds	r3, #4
 8004e24:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00c      	beq.n	8004e44 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004e30:	f003 0308 	and.w	r3, r3, #8
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d005      	beq.n	8004e44 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f007 f8ee 	bl	800c020 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8004e44:	bf00      	nop
 8004e46:	3708      	adds	r7, #8
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  if (netif) {
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d002      	beq.n	8004e62 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	61da      	str	r2, [r3, #28]
  }
}
 8004e62:	bf00      	nop
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bc80      	pop	{r7}
 8004e6a:	4770      	bx	lr

08004e6c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8004e72:	4b0e      	ldr	r3, [pc, #56]	@ (8004eac <pbuf_free_ooseq+0x40>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004e78:	4b0d      	ldr	r3, [pc, #52]	@ (8004eb0 <pbuf_free_ooseq+0x44>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	607b      	str	r3, [r7, #4]
 8004e7e:	e00f      	b.n	8004ea0 <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d008      	beq.n	8004e9a <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f001 fe60 	bl	8006b52 <tcp_segs_free>
      pcb->ooseq = NULL;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	671a      	str	r2, [r3, #112]	@ 0x70
      return;
 8004e98:	e005      	b.n	8004ea6 <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	607b      	str	r3, [r7, #4]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1ec      	bne.n	8004e80 <pbuf_free_ooseq+0x14>
    }
  }
}
 8004ea6:	3708      	adds	r7, #8
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	20006c45 	.word	0x20006c45
 8004eb0:	20006c54 	.word	0x20006c54

08004eb4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8004eb8:	4b03      	ldr	r3, [pc, #12]	@ (8004ec8 <pbuf_pool_is_empty+0x14>)
 8004eba:	2201      	movs	r2, #1
 8004ebc:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8004ebe:	bf00      	nop
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bc80      	pop	{r7}
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	20006c45 	.word	0x20006c45

08004ecc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b088      	sub	sp, #32
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	71fb      	strb	r3, [r7, #7]
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	80bb      	strh	r3, [r7, #4]
 8004eda:	4613      	mov	r3, r2
 8004edc:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 8004ede:	79fb      	ldrb	r3, [r7, #7]
 8004ee0:	2b04      	cmp	r3, #4
 8004ee2:	d81c      	bhi.n	8004f1e <pbuf_alloc+0x52>
 8004ee4:	a201      	add	r2, pc, #4	@ (adr r2, 8004eec <pbuf_alloc+0x20>)
 8004ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eea:	bf00      	nop
 8004eec:	08004f01 	.word	0x08004f01
 8004ef0:	08004f07 	.word	0x08004f07
 8004ef4:	08004f0d 	.word	0x08004f0d
 8004ef8:	08004f13 	.word	0x08004f13
 8004efc:	08004f19 	.word	0x08004f19
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8004f00:	2336      	movs	r3, #54	@ 0x36
 8004f02:	82fb      	strh	r3, [r7, #22]
    break;
 8004f04:	e014      	b.n	8004f30 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8004f06:	2322      	movs	r3, #34	@ 0x22
 8004f08:	82fb      	strh	r3, [r7, #22]
    break;
 8004f0a:	e011      	b.n	8004f30 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8004f0c:	230e      	movs	r3, #14
 8004f0e:	82fb      	strh	r3, [r7, #22]
    break;
 8004f10:	e00e      	b.n	8004f30 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8004f12:	2300      	movs	r3, #0
 8004f14:	82fb      	strh	r3, [r7, #22]
    break;
 8004f16:	e00b      	b.n	8004f30 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	82fb      	strh	r3, [r7, #22]
    break;
 8004f1c:	e008      	b.n	8004f30 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8004f1e:	4ba1      	ldr	r3, [pc, #644]	@ (80051a4 <pbuf_alloc+0x2d8>)
 8004f20:	f44f 728b 	mov.w	r2, #278	@ 0x116
 8004f24:	49a0      	ldr	r1, [pc, #640]	@ (80051a8 <pbuf_alloc+0x2dc>)
 8004f26:	48a1      	ldr	r0, [pc, #644]	@ (80051ac <pbuf_alloc+0x2e0>)
 8004f28:	f008 fc40 	bl	800d7ac <iprintf>
    return NULL;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	e15c      	b.n	80051ea <pbuf_alloc+0x31e>
  }

  switch (type) {
 8004f30:	79bb      	ldrb	r3, [r7, #6]
 8004f32:	2b03      	cmp	r3, #3
 8004f34:	d00d      	beq.n	8004f52 <pbuf_alloc+0x86>
 8004f36:	2b03      	cmp	r3, #3
 8004f38:	f300 8146 	bgt.w	80051c8 <pbuf_alloc+0x2fc>
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f000 80d0 	beq.w	80050e2 <pbuf_alloc+0x216>
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f2c0 8140 	blt.w	80051c8 <pbuf_alloc+0x2fc>
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	f200 813c 	bhi.w	80051c8 <pbuf_alloc+0x2fc>
 8004f50:	e10d      	b.n	800516e <pbuf_alloc+0x2a2>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8004f52:	2008      	movs	r0, #8
 8004f54:	f7ff fdca 	bl	8004aec <memp_malloc>
 8004f58:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d103      	bne.n	8004f68 <pbuf_alloc+0x9c>
      PBUF_POOL_IS_EMPTY();
 8004f60:	f7ff ffa8 	bl	8004eb4 <pbuf_pool_is_empty>
      return NULL;
 8004f64:	2300      	movs	r3, #0
 8004f66:	e140      	b.n	80051ea <pbuf_alloc+0x31e>
    }
    p->type = type;
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	79ba      	ldrb	r2, [r7, #6]
 8004f6c:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	2200      	movs	r2, #0
 8004f72:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8004f74:	8afb      	ldrh	r3, [r7, #22]
 8004f76:	3310      	adds	r3, #16
 8004f78:	69fa      	ldr	r2, [r7, #28]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	3303      	adds	r3, #3
 8004f7e:	f023 0303 	bic.w	r3, r3, #3
 8004f82:	461a      	mov	r2, r3
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f003 0303 	and.w	r3, r3, #3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d006      	beq.n	8004fa2 <pbuf_alloc+0xd6>
 8004f94:	4b83      	ldr	r3, [pc, #524]	@ (80051a4 <pbuf_alloc+0x2d8>)
 8004f96:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8004f9a:	4985      	ldr	r1, [pc, #532]	@ (80051b0 <pbuf_alloc+0x2e4>)
 8004f9c:	4883      	ldr	r0, [pc, #524]	@ (80051ac <pbuf_alloc+0x2e0>)
 8004f9e:	f008 fc05 	bl	800d7ac <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	88ba      	ldrh	r2, [r7, #4]
 8004fa6:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8004fa8:	8afb      	ldrh	r3, [r7, #22]
 8004faa:	3303      	adds	r3, #3
 8004fac:	f023 0303 	bic.w	r3, r3, #3
 8004fb0:	f5c3 7214 	rsb	r2, r3, #592	@ 0x250
 8004fb4:	88bb      	ldrh	r3, [r7, #4]
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	bf28      	it	cs
 8004fba:	4613      	movcs	r3, r2
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	69fa      	ldr	r2, [r7, #28]
 8004fc8:	8952      	ldrh	r2, [r2, #10]
 8004fca:	441a      	add	r2, r3
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d906      	bls.n	8004fe4 <pbuf_alloc+0x118>
 8004fd6:	4b73      	ldr	r3, [pc, #460]	@ (80051a4 <pbuf_alloc+0x2d8>)
 8004fd8:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8004fdc:	4975      	ldr	r1, [pc, #468]	@ (80051b4 <pbuf_alloc+0x2e8>)
 8004fde:	4873      	ldr	r0, [pc, #460]	@ (80051ac <pbuf_alloc+0x2e0>)
 8004fe0:	f008 fbe4 	bl	800d7ac <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8004fe4:	8afb      	ldrh	r3, [r7, #22]
 8004fe6:	3303      	adds	r3, #3
 8004fe8:	f023 0303 	bic.w	r3, r3, #3
 8004fec:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8004ff0:	d106      	bne.n	8005000 <pbuf_alloc+0x134>
 8004ff2:	4b6c      	ldr	r3, [pc, #432]	@ (80051a4 <pbuf_alloc+0x2d8>)
 8004ff4:	f240 1231 	movw	r2, #305	@ 0x131
 8004ff8:	496f      	ldr	r1, [pc, #444]	@ (80051b8 <pbuf_alloc+0x2ec>)
 8004ffa:	486c      	ldr	r0, [pc, #432]	@ (80051ac <pbuf_alloc+0x2e0>)
 8004ffc:	f008 fbd6 	bl	800d7ac <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	2201      	movs	r2, #1
 8005004:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800500a:	88bb      	ldrh	r3, [r7, #4]
 800500c:	69fa      	ldr	r2, [r7, #28]
 800500e:	8952      	ldrh	r2, [r2, #10]
 8005010:	1a9b      	subs	r3, r3, r2
 8005012:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 8005014:	e061      	b.n	80050da <pbuf_alloc+0x20e>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005016:	2008      	movs	r0, #8
 8005018:	f7ff fd68 	bl	8004aec <memp_malloc>
 800501c:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d106      	bne.n	8005032 <pbuf_alloc+0x166>
        PBUF_POOL_IS_EMPTY();
 8005024:	f7ff ff46 	bl	8004eb4 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 8005028:	69f8      	ldr	r0, [r7, #28]
 800502a:	f000 fac7 	bl	80055bc <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800502e:	2300      	movs	r3, #0
 8005030:	e0db      	b.n	80051ea <pbuf_alloc+0x31e>
      }
      q->type = type;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	79ba      	ldrb	r2, [r7, #6]
 8005036:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005050:	4293      	cmp	r3, r2
 8005052:	dd06      	ble.n	8005062 <pbuf_alloc+0x196>
 8005054:	4b53      	ldr	r3, [pc, #332]	@ (80051a4 <pbuf_alloc+0x2d8>)
 8005056:	f44f 72a6 	mov.w	r2, #332	@ 0x14c
 800505a:	4958      	ldr	r1, [pc, #352]	@ (80051bc <pbuf_alloc+0x2f0>)
 800505c:	4853      	ldr	r0, [pc, #332]	@ (80051ac <pbuf_alloc+0x2e0>)
 800505e:	f008 fba5 	bl	800d7ac <iprintf>
      q->tot_len = (u16_t)rem_len;
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	b29a      	uxth	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	b29b      	uxth	r3, r3
 800506e:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8005072:	bf28      	it	cs
 8005074:	f44f 7314 	movcs.w	r3, #592	@ 0x250
 8005078:	b29a      	uxth	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f103 0210 	add.w	r2, r3, #16
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f003 0303 	and.w	r3, r3, #3
 8005090:	2b00      	cmp	r3, #0
 8005092:	d006      	beq.n	80050a2 <pbuf_alloc+0x1d6>
 8005094:	4b43      	ldr	r3, [pc, #268]	@ (80051a4 <pbuf_alloc+0x2d8>)
 8005096:	f240 1251 	movw	r2, #337	@ 0x151
 800509a:	4949      	ldr	r1, [pc, #292]	@ (80051c0 <pbuf_alloc+0x2f4>)
 800509c:	4843      	ldr	r0, [pc, #268]	@ (80051ac <pbuf_alloc+0x2e0>)
 800509e:	f008 fb85 	bl	800d7ac <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	69fa      	ldr	r2, [r7, #28]
 80050a8:	8952      	ldrh	r2, [r2, #10]
 80050aa:	441a      	add	r2, r3
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d906      	bls.n	80050c4 <pbuf_alloc+0x1f8>
 80050b6:	4b3b      	ldr	r3, [pc, #236]	@ (80051a4 <pbuf_alloc+0x2d8>)
 80050b8:	f240 1253 	movw	r2, #339	@ 0x153
 80050bc:	493d      	ldr	r1, [pc, #244]	@ (80051b4 <pbuf_alloc+0x2e8>)
 80050be:	483b      	ldr	r0, [pc, #236]	@ (80051ac <pbuf_alloc+0x2e0>)
 80050c0:	f008 fb74 	bl	800d7ac <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2201      	movs	r2, #1
 80050c8:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	895b      	ldrh	r3, [r3, #10]
 80050ce:	461a      	mov	r2, r3
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	1a9b      	subs	r3, r3, r2
 80050d4:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	dc9a      	bgt.n	8005016 <pbuf_alloc+0x14a>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 80050e0:	e07c      	b.n	80051dc <pbuf_alloc+0x310>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 80050e2:	8afb      	ldrh	r3, [r7, #22]
 80050e4:	3313      	adds	r3, #19
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	f023 0303 	bic.w	r3, r3, #3
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	88bb      	ldrh	r3, [r7, #4]
 80050f0:	3303      	adds	r3, #3
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	f023 0303 	bic.w	r3, r3, #3
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	4413      	add	r3, r2
 80050fc:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 80050fe:	897a      	ldrh	r2, [r7, #10]
 8005100:	88bb      	ldrh	r3, [r7, #4]
 8005102:	3303      	adds	r3, #3
 8005104:	f023 0303 	bic.w	r3, r3, #3
 8005108:	429a      	cmp	r2, r3
 800510a:	d201      	bcs.n	8005110 <pbuf_alloc+0x244>
        return NULL;
 800510c:	2300      	movs	r3, #0
 800510e:	e06c      	b.n	80051ea <pbuf_alloc+0x31e>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 8005110:	897b      	ldrh	r3, [r7, #10]
 8005112:	4618      	mov	r0, r3
 8005114:	f7ff fb8e 	bl	8004834 <mem_malloc>
 8005118:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d101      	bne.n	8005124 <pbuf_alloc+0x258>
      return NULL;
 8005120:	2300      	movs	r3, #0
 8005122:	e062      	b.n	80051ea <pbuf_alloc+0x31e>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8005124:	8afb      	ldrh	r3, [r7, #22]
 8005126:	3310      	adds	r3, #16
 8005128:	69fa      	ldr	r2, [r7, #28]
 800512a:	4413      	add	r3, r2
 800512c:	3303      	adds	r3, #3
 800512e:	f023 0303 	bic.w	r3, r3, #3
 8005132:	461a      	mov	r2, r3
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	88ba      	ldrh	r2, [r7, #4]
 800513c:	811a      	strh	r2, [r3, #8]
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	891a      	ldrh	r2, [r3, #8]
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	2200      	movs	r2, #0
 800514a:	601a      	str	r2, [r3, #0]
    p->type = type;
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	79ba      	ldrb	r2, [r7, #6]
 8005150:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f003 0303 	and.w	r3, r3, #3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d03d      	beq.n	80051da <pbuf_alloc+0x30e>
 800515e:	4b11      	ldr	r3, [pc, #68]	@ (80051a4 <pbuf_alloc+0x2d8>)
 8005160:	f44f 72bb 	mov.w	r2, #374	@ 0x176
 8005164:	4917      	ldr	r1, [pc, #92]	@ (80051c4 <pbuf_alloc+0x2f8>)
 8005166:	4811      	ldr	r0, [pc, #68]	@ (80051ac <pbuf_alloc+0x2e0>)
 8005168:	f008 fb20 	bl	800d7ac <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800516c:	e035      	b.n	80051da <pbuf_alloc+0x30e>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800516e:	2007      	movs	r0, #7
 8005170:	f7ff fcbc 	bl	8004aec <memp_malloc>
 8005174:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d101      	bne.n	8005180 <pbuf_alloc+0x2b4>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800517c:	2300      	movs	r3, #0
 800517e:	e034      	b.n	80051ea <pbuf_alloc+0x31e>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	2200      	movs	r2, #0
 8005184:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	88ba      	ldrh	r2, [r7, #4]
 800518a:	811a      	strh	r2, [r3, #8]
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	891a      	ldrh	r2, [r3, #8]
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	2200      	movs	r2, #0
 8005198:	601a      	str	r2, [r3, #0]
    p->type = type;
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	79ba      	ldrb	r2, [r7, #6]
 800519e:	731a      	strb	r2, [r3, #12]
    break;
 80051a0:	e01c      	b.n	80051dc <pbuf_alloc+0x310>
 80051a2:	bf00      	nop
 80051a4:	0800e894 	.word	0x0800e894
 80051a8:	0800e8c4 	.word	0x0800e8c4
 80051ac:	0800e8e0 	.word	0x0800e8e0
 80051b0:	0800e908 	.word	0x0800e908
 80051b4:	0800e938 	.word	0x0800e938
 80051b8:	0800e96c 	.word	0x0800e96c
 80051bc:	0800e9a0 	.word	0x0800e9a0
 80051c0:	0800e9b4 	.word	0x0800e9b4
 80051c4:	0800e9e4 	.word	0x0800e9e4
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80051c8:	4b0a      	ldr	r3, [pc, #40]	@ (80051f4 <pbuf_alloc+0x328>)
 80051ca:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 80051ce:	490a      	ldr	r1, [pc, #40]	@ (80051f8 <pbuf_alloc+0x32c>)
 80051d0:	480a      	ldr	r0, [pc, #40]	@ (80051fc <pbuf_alloc+0x330>)
 80051d2:	f008 faeb 	bl	800d7ac <iprintf>
    return NULL;
 80051d6:	2300      	movs	r3, #0
 80051d8:	e007      	b.n	80051ea <pbuf_alloc+0x31e>
    break;
 80051da:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	2201      	movs	r2, #1
 80051e0:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	2200      	movs	r2, #0
 80051e6:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80051e8:	69fb      	ldr	r3, [r7, #28]
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3720      	adds	r7, #32
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	0800e894 	.word	0x0800e894
 80051f8:	0800ea10 	.word	0x0800ea10
 80051fc:	0800e8e0 	.word	0x0800e8e0

08005200 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	603b      	str	r3, [r7, #0]
 8005208:	4603      	mov	r3, r0
 800520a:	71fb      	strb	r3, [r7, #7]
 800520c:	460b      	mov	r3, r1
 800520e:	80bb      	strh	r3, [r7, #4]
 8005210:	4613      	mov	r3, r2
 8005212:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8005214:	79fb      	ldrb	r3, [r7, #7]
 8005216:	2b04      	cmp	r3, #4
 8005218:	d81b      	bhi.n	8005252 <pbuf_alloced_custom+0x52>
 800521a:	a201      	add	r2, pc, #4	@ (adr r2, 8005220 <pbuf_alloced_custom+0x20>)
 800521c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005220:	08005235 	.word	0x08005235
 8005224:	0800523b 	.word	0x0800523b
 8005228:	08005241 	.word	0x08005241
 800522c:	08005247 	.word	0x08005247
 8005230:	0800524d 	.word	0x0800524d
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8005234:	2336      	movs	r3, #54	@ 0x36
 8005236:	81fb      	strh	r3, [r7, #14]
    break;
 8005238:	e014      	b.n	8005264 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800523a:	2322      	movs	r3, #34	@ 0x22
 800523c:	81fb      	strh	r3, [r7, #14]
    break;
 800523e:	e011      	b.n	8005264 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8005240:	230e      	movs	r3, #14
 8005242:	81fb      	strh	r3, [r7, #14]
    break;
 8005244:	e00e      	b.n	8005264 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8005246:	2300      	movs	r3, #0
 8005248:	81fb      	strh	r3, [r7, #14]
    break;
 800524a:	e00b      	b.n	8005264 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 800524c:	2300      	movs	r3, #0
 800524e:	81fb      	strh	r3, [r7, #14]
    break;
 8005250:	e008      	b.n	8005264 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8005252:	4b1d      	ldr	r3, [pc, #116]	@ (80052c8 <pbuf_alloced_custom+0xc8>)
 8005254:	f240 12c5 	movw	r2, #453	@ 0x1c5
 8005258:	491c      	ldr	r1, [pc, #112]	@ (80052cc <pbuf_alloced_custom+0xcc>)
 800525a:	481d      	ldr	r0, [pc, #116]	@ (80052d0 <pbuf_alloced_custom+0xd0>)
 800525c:	f008 faa6 	bl	800d7ac <iprintf>
    return NULL;
 8005260:	2300      	movs	r3, #0
 8005262:	e02d      	b.n	80052c0 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005264:	89fb      	ldrh	r3, [r7, #14]
 8005266:	3303      	adds	r3, #3
 8005268:	f023 0203 	bic.w	r2, r3, #3
 800526c:	88bb      	ldrh	r3, [r7, #4]
 800526e:	441a      	add	r2, r3
 8005270:	8bbb      	ldrh	r3, [r7, #28]
 8005272:	429a      	cmp	r2, r3
 8005274:	d901      	bls.n	800527a <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005276:	2300      	movs	r3, #0
 8005278:	e022      	b.n	80052c0 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	2200      	movs	r2, #0
 800527e:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d008      	beq.n	8005298 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005286:	89fb      	ldrh	r3, [r7, #14]
 8005288:	3303      	adds	r3, #3
 800528a:	f023 0303 	bic.w	r3, r3, #3
 800528e:	69ba      	ldr	r2, [r7, #24]
 8005290:	441a      	add	r2, r3
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	605a      	str	r2, [r3, #4]
 8005296:	e002      	b.n	800529e <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	2200      	movs	r2, #0
 800529c:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2202      	movs	r2, #2
 80052a2:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	88ba      	ldrh	r2, [r7, #4]
 80052a8:	811a      	strh	r2, [r3, #8]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	891a      	ldrh	r2, [r3, #8]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	79ba      	ldrb	r2, [r7, #6]
 80052b6:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	2201      	movs	r2, #1
 80052bc:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 80052be:	683b      	ldr	r3, [r7, #0]
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	0800e894 	.word	0x0800e894
 80052cc:	0800ea2c 	.word	0x0800ea2c
 80052d0:	0800e8e0 	.word	0x0800e8e0

080052d4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b086      	sub	sp, #24
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	460b      	mov	r3, r1
 80052de:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d106      	bne.n	80052f4 <pbuf_realloc+0x20>
 80052e6:	4b4b      	ldr	r3, [pc, #300]	@ (8005414 <pbuf_realloc+0x140>)
 80052e8:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80052ec:	494a      	ldr	r1, [pc, #296]	@ (8005418 <pbuf_realloc+0x144>)
 80052ee:	484b      	ldr	r0, [pc, #300]	@ (800541c <pbuf_realloc+0x148>)
 80052f0:	f008 fa5c 	bl	800d7ac <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	7b1b      	ldrb	r3, [r3, #12]
 80052f8:	2b03      	cmp	r3, #3
 80052fa:	d012      	beq.n	8005322 <pbuf_realloc+0x4e>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	7b1b      	ldrb	r3, [r3, #12]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d00e      	beq.n	8005322 <pbuf_realloc+0x4e>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	7b1b      	ldrb	r3, [r3, #12]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00a      	beq.n	8005322 <pbuf_realloc+0x4e>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	7b1b      	ldrb	r3, [r3, #12]
 8005310:	2b02      	cmp	r3, #2
 8005312:	d006      	beq.n	8005322 <pbuf_realloc+0x4e>
 8005314:	4b3f      	ldr	r3, [pc, #252]	@ (8005414 <pbuf_realloc+0x140>)
 8005316:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800531a:	4941      	ldr	r1, [pc, #260]	@ (8005420 <pbuf_realloc+0x14c>)
 800531c:	483f      	ldr	r0, [pc, #252]	@ (800541c <pbuf_realloc+0x148>)
 800531e:	f008 fa45 	bl	800d7ac <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	891b      	ldrh	r3, [r3, #8]
 8005326:	887a      	ldrh	r2, [r7, #2]
 8005328:	429a      	cmp	r2, r3
 800532a:	d26e      	bcs.n	800540a <pbuf_realloc+0x136>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800532c:	887b      	ldrh	r3, [r7, #2]
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	8912      	ldrh	r2, [r2, #8]
 8005332:	1a9b      	subs	r3, r3, r2
 8005334:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005336:	887b      	ldrh	r3, [r7, #2]
 8005338:	827b      	strh	r3, [r7, #18]
  q = p;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800533e:	e025      	b.n	800538c <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	895b      	ldrh	r3, [r3, #10]
 8005344:	8a7a      	ldrh	r2, [r7, #18]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005350:	4293      	cmp	r3, r2
 8005352:	dd06      	ble.n	8005362 <pbuf_realloc+0x8e>
 8005354:	4b2f      	ldr	r3, [pc, #188]	@ (8005414 <pbuf_realloc+0x140>)
 8005356:	f240 220b 	movw	r2, #523	@ 0x20b
 800535a:	4932      	ldr	r1, [pc, #200]	@ (8005424 <pbuf_realloc+0x150>)
 800535c:	482f      	ldr	r0, [pc, #188]	@ (800541c <pbuf_realloc+0x148>)
 800535e:	f008 fa25 	bl	800d7ac <iprintf>
    q->tot_len += (u16_t)grow;
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	891a      	ldrh	r2, [r3, #8]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	b29b      	uxth	r3, r3
 800536a:	4413      	add	r3, r2
 800536c:	b29a      	uxth	r2, r3
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d106      	bne.n	800538c <pbuf_realloc+0xb8>
 800537e:	4b25      	ldr	r3, [pc, #148]	@ (8005414 <pbuf_realloc+0x140>)
 8005380:	f240 220f 	movw	r2, #527	@ 0x20f
 8005384:	4928      	ldr	r1, [pc, #160]	@ (8005428 <pbuf_realloc+0x154>)
 8005386:	4825      	ldr	r0, [pc, #148]	@ (800541c <pbuf_realloc+0x148>)
 8005388:	f008 fa10 	bl	800d7ac <iprintf>
  while (rem_len > q->len) {
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	895b      	ldrh	r3, [r3, #10]
 8005390:	8a7a      	ldrh	r2, [r7, #18]
 8005392:	429a      	cmp	r2, r3
 8005394:	d8d4      	bhi.n	8005340 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	7b1b      	ldrb	r3, [r3, #12]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d121      	bne.n	80053e2 <pbuf_realloc+0x10e>
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	895b      	ldrh	r3, [r3, #10]
 80053a2:	8a7a      	ldrh	r2, [r7, #18]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d01c      	beq.n	80053e2 <pbuf_realloc+0x10e>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	7b5b      	ldrb	r3, [r3, #13]
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d116      	bne.n	80053e2 <pbuf_realloc+0x10e>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	b29a      	uxth	r2, r3
 80053be:	8a7b      	ldrh	r3, [r7, #18]
 80053c0:	4413      	add	r3, r2
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	4619      	mov	r1, r3
 80053c6:	6978      	ldr	r0, [r7, #20]
 80053c8:	f7ff f958 	bl	800467c <mem_trim>
 80053cc:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d106      	bne.n	80053e2 <pbuf_realloc+0x10e>
 80053d4:	4b0f      	ldr	r3, [pc, #60]	@ (8005414 <pbuf_realloc+0x140>)
 80053d6:	f240 221d 	movw	r2, #541	@ 0x21d
 80053da:	4914      	ldr	r1, [pc, #80]	@ (800542c <pbuf_realloc+0x158>)
 80053dc:	480f      	ldr	r0, [pc, #60]	@ (800541c <pbuf_realloc+0x148>)
 80053de:	f008 f9e5 	bl	800d7ac <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	8a7a      	ldrh	r2, [r7, #18]
 80053e6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	895a      	ldrh	r2, [r3, #10]
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d004      	beq.n	8005402 <pbuf_realloc+0x12e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 f8dd 	bl	80055bc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	2200      	movs	r2, #0
 8005406:	601a      	str	r2, [r3, #0]
 8005408:	e000      	b.n	800540c <pbuf_realloc+0x138>
    return;
 800540a:	bf00      	nop

}
 800540c:	3718      	adds	r7, #24
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	0800e894 	.word	0x0800e894
 8005418:	0800ea50 	.word	0x0800ea50
 800541c:	0800e8e0 	.word	0x0800e8e0
 8005420:	0800ea68 	.word	0x0800ea68
 8005424:	0800ea84 	.word	0x0800ea84
 8005428:	0800ea98 	.word	0x0800ea98
 800542c:	0800eab0 	.word	0x0800eab0

08005430 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	460b      	mov	r3, r1
 800543a:	807b      	strh	r3, [r7, #2]
 800543c:	4613      	mov	r3, r2
 800543e:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d106      	bne.n	8005454 <pbuf_header_impl+0x24>
 8005446:	4b46      	ldr	r3, [pc, #280]	@ (8005560 <pbuf_header_impl+0x130>)
 8005448:	f240 223f 	movw	r2, #575	@ 0x23f
 800544c:	4945      	ldr	r1, [pc, #276]	@ (8005564 <pbuf_header_impl+0x134>)
 800544e:	4846      	ldr	r0, [pc, #280]	@ (8005568 <pbuf_header_impl+0x138>)
 8005450:	f008 f9ac 	bl	800d7ac <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 8005454:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d002      	beq.n	8005462 <pbuf_header_impl+0x32>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <pbuf_header_impl+0x36>
    return 0;
 8005462:	2300      	movs	r3, #0
 8005464:	e078      	b.n	8005558 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 8005466:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800546a:	2b00      	cmp	r3, #0
 800546c:	da10      	bge.n	8005490 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800546e:	887b      	ldrh	r3, [r7, #2]
 8005470:	425b      	negs	r3, r3
 8005472:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	895b      	ldrh	r3, [r3, #10]
 8005478:	89fa      	ldrh	r2, [r7, #14]
 800547a:	429a      	cmp	r2, r3
 800547c:	d90a      	bls.n	8005494 <pbuf_header_impl+0x64>
 800547e:	4b38      	ldr	r3, [pc, #224]	@ (8005560 <pbuf_header_impl+0x130>)
 8005480:	f240 2247 	movw	r2, #583	@ 0x247
 8005484:	4939      	ldr	r1, [pc, #228]	@ (800556c <pbuf_header_impl+0x13c>)
 8005486:	4838      	ldr	r0, [pc, #224]	@ (8005568 <pbuf_header_impl+0x138>)
 8005488:	f008 f990 	bl	800d7ac <iprintf>
 800548c:	2301      	movs	r3, #1
 800548e:	e063      	b.n	8005558 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8005490:	887b      	ldrh	r3, [r7, #2]
 8005492:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	7b1b      	ldrb	r3, [r3, #12]
 8005498:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 80054a0:	89bb      	ldrh	r3, [r7, #12]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d002      	beq.n	80054ac <pbuf_header_impl+0x7c>
 80054a6:	89bb      	ldrh	r3, [r7, #12]
 80054a8:	2b03      	cmp	r3, #3
 80054aa:	d112      	bne.n	80054d2 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685a      	ldr	r2, [r3, #4]
 80054b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80054b4:	425b      	negs	r3, r3
 80054b6:	441a      	add	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685a      	ldr	r2, [r3, #4]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	3310      	adds	r3, #16
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d238      	bcs.n	800553a <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e042      	b.n	8005558 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 80054d2:	89bb      	ldrh	r3, [r7, #12]
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d002      	beq.n	80054de <pbuf_header_impl+0xae>
 80054d8:	89bb      	ldrh	r3, [r7, #12]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d124      	bne.n	8005528 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80054de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	da0d      	bge.n	8005502 <pbuf_header_impl+0xd2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	895b      	ldrh	r3, [r3, #10]
 80054ea:	89fa      	ldrh	r2, [r7, #14]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d808      	bhi.n	8005502 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80054f8:	425b      	negs	r3, r3
 80054fa:	441a      	add	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	605a      	str	r2, [r3, #4]
 8005500:	e011      	b.n	8005526 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 8005502:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005506:	2b00      	cmp	r3, #0
 8005508:	dd0b      	ble.n	8005522 <pbuf_header_impl+0xf2>
 800550a:	787b      	ldrb	r3, [r7, #1]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d008      	beq.n	8005522 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005518:	425b      	negs	r3, r3
 800551a:	441a      	add	r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	605a      	str	r2, [r3, #4]
 8005520:	e001      	b.n	8005526 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005522:	2301      	movs	r3, #1
 8005524:	e018      	b.n	8005558 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8005526:	e008      	b.n	800553a <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8005528:	4b0d      	ldr	r3, [pc, #52]	@ (8005560 <pbuf_header_impl+0x130>)
 800552a:	f240 2277 	movw	r2, #631	@ 0x277
 800552e:	4910      	ldr	r1, [pc, #64]	@ (8005570 <pbuf_header_impl+0x140>)
 8005530:	480d      	ldr	r0, [pc, #52]	@ (8005568 <pbuf_header_impl+0x138>)
 8005532:	f008 f93b 	bl	800d7ac <iprintf>
    return 1;
 8005536:	2301      	movs	r3, #1
 8005538:	e00e      	b.n	8005558 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	895a      	ldrh	r2, [r3, #10]
 800553e:	887b      	ldrh	r3, [r7, #2]
 8005540:	4413      	add	r3, r2
 8005542:	b29a      	uxth	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	891a      	ldrh	r2, [r3, #8]
 800554c:	887b      	ldrh	r3, [r7, #2]
 800554e:	4413      	add	r3, r2
 8005550:	b29a      	uxth	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	0800e894 	.word	0x0800e894
 8005564:	0800eacc 	.word	0x0800eacc
 8005568:	0800e8e0 	.word	0x0800e8e0
 800556c:	0800ead8 	.word	0x0800ead8
 8005570:	0800eaf8 	.word	0x0800eaf8

08005574 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	460b      	mov	r3, r1
 800557e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 8005580:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005584:	2200      	movs	r2, #0
 8005586:	4619      	mov	r1, r3
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f7ff ff51 	bl	8005430 <pbuf_header_impl>
 800558e:	4603      	mov	r3, r0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	460b      	mov	r3, r1
 80055a2:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 80055a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80055a8:	2201      	movs	r2, #1
 80055aa:	4619      	mov	r1, r3
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f7ff ff3f 	bl	8005430 <pbuf_header_impl>
 80055b2:	4603      	mov	r3, r0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3708      	adds	r7, #8
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b086      	sub	sp, #24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10b      	bne.n	80055e2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d106      	bne.n	80055de <pbuf_free+0x22>
 80055d0:	4b3e      	ldr	r3, [pc, #248]	@ (80056cc <pbuf_free+0x110>)
 80055d2:	f240 22d2 	movw	r2, #722	@ 0x2d2
 80055d6:	493e      	ldr	r1, [pc, #248]	@ (80056d0 <pbuf_free+0x114>)
 80055d8:	483e      	ldr	r0, [pc, #248]	@ (80056d4 <pbuf_free+0x118>)
 80055da:	f008 f8e7 	bl	800d7ac <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80055de:	2300      	movs	r3, #0
 80055e0:	e070      	b.n	80056c4 <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	7b1b      	ldrb	r3, [r3, #12]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d012      	beq.n	8005610 <pbuf_free+0x54>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	7b1b      	ldrb	r3, [r3, #12]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d00e      	beq.n	8005610 <pbuf_free+0x54>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	7b1b      	ldrb	r3, [r3, #12]
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d00a      	beq.n	8005610 <pbuf_free+0x54>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	7b1b      	ldrb	r3, [r3, #12]
 80055fe:	2b03      	cmp	r3, #3
 8005600:	d006      	beq.n	8005610 <pbuf_free+0x54>
 8005602:	4b32      	ldr	r3, [pc, #200]	@ (80056cc <pbuf_free+0x110>)
 8005604:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8005608:	4933      	ldr	r1, [pc, #204]	@ (80056d8 <pbuf_free+0x11c>)
 800560a:	4832      	ldr	r0, [pc, #200]	@ (80056d4 <pbuf_free+0x118>)
 800560c:	f008 f8ce 	bl	800d7ac <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8005610:	2300      	movs	r3, #0
 8005612:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8005614:	e052      	b.n	80056bc <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	89db      	ldrh	r3, [r3, #14]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d106      	bne.n	800562c <pbuf_free+0x70>
 800561e:	4b2b      	ldr	r3, [pc, #172]	@ (80056cc <pbuf_free+0x110>)
 8005620:	f240 22eb 	movw	r2, #747	@ 0x2eb
 8005624:	492d      	ldr	r1, [pc, #180]	@ (80056dc <pbuf_free+0x120>)
 8005626:	482b      	ldr	r0, [pc, #172]	@ (80056d4 <pbuf_free+0x118>)
 8005628:	f008 f8c0 	bl	800d7ac <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	89db      	ldrh	r3, [r3, #14]
 8005630:	3b01      	subs	r3, #1
 8005632:	b29a      	uxth	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	81da      	strh	r2, [r3, #14]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	89db      	ldrh	r3, [r3, #14]
 800563c:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800563e:	8abb      	ldrh	r3, [r7, #20]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d139      	bne.n	80056b8 <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	7b1b      	ldrb	r3, [r3, #12]
 800564e:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	7b5b      	ldrb	r3, [r3, #13]
 8005654:	f003 0302 	and.w	r3, r3, #2
 8005658:	2b00      	cmp	r3, #0
 800565a:	d011      	beq.n	8005680 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d106      	bne.n	8005676 <pbuf_free+0xba>
 8005668:	4b18      	ldr	r3, [pc, #96]	@ (80056cc <pbuf_free+0x110>)
 800566a:	f240 22f9 	movw	r2, #761	@ 0x2f9
 800566e:	491c      	ldr	r1, [pc, #112]	@ (80056e0 <pbuf_free+0x124>)
 8005670:	4818      	ldr	r0, [pc, #96]	@ (80056d4 <pbuf_free+0x118>)
 8005672:	f008 f89b 	bl	800d7ac <iprintf>
        pc->custom_free_function(p);
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	4798      	blx	r3
 800567e:	e015      	b.n	80056ac <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8005680:	89fb      	ldrh	r3, [r7, #14]
 8005682:	2b03      	cmp	r3, #3
 8005684:	d104      	bne.n	8005690 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 8005686:	6879      	ldr	r1, [r7, #4]
 8005688:	2008      	movs	r0, #8
 800568a:	f7ff fa7b 	bl	8004b84 <memp_free>
 800568e:	e00d      	b.n	80056ac <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8005690:	89fb      	ldrh	r3, [r7, #14]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d002      	beq.n	800569c <pbuf_free+0xe0>
 8005696:	89fb      	ldrh	r3, [r7, #14]
 8005698:	2b02      	cmp	r3, #2
 800569a:	d104      	bne.n	80056a6 <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 800569c:	6879      	ldr	r1, [r7, #4]
 800569e:	2007      	movs	r0, #7
 80056a0:	f7ff fa70 	bl	8004b84 <memp_free>
 80056a4:	e002      	b.n	80056ac <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f7fe ff86 	bl	80045b8 <mem_free>
        }
      }
      count++;
 80056ac:	7dfb      	ldrb	r3, [r7, #23]
 80056ae:	3301      	adds	r3, #1
 80056b0:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	607b      	str	r3, [r7, #4]
 80056b6:	e001      	b.n	80056bc <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 80056b8:	2300      	movs	r3, #0
 80056ba:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1a9      	bne.n	8005616 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80056c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3718      	adds	r7, #24
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	0800e894 	.word	0x0800e894
 80056d0:	0800eacc 	.word	0x0800eacc
 80056d4:	0800e8e0 	.word	0x0800e8e0
 80056d8:	0800eb08 	.word	0x0800eb08
 80056dc:	0800eb20 	.word	0x0800eb20
 80056e0:	0800eb38 	.word	0x0800eb38

080056e4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80056ec:	2300      	movs	r3, #0
 80056ee:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80056f0:	e005      	b.n	80056fe <pbuf_clen+0x1a>
    ++len;
 80056f2:	89fb      	ldrh	r3, [r7, #14]
 80056f4:	3301      	adds	r3, #1
 80056f6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1f6      	bne.n	80056f2 <pbuf_clen+0xe>
  }
  return len;
 8005704:	89fb      	ldrh	r3, [r7, #14]
}
 8005706:	4618      	mov	r0, r3
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	bc80      	pop	{r7}
 800570e:	4770      	bx	lr

08005710 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d010      	beq.n	8005740 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	89db      	ldrh	r3, [r3, #14]
 8005722:	3301      	adds	r3, #1
 8005724:	b29a      	uxth	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	89db      	ldrh	r3, [r3, #14]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d106      	bne.n	8005740 <pbuf_ref+0x30>
 8005732:	4b05      	ldr	r3, [pc, #20]	@ (8005748 <pbuf_ref+0x38>)
 8005734:	f240 3239 	movw	r2, #825	@ 0x339
 8005738:	4904      	ldr	r1, [pc, #16]	@ (800574c <pbuf_ref+0x3c>)
 800573a:	4805      	ldr	r0, [pc, #20]	@ (8005750 <pbuf_ref+0x40>)
 800573c:	f008 f836 	bl	800d7ac <iprintf>
  }
}
 8005740:	bf00      	nop
 8005742:	3708      	adds	r7, #8
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	0800e894 	.word	0x0800e894
 800574c:	0800eb5c 	.word	0x0800eb5c
 8005750:	0800e8e0 	.word	0x0800e8e0

08005754 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d002      	beq.n	800576a <pbuf_cat+0x16>
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d107      	bne.n	800577a <pbuf_cat+0x26>
 800576a:	4b20      	ldr	r3, [pc, #128]	@ (80057ec <pbuf_cat+0x98>)
 800576c:	f44f 7253 	mov.w	r2, #844	@ 0x34c
 8005770:	491f      	ldr	r1, [pc, #124]	@ (80057f0 <pbuf_cat+0x9c>)
 8005772:	4820      	ldr	r0, [pc, #128]	@ (80057f4 <pbuf_cat+0xa0>)
 8005774:	f008 f81a 	bl	800d7ac <iprintf>
 8005778:	e034      	b.n	80057e4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	60fb      	str	r3, [r7, #12]
 800577e:	e00a      	b.n	8005796 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	891a      	ldrh	r2, [r3, #8]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	891b      	ldrh	r3, [r3, #8]
 8005788:	4413      	add	r3, r2
 800578a:	b29a      	uxth	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	60fb      	str	r3, [r7, #12]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1f0      	bne.n	8005780 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	891a      	ldrh	r2, [r3, #8]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	895b      	ldrh	r3, [r3, #10]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d006      	beq.n	80057b8 <pbuf_cat+0x64>
 80057aa:	4b10      	ldr	r3, [pc, #64]	@ (80057ec <pbuf_cat+0x98>)
 80057ac:	f240 3255 	movw	r2, #853	@ 0x355
 80057b0:	4911      	ldr	r1, [pc, #68]	@ (80057f8 <pbuf_cat+0xa4>)
 80057b2:	4810      	ldr	r0, [pc, #64]	@ (80057f4 <pbuf_cat+0xa0>)
 80057b4:	f007 fffa 	bl	800d7ac <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d006      	beq.n	80057ce <pbuf_cat+0x7a>
 80057c0:	4b0a      	ldr	r3, [pc, #40]	@ (80057ec <pbuf_cat+0x98>)
 80057c2:	f240 3256 	movw	r2, #854	@ 0x356
 80057c6:	490d      	ldr	r1, [pc, #52]	@ (80057fc <pbuf_cat+0xa8>)
 80057c8:	480a      	ldr	r0, [pc, #40]	@ (80057f4 <pbuf_cat+0xa0>)
 80057ca:	f007 ffef 	bl	800d7ac <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	891a      	ldrh	r2, [r3, #8]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	891b      	ldrh	r3, [r3, #8]
 80057d6:	4413      	add	r3, r2
 80057d8:	b29a      	uxth	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	683a      	ldr	r2, [r7, #0]
 80057e2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	0800e894 	.word	0x0800e894
 80057f0:	0800eb70 	.word	0x0800eb70
 80057f4:	0800e8e0 	.word	0x0800e8e0
 80057f8:	0800eba8 	.word	0x0800eba8
 80057fc:	0800ebd8 	.word	0x0800ebd8

08005800 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800580a:	2300      	movs	r3, #0
 800580c:	81fb      	strh	r3, [r7, #14]
 800580e:	2300      	movs	r3, #0
 8005810:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d008      	beq.n	800582a <pbuf_copy+0x2a>
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d005      	beq.n	800582a <pbuf_copy+0x2a>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	891a      	ldrh	r2, [r3, #8]
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	891b      	ldrh	r3, [r3, #8]
 8005826:	429a      	cmp	r2, r3
 8005828:	d209      	bcs.n	800583e <pbuf_copy+0x3e>
 800582a:	4b54      	ldr	r3, [pc, #336]	@ (800597c <pbuf_copy+0x17c>)
 800582c:	f44f 726f 	mov.w	r2, #956	@ 0x3bc
 8005830:	4953      	ldr	r1, [pc, #332]	@ (8005980 <pbuf_copy+0x180>)
 8005832:	4854      	ldr	r0, [pc, #336]	@ (8005984 <pbuf_copy+0x184>)
 8005834:	f007 ffba 	bl	800d7ac <iprintf>
 8005838:	f06f 030f 	mvn.w	r3, #15
 800583c:	e099      	b.n	8005972 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	895b      	ldrh	r3, [r3, #10]
 8005842:	461a      	mov	r2, r3
 8005844:	89fb      	ldrh	r3, [r7, #14]
 8005846:	1ad2      	subs	r2, r2, r3
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	895b      	ldrh	r3, [r3, #10]
 800584c:	4619      	mov	r1, r3
 800584e:	89bb      	ldrh	r3, [r7, #12]
 8005850:	1acb      	subs	r3, r1, r3
 8005852:	429a      	cmp	r2, r3
 8005854:	db05      	blt.n	8005862 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	895a      	ldrh	r2, [r3, #10]
 800585a:	89bb      	ldrh	r3, [r7, #12]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	817b      	strh	r3, [r7, #10]
 8005860:	e004      	b.n	800586c <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	895a      	ldrh	r2, [r3, #10]
 8005866:	89fb      	ldrh	r3, [r7, #14]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	89fb      	ldrh	r3, [r7, #14]
 8005872:	18d0      	adds	r0, r2, r3
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	685a      	ldr	r2, [r3, #4]
 8005878:	89bb      	ldrh	r3, [r7, #12]
 800587a:	4413      	add	r3, r2
 800587c:	897a      	ldrh	r2, [r7, #10]
 800587e:	4619      	mov	r1, r3
 8005880:	f008 f86f 	bl	800d962 <memcpy>
    offset_to += len;
 8005884:	89fa      	ldrh	r2, [r7, #14]
 8005886:	897b      	ldrh	r3, [r7, #10]
 8005888:	4413      	add	r3, r2
 800588a:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800588c:	89ba      	ldrh	r2, [r7, #12]
 800588e:	897b      	ldrh	r3, [r7, #10]
 8005890:	4413      	add	r3, r2
 8005892:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	895b      	ldrh	r3, [r3, #10]
 8005898:	89fa      	ldrh	r2, [r7, #14]
 800589a:	429a      	cmp	r2, r3
 800589c:	d906      	bls.n	80058ac <pbuf_copy+0xac>
 800589e:	4b37      	ldr	r3, [pc, #220]	@ (800597c <pbuf_copy+0x17c>)
 80058a0:	f240 32cd 	movw	r2, #973	@ 0x3cd
 80058a4:	4938      	ldr	r1, [pc, #224]	@ (8005988 <pbuf_copy+0x188>)
 80058a6:	4837      	ldr	r0, [pc, #220]	@ (8005984 <pbuf_copy+0x184>)
 80058a8:	f007 ff80 	bl	800d7ac <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	895b      	ldrh	r3, [r3, #10]
 80058b0:	89ba      	ldrh	r2, [r7, #12]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d906      	bls.n	80058c4 <pbuf_copy+0xc4>
 80058b6:	4b31      	ldr	r3, [pc, #196]	@ (800597c <pbuf_copy+0x17c>)
 80058b8:	f240 32ce 	movw	r2, #974	@ 0x3ce
 80058bc:	4933      	ldr	r1, [pc, #204]	@ (800598c <pbuf_copy+0x18c>)
 80058be:	4831      	ldr	r0, [pc, #196]	@ (8005984 <pbuf_copy+0x184>)
 80058c0:	f007 ff74 	bl	800d7ac <iprintf>
    if (offset_from >= p_from->len) {
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	895b      	ldrh	r3, [r3, #10]
 80058c8:	89ba      	ldrh	r2, [r7, #12]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d304      	bcc.n	80058d8 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 80058ce:	2300      	movs	r3, #0
 80058d0:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	895b      	ldrh	r3, [r3, #10]
 80058dc:	89fa      	ldrh	r2, [r7, #14]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d114      	bne.n	800590c <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 80058e2:	2300      	movs	r3, #0
 80058e4:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d10c      	bne.n	800590c <pbuf_copy+0x10c>
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d009      	beq.n	800590c <pbuf_copy+0x10c>
 80058f8:	4b20      	ldr	r3, [pc, #128]	@ (800597c <pbuf_copy+0x17c>)
 80058fa:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 80058fe:	4924      	ldr	r1, [pc, #144]	@ (8005990 <pbuf_copy+0x190>)
 8005900:	4820      	ldr	r0, [pc, #128]	@ (8005984 <pbuf_copy+0x184>)
 8005902:	f007 ff53 	bl	800d7ac <iprintf>
 8005906:	f06f 030f 	mvn.w	r3, #15
 800590a:	e032      	b.n	8005972 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d013      	beq.n	800593a <pbuf_copy+0x13a>
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	895a      	ldrh	r2, [r3, #10]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	891b      	ldrh	r3, [r3, #8]
 800591a:	429a      	cmp	r2, r3
 800591c:	d10d      	bne.n	800593a <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d009      	beq.n	800593a <pbuf_copy+0x13a>
 8005926:	4b15      	ldr	r3, [pc, #84]	@ (800597c <pbuf_copy+0x17c>)
 8005928:	f240 32dd 	movw	r2, #989	@ 0x3dd
 800592c:	4919      	ldr	r1, [pc, #100]	@ (8005994 <pbuf_copy+0x194>)
 800592e:	4815      	ldr	r0, [pc, #84]	@ (8005984 <pbuf_copy+0x184>)
 8005930:	f007 ff3c 	bl	800d7ac <iprintf>
 8005934:	f06f 0305 	mvn.w	r3, #5
 8005938:	e01b      	b.n	8005972 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d013      	beq.n	8005968 <pbuf_copy+0x168>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	895a      	ldrh	r2, [r3, #10]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	891b      	ldrh	r3, [r3, #8]
 8005948:	429a      	cmp	r2, r3
 800594a:	d10d      	bne.n	8005968 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d009      	beq.n	8005968 <pbuf_copy+0x168>
 8005954:	4b09      	ldr	r3, [pc, #36]	@ (800597c <pbuf_copy+0x17c>)
 8005956:	f240 32e2 	movw	r2, #994	@ 0x3e2
 800595a:	490e      	ldr	r1, [pc, #56]	@ (8005994 <pbuf_copy+0x194>)
 800595c:	4809      	ldr	r0, [pc, #36]	@ (8005984 <pbuf_copy+0x184>)
 800595e:	f007 ff25 	bl	800d7ac <iprintf>
 8005962:	f06f 0305 	mvn.w	r3, #5
 8005966:	e004      	b.n	8005972 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	f47f af67 	bne.w	800583e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	0800e894 	.word	0x0800e894
 8005980:	0800ec24 	.word	0x0800ec24
 8005984:	0800e8e0 	.word	0x0800e8e0
 8005988:	0800ec54 	.word	0x0800ec54
 800598c:	0800ec6c 	.word	0x0800ec6c
 8005990:	0800ec88 	.word	0x0800ec88
 8005994:	0800ec98 	.word	0x0800ec98

08005998 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b088      	sub	sp, #32
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	4611      	mov	r1, r2
 80059a4:	461a      	mov	r2, r3
 80059a6:	460b      	mov	r3, r1
 80059a8:	80fb      	strh	r3, [r7, #6]
 80059aa:	4613      	mov	r3, r2
 80059ac:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80059ae:	2300      	movs	r3, #0
 80059b0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d108      	bne.n	80059ca <pbuf_copy_partial+0x32>
 80059b8:	4b30      	ldr	r3, [pc, #192]	@ (8005a7c <pbuf_copy_partial+0xe4>)
 80059ba:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 80059be:	4930      	ldr	r1, [pc, #192]	@ (8005a80 <pbuf_copy_partial+0xe8>)
 80059c0:	4830      	ldr	r0, [pc, #192]	@ (8005a84 <pbuf_copy_partial+0xec>)
 80059c2:	f007 fef3 	bl	800d7ac <iprintf>
 80059c6:	2300      	movs	r3, #0
 80059c8:	e054      	b.n	8005a74 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d108      	bne.n	80059e2 <pbuf_copy_partial+0x4a>
 80059d0:	4b2a      	ldr	r3, [pc, #168]	@ (8005a7c <pbuf_copy_partial+0xe4>)
 80059d2:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80059d6:	492c      	ldr	r1, [pc, #176]	@ (8005a88 <pbuf_copy_partial+0xf0>)
 80059d8:	482a      	ldr	r0, [pc, #168]	@ (8005a84 <pbuf_copy_partial+0xec>)
 80059da:	f007 fee7 	bl	800d7ac <iprintf>
 80059de:	2300      	movs	r3, #0
 80059e0:	e048      	b.n	8005a74 <pbuf_copy_partial+0xdc>

  left = 0;
 80059e2:	2300      	movs	r3, #0
 80059e4:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d002      	beq.n	80059f2 <pbuf_copy_partial+0x5a>
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <pbuf_copy_partial+0x5e>
    return 0;
 80059f2:	2300      	movs	r3, #0
 80059f4:	e03e      	b.n	8005a74 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	61fb      	str	r3, [r7, #28]
 80059fa:	e034      	b.n	8005a66 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 80059fc:	88bb      	ldrh	r3, [r7, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00a      	beq.n	8005a18 <pbuf_copy_partial+0x80>
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	895b      	ldrh	r3, [r3, #10]
 8005a06:	88ba      	ldrh	r2, [r7, #4]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d305      	bcc.n	8005a18 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	895b      	ldrh	r3, [r3, #10]
 8005a10:	88ba      	ldrh	r2, [r7, #4]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	80bb      	strh	r3, [r7, #4]
 8005a16:	e023      	b.n	8005a60 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	895a      	ldrh	r2, [r3, #10]
 8005a1c:	88bb      	ldrh	r3, [r7, #4]
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8005a22:	8b3a      	ldrh	r2, [r7, #24]
 8005a24:	88fb      	ldrh	r3, [r7, #6]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d901      	bls.n	8005a2e <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 8005a2a:	88fb      	ldrh	r3, [r7, #6]
 8005a2c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8005a2e:	8b7b      	ldrh	r3, [r7, #26]
 8005a30:	68ba      	ldr	r2, [r7, #8]
 8005a32:	18d0      	adds	r0, r2, r3
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	88bb      	ldrh	r3, [r7, #4]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	8b3a      	ldrh	r2, [r7, #24]
 8005a3e:	4619      	mov	r1, r3
 8005a40:	f007 ff8f 	bl	800d962 <memcpy>
      copied_total += buf_copy_len;
 8005a44:	8afa      	ldrh	r2, [r7, #22]
 8005a46:	8b3b      	ldrh	r3, [r7, #24]
 8005a48:	4413      	add	r3, r2
 8005a4a:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8005a4c:	8b7a      	ldrh	r2, [r7, #26]
 8005a4e:	8b3b      	ldrh	r3, [r7, #24]
 8005a50:	4413      	add	r3, r2
 8005a52:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 8005a54:	88fa      	ldrh	r2, [r7, #6]
 8005a56:	8b3b      	ldrh	r3, [r7, #24]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	61fb      	str	r3, [r7, #28]
 8005a66:	88fb      	ldrh	r3, [r7, #6]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d002      	beq.n	8005a72 <pbuf_copy_partial+0xda>
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1c4      	bne.n	80059fc <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 8005a72:	8afb      	ldrh	r3, [r7, #22]
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3720      	adds	r7, #32
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	0800e894 	.word	0x0800e894
 8005a80:	0800ecc4 	.word	0x0800ecc4
 8005a84:	0800e8e0 	.word	0x0800e8e0
 8005a88:	0800ece4 	.word	0x0800ece4

08005a8c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8005a90:	bf00      	nop
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bc80      	pop	{r7}
 8005a96:	4770      	bx	lr

08005a98 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8005a9c:	f000 ff8c 	bl	80069b8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005aa0:	4b07      	ldr	r3, [pc, #28]	@ (8005ac0 <tcp_tmr+0x28>)
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	b2da      	uxtb	r2, r3
 8005aa8:	4b05      	ldr	r3, [pc, #20]	@ (8005ac0 <tcp_tmr+0x28>)
 8005aaa:	701a      	strb	r2, [r3, #0]
 8005aac:	4b04      	ldr	r3, [pc, #16]	@ (8005ac0 <tcp_tmr+0x28>)
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d001      	beq.n	8005abc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005ab8:	f000 fcba 	bl	8006430 <tcp_slowtmr>
  }
}
 8005abc:	bf00      	nop
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	20006c5d 	.word	0x20006c5d

08005ac4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	60fb      	str	r3, [r7, #12]
 8005ad2:	e00a      	b.n	8005aea <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ad8:	683a      	ldr	r2, [r7, #0]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d102      	bne.n	8005ae4 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	679a      	str	r2, [r3, #120]	@ 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	60fb      	str	r3, [r7, #12]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1f1      	bne.n	8005ad4 <tcp_remove_listener+0x10>
      }
   }
}
 8005af0:	bf00      	nop
 8005af2:	bf00      	nop
 8005af4:	3714      	adds	r7, #20
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bc80      	pop	{r7}
 8005afa:	4770      	bx	lr

08005afc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d105      	bne.n	8005b16 <tcp_listen_closed+0x1a>
 8005b0a:	4b13      	ldr	r3, [pc, #76]	@ (8005b58 <tcp_listen_closed+0x5c>)
 8005b0c:	22c0      	movs	r2, #192	@ 0xc0
 8005b0e:	4913      	ldr	r1, [pc, #76]	@ (8005b5c <tcp_listen_closed+0x60>)
 8005b10:	4813      	ldr	r0, [pc, #76]	@ (8005b60 <tcp_listen_closed+0x64>)
 8005b12:	f007 fe4b 	bl	800d7ac <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	7d1b      	ldrb	r3, [r3, #20]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d005      	beq.n	8005b2a <tcp_listen_closed+0x2e>
 8005b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8005b58 <tcp_listen_closed+0x5c>)
 8005b20:	22c1      	movs	r2, #193	@ 0xc1
 8005b22:	4910      	ldr	r1, [pc, #64]	@ (8005b64 <tcp_listen_closed+0x68>)
 8005b24:	480e      	ldr	r0, [pc, #56]	@ (8005b60 <tcp_listen_closed+0x64>)
 8005b26:	f007 fe41 	bl	800d7ac <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	60fb      	str	r3, [r7, #12]
 8005b2e:	e00b      	b.n	8005b48 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8005b30:	4a0d      	ldr	r2, [pc, #52]	@ (8005b68 <tcp_listen_closed+0x6c>)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6879      	ldr	r1, [r7, #4]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7ff ffc1 	bl	8005ac4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	3301      	adds	r3, #1
 8005b46:	60fb      	str	r3, [r7, #12]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2b03      	cmp	r3, #3
 8005b4c:	d9f0      	bls.n	8005b30 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8005b4e:	bf00      	nop
 8005b50:	bf00      	nop
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	0800ee18 	.word	0x0800ee18
 8005b5c:	0800ee48 	.word	0x0800ee48
 8005b60:	0800ee54 	.word	0x0800ee54
 8005b64:	0800ee7c 	.word	0x0800ee7c
 8005b68:	0801025c 	.word	0x0801025c

08005b6c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8005b6c:	b5b0      	push	{r4, r5, r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af02      	add	r7, sp, #8
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	460b      	mov	r3, r1
 8005b76:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005b78:	78fb      	ldrb	r3, [r7, #3]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d075      	beq.n	8005c6a <tcp_close_shutdown+0xfe>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	7d1b      	ldrb	r3, [r3, #20]
 8005b82:	2b04      	cmp	r3, #4
 8005b84:	d003      	beq.n	8005b8e <tcp_close_shutdown+0x22>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	7d1b      	ldrb	r3, [r3, #20]
 8005b8a:	2b07      	cmp	r3, #7
 8005b8c:	d16d      	bne.n	8005c6a <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d104      	bne.n	8005ba0 <tcp_close_shutdown+0x34>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b9a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8005b9e:	d064      	beq.n	8005c6a <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	7e9b      	ldrb	r3, [r3, #26]
 8005ba4:	f003 0310 	and.w	r3, r3, #16
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d106      	bne.n	8005bba <tcp_close_shutdown+0x4e>
 8005bac:	4b5b      	ldr	r3, [pc, #364]	@ (8005d1c <tcp_close_shutdown+0x1b0>)
 8005bae:	f240 120f 	movw	r2, #271	@ 0x10f
 8005bb2:	495b      	ldr	r1, [pc, #364]	@ (8005d20 <tcp_close_shutdown+0x1b4>)
 8005bb4:	485b      	ldr	r0, [pc, #364]	@ (8005d24 <tcp_close_shutdown+0x1b8>)
 8005bb6:	f007 fdf9 	bl	800d7ac <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005bc2:	687c      	ldr	r4, [r7, #4]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	1d1d      	adds	r5, r3, #4
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	8adb      	ldrh	r3, [r3, #22]
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	8b12      	ldrh	r2, [r2, #24]
 8005bd0:	9201      	str	r2, [sp, #4]
 8005bd2:	9300      	str	r3, [sp, #0]
 8005bd4:	462b      	mov	r3, r5
 8005bd6:	4622      	mov	r2, r4
 8005bd8:	f004 fe60 	bl	800a89c <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f001 f9a1 	bl	8006f24 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005be2:	4b51      	ldr	r3, [pc, #324]	@ (8005d28 <tcp_close_shutdown+0x1bc>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d105      	bne.n	8005bf8 <tcp_close_shutdown+0x8c>
 8005bec:	4b4e      	ldr	r3, [pc, #312]	@ (8005d28 <tcp_close_shutdown+0x1bc>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	4a4d      	ldr	r2, [pc, #308]	@ (8005d28 <tcp_close_shutdown+0x1bc>)
 8005bf4:	6013      	str	r3, [r2, #0]
 8005bf6:	e013      	b.n	8005c20 <tcp_close_shutdown+0xb4>
 8005bf8:	4b4b      	ldr	r3, [pc, #300]	@ (8005d28 <tcp_close_shutdown+0x1bc>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	60fb      	str	r3, [r7, #12]
 8005bfe:	e00c      	b.n	8005c1a <tcp_close_shutdown+0xae>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d104      	bne.n	8005c14 <tcp_close_shutdown+0xa8>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68da      	ldr	r2, [r3, #12]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	60da      	str	r2, [r3, #12]
 8005c12:	e005      	b.n	8005c20 <tcp_close_shutdown+0xb4>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	60fb      	str	r3, [r7, #12]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1ef      	bne.n	8005c00 <tcp_close_shutdown+0x94>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	60da      	str	r2, [r3, #12]
 8005c26:	4b41      	ldr	r3, [pc, #260]	@ (8005d2c <tcp_close_shutdown+0x1c0>)
 8005c28:	2201      	movs	r2, #1
 8005c2a:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	7d1b      	ldrb	r3, [r3, #20]
 8005c30:	2b04      	cmp	r3, #4
 8005c32:	d10c      	bne.n	8005c4e <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	220a      	movs	r2, #10
 8005c38:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8005c3a:	4b3d      	ldr	r3, [pc, #244]	@ (8005d30 <tcp_close_shutdown+0x1c4>)
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	60da      	str	r2, [r3, #12]
 8005c42:	4a3b      	ldr	r2, [pc, #236]	@ (8005d30 <tcp_close_shutdown+0x1c4>)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6013      	str	r3, [r2, #0]
 8005c48:	f005 f870 	bl	800ad2c <tcp_timer_needed>
 8005c4c:	e00b      	b.n	8005c66 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 8005c4e:	4b39      	ldr	r3, [pc, #228]	@ (8005d34 <tcp_close_shutdown+0x1c8>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d102      	bne.n	8005c5e <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8005c58:	f003 fcc2 	bl	80095e0 <tcp_trigger_input_pcb_close>
 8005c5c:	e003      	b.n	8005c66 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 8005c5e:	6879      	ldr	r1, [r7, #4]
 8005c60:	2001      	movs	r0, #1
 8005c62:	f7fe ff8f 	bl	8004b84 <memp_free>
        }
      }
      return ERR_OK;
 8005c66:	2300      	movs	r3, #0
 8005c68:	e053      	b.n	8005d12 <tcp_close_shutdown+0x1a6>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	7d1b      	ldrb	r3, [r3, #20]
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d03d      	beq.n	8005cee <tcp_close_shutdown+0x182>
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	dc47      	bgt.n	8005d06 <tcp_close_shutdown+0x19a>
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d002      	beq.n	8005c80 <tcp_close_shutdown+0x114>
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d02b      	beq.n	8005cd6 <tcp_close_shutdown+0x16a>
 8005c7e:	e042      	b.n	8005d06 <tcp_close_shutdown+0x19a>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	8adb      	ldrh	r3, [r3, #22]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d021      	beq.n	8005ccc <tcp_close_shutdown+0x160>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8005c88:	4b2b      	ldr	r3, [pc, #172]	@ (8005d38 <tcp_close_shutdown+0x1cc>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d105      	bne.n	8005c9e <tcp_close_shutdown+0x132>
 8005c92:	4b29      	ldr	r3, [pc, #164]	@ (8005d38 <tcp_close_shutdown+0x1cc>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	4a27      	ldr	r2, [pc, #156]	@ (8005d38 <tcp_close_shutdown+0x1cc>)
 8005c9a:	6013      	str	r3, [r2, #0]
 8005c9c:	e013      	b.n	8005cc6 <tcp_close_shutdown+0x15a>
 8005c9e:	4b26      	ldr	r3, [pc, #152]	@ (8005d38 <tcp_close_shutdown+0x1cc>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	60bb      	str	r3, [r7, #8]
 8005ca4:	e00c      	b.n	8005cc0 <tcp_close_shutdown+0x154>
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d104      	bne.n	8005cba <tcp_close_shutdown+0x14e>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	68da      	ldr	r2, [r3, #12]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	60da      	str	r2, [r3, #12]
 8005cb8:	e005      	b.n	8005cc6 <tcp_close_shutdown+0x15a>
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	60bb      	str	r3, [r7, #8]
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1ef      	bne.n	8005ca6 <tcp_close_shutdown+0x13a>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8005ccc:	6879      	ldr	r1, [r7, #4]
 8005cce:	2001      	movs	r0, #1
 8005cd0:	f7fe ff58 	bl	8004b84 <memp_free>
    break;
 8005cd4:	e01c      	b.n	8005d10 <tcp_close_shutdown+0x1a4>
  case LISTEN:
    tcp_listen_closed(pcb);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f7ff ff10 	bl	8005afc <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8005cdc:	6879      	ldr	r1, [r7, #4]
 8005cde:	4817      	ldr	r0, [pc, #92]	@ (8005d3c <tcp_close_shutdown+0x1d0>)
 8005ce0:	f001 f962 	bl	8006fa8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8005ce4:	6879      	ldr	r1, [r7, #4]
 8005ce6:	2002      	movs	r0, #2
 8005ce8:	f7fe ff4c 	bl	8004b84 <memp_free>
    break;
 8005cec:	e010      	b.n	8005d10 <tcp_close_shutdown+0x1a4>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8005cee:	6879      	ldr	r1, [r7, #4]
 8005cf0:	480d      	ldr	r0, [pc, #52]	@ (8005d28 <tcp_close_shutdown+0x1bc>)
 8005cf2:	f001 f959 	bl	8006fa8 <tcp_pcb_remove>
 8005cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8005d2c <tcp_close_shutdown+0x1c0>)
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8005cfc:	6879      	ldr	r1, [r7, #4]
 8005cfe:	2001      	movs	r0, #1
 8005d00:	f7fe ff40 	bl	8004b84 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 8005d04:	e004      	b.n	8005d10 <tcp_close_shutdown+0x1a4>
  default:
    return tcp_close_shutdown_fin(pcb);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f81a 	bl	8005d40 <tcp_close_shutdown_fin>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	e000      	b.n	8005d12 <tcp_close_shutdown+0x1a6>
  }
  return ERR_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bdb0      	pop	{r4, r5, r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	0800ee18 	.word	0x0800ee18
 8005d20:	0800ee94 	.word	0x0800ee94
 8005d24:	0800ee54 	.word	0x0800ee54
 8005d28:	20006c54 	.word	0x20006c54
 8005d2c:	20006c5c 	.word	0x20006c5c
 8005d30:	20006c58 	.word	0x20006c58
 8005d34:	20006c94 	.word	0x20006c94
 8005d38:	20006c4c 	.word	0x20006c4c
 8005d3c:	20006c50 	.word	0x20006c50

08005d40 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d106      	bne.n	8005d5c <tcp_close_shutdown_fin+0x1c>
 8005d4e:	4b2e      	ldr	r3, [pc, #184]	@ (8005e08 <tcp_close_shutdown_fin+0xc8>)
 8005d50:	f240 124d 	movw	r2, #333	@ 0x14d
 8005d54:	492d      	ldr	r1, [pc, #180]	@ (8005e0c <tcp_close_shutdown_fin+0xcc>)
 8005d56:	482e      	ldr	r0, [pc, #184]	@ (8005e10 <tcp_close_shutdown_fin+0xd0>)
 8005d58:	f007 fd28 	bl	800d7ac <iprintf>

  switch (pcb->state) {
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	7d1b      	ldrb	r3, [r3, #20]
 8005d60:	2b07      	cmp	r3, #7
 8005d62:	d020      	beq.n	8005da6 <tcp_close_shutdown_fin+0x66>
 8005d64:	2b07      	cmp	r3, #7
 8005d66:	dc2b      	bgt.n	8005dc0 <tcp_close_shutdown_fin+0x80>
 8005d68:	2b03      	cmp	r3, #3
 8005d6a:	d002      	beq.n	8005d72 <tcp_close_shutdown_fin+0x32>
 8005d6c:	2b04      	cmp	r3, #4
 8005d6e:	d00d      	beq.n	8005d8c <tcp_close_shutdown_fin+0x4c>
 8005d70:	e026      	b.n	8005dc0 <tcp_close_shutdown_fin+0x80>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f003 fcbe 	bl	80096f4 <tcp_send_fin>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8005d7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d11f      	bne.n	8005dc4 <tcp_close_shutdown_fin+0x84>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2205      	movs	r2, #5
 8005d88:	751a      	strb	r2, [r3, #20]
    }
    break;
 8005d8a:	e01b      	b.n	8005dc4 <tcp_close_shutdown_fin+0x84>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f003 fcb1 	bl	80096f4 <tcp_send_fin>
 8005d92:	4603      	mov	r3, r0
 8005d94:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8005d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d114      	bne.n	8005dc8 <tcp_close_shutdown_fin+0x88>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2205      	movs	r2, #5
 8005da2:	751a      	strb	r2, [r3, #20]
    }
    break;
 8005da4:	e010      	b.n	8005dc8 <tcp_close_shutdown_fin+0x88>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f003 fca4 	bl	80096f4 <tcp_send_fin>
 8005dac:	4603      	mov	r3, r0
 8005dae:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8005db0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d109      	bne.n	8005dcc <tcp_close_shutdown_fin+0x8c>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2209      	movs	r2, #9
 8005dbc:	751a      	strb	r2, [r3, #20]
    }
    break;
 8005dbe:	e005      	b.n	8005dcc <tcp_close_shutdown_fin+0x8c>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	e01c      	b.n	8005dfe <tcp_close_shutdown_fin+0xbe>
    break;
 8005dc4:	bf00      	nop
 8005dc6:	e002      	b.n	8005dce <tcp_close_shutdown_fin+0x8e>
    break;
 8005dc8:	bf00      	nop
 8005dca:	e000      	b.n	8005dce <tcp_close_shutdown_fin+0x8e>
    break;
 8005dcc:	bf00      	nop
  }

  if (err == ERR_OK) {
 8005dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d103      	bne.n	8005dde <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f004 fadc 	bl	800a394 <tcp_output>
 8005ddc:	e00d      	b.n	8005dfa <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8005dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de6:	d108      	bne.n	8005dfa <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	7e9b      	ldrb	r3, [r3, #26]
 8005dec:	f043 0308 	orr.w	r3, r3, #8
 8005df0:	b2da      	uxtb	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8005df6:	2300      	movs	r3, #0
 8005df8:	e001      	b.n	8005dfe <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8005dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	0800ee18 	.word	0x0800ee18
 8005e0c:	0800ee48 	.word	0x0800ee48
 8005e10:	0800ee54 	.word	0x0800ee54

08005e14 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	7d1b      	ldrb	r3, [r3, #20]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d006      	beq.n	8005e32 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	7e9b      	ldrb	r3, [r3, #26]
 8005e28:	f043 0310 	orr.w	r3, r3, #16
 8005e2c:	b2da      	uxtb	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8005e32:	2101      	movs	r1, #1
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f7ff fe99 	bl	8005b6c <tcp_close_shutdown>
 8005e3a:	4603      	mov	r3, r0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3708      	adds	r7, #8
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b08c      	sub	sp, #48	@ 0x30
 8005e48:	af02      	add	r7, sp, #8
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	7d1b      	ldrb	r3, [r3, #20]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d106      	bne.n	8005e64 <tcp_abandon+0x20>
 8005e56:	4b4d      	ldr	r3, [pc, #308]	@ (8005f8c <tcp_abandon+0x148>)
 8005e58:	f240 12df 	movw	r2, #479	@ 0x1df
 8005e5c:	494c      	ldr	r1, [pc, #304]	@ (8005f90 <tcp_abandon+0x14c>)
 8005e5e:	484d      	ldr	r0, [pc, #308]	@ (8005f94 <tcp_abandon+0x150>)
 8005e60:	f007 fca4 	bl	800d7ac <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	7d1b      	ldrb	r3, [r3, #20]
 8005e68:	2b0a      	cmp	r3, #10
 8005e6a:	d108      	bne.n	8005e7e <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8005e6c:	6879      	ldr	r1, [r7, #4]
 8005e6e:	484a      	ldr	r0, [pc, #296]	@ (8005f98 <tcp_abandon+0x154>)
 8005e70:	f001 f89a 	bl	8006fa8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8005e74:	6879      	ldr	r1, [r7, #4]
 8005e76:	2001      	movs	r0, #1
 8005e78:	f7fe fe84 	bl	8004b84 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 8005e7c:	e081      	b.n	8005f82 <tcp_abandon+0x13e>
    int send_rst = 0;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8005e82:	2300      	movs	r3, #0
 8005e84:	847b      	strh	r3, [r7, #34]	@ 0x22
    seqno = pcb->snd_nxt;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e8a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e90:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e98:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	7d1b      	ldrb	r3, [r3, #20]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d126      	bne.n	8005ef6 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	8adb      	ldrh	r3, [r3, #22]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d02e      	beq.n	8005f0e <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005eb0:	4b3a      	ldr	r3, [pc, #232]	@ (8005f9c <tcp_abandon+0x158>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d105      	bne.n	8005ec6 <tcp_abandon+0x82>
 8005eba:	4b38      	ldr	r3, [pc, #224]	@ (8005f9c <tcp_abandon+0x158>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	4a36      	ldr	r2, [pc, #216]	@ (8005f9c <tcp_abandon+0x158>)
 8005ec2:	6013      	str	r3, [r2, #0]
 8005ec4:	e013      	b.n	8005eee <tcp_abandon+0xaa>
 8005ec6:	4b35      	ldr	r3, [pc, #212]	@ (8005f9c <tcp_abandon+0x158>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	61fb      	str	r3, [r7, #28]
 8005ecc:	e00c      	b.n	8005ee8 <tcp_abandon+0xa4>
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d104      	bne.n	8005ee2 <tcp_abandon+0x9e>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	68da      	ldr	r2, [r3, #12]
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	60da      	str	r2, [r3, #12]
 8005ee0:	e005      	b.n	8005eee <tcp_abandon+0xaa>
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	61fb      	str	r3, [r7, #28]
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1ef      	bne.n	8005ece <tcp_abandon+0x8a>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	60da      	str	r2, [r3, #12]
 8005ef4:	e00b      	b.n	8005f0e <tcp_abandon+0xca>
      send_rst = reset;
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	8adb      	ldrh	r3, [r3, #22]
 8005efe:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005f00:	6879      	ldr	r1, [r7, #4]
 8005f02:	4827      	ldr	r0, [pc, #156]	@ (8005fa0 <tcp_abandon+0x15c>)
 8005f04:	f001 f850 	bl	8006fa8 <tcp_pcb_remove>
 8005f08:	4b26      	ldr	r3, [pc, #152]	@ (8005fa4 <tcp_abandon+0x160>)
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d004      	beq.n	8005f20 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f000 fe19 	bl	8006b52 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d004      	beq.n	8005f32 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f000 fe10 	bl	8006b52 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d004      	beq.n	8005f44 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f000 fe07 	bl	8006b52 <tcp_segs_free>
    if (send_rst) {
 8005f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00c      	beq.n	8005f64 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	1d19      	adds	r1, r3, #4
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	8b1b      	ldrh	r3, [r3, #24]
 8005f54:	9301      	str	r3, [sp, #4]
 8005f56:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005f58:	9300      	str	r3, [sp, #0]
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	6979      	ldr	r1, [r7, #20]
 8005f5e:	69b8      	ldr	r0, [r7, #24]
 8005f60:	f004 fc9c 	bl	800a89c <tcp_rst>
    last_state = pcb->state;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	7d1b      	ldrb	r3, [r3, #20]
 8005f68:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 8005f6a:	6879      	ldr	r1, [r7, #4]
 8005f6c:	2001      	movs	r0, #1
 8005f6e:	f7fe fe09 	bl	8004b84 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d004      	beq.n	8005f82 <tcp_abandon+0x13e>
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	f06f 010c 	mvn.w	r1, #12
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	4798      	blx	r3
}
 8005f82:	bf00      	nop
 8005f84:	3728      	adds	r7, #40	@ 0x28
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	0800ee18 	.word	0x0800ee18
 8005f90:	0800eeb0 	.word	0x0800eeb0
 8005f94:	0800ee54 	.word	0x0800ee54
 8005f98:	20006c58 	.word	0x20006c58
 8005f9c:	20006c4c 	.word	0x20006c4c
 8005fa0:	20006c54 	.word	0x20006c54
 8005fa4:	20006c5c 	.word	0x20006c5c

08005fa8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8005fb0:	2101      	movs	r1, #1
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f7ff ff46 	bl	8005e44 <tcp_abandon>
}
 8005fb8:	bf00      	nop
 8005fba:	3708      	adds	r7, #8
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b088      	sub	sp, #32
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8005fce:	2304      	movs	r3, #4
 8005fd0:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d101      	bne.n	8005fdc <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8005fd8:	4b3c      	ldr	r3, [pc, #240]	@ (80060cc <tcp_bind+0x10c>)
 8005fda:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d002      	beq.n	8005fe8 <tcp_bind+0x28>
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d102      	bne.n	8005fee <tcp_bind+0x2e>
    return ERR_VAL;
 8005fe8:	f06f 0305 	mvn.w	r3, #5
 8005fec:	e06a      	b.n	80060c4 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	7d1b      	ldrb	r3, [r3, #20]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d009      	beq.n	800600a <tcp_bind+0x4a>
 8005ff6:	4b36      	ldr	r3, [pc, #216]	@ (80060d0 <tcp_bind+0x110>)
 8005ff8:	f44f 7211 	mov.w	r2, #580	@ 0x244
 8005ffc:	4935      	ldr	r1, [pc, #212]	@ (80060d4 <tcp_bind+0x114>)
 8005ffe:	4836      	ldr	r0, [pc, #216]	@ (80060d8 <tcp_bind+0x118>)
 8006000:	f007 fbd4 	bl	800d7ac <iprintf>
 8006004:	f06f 0305 	mvn.w	r3, #5
 8006008:	e05c      	b.n	80060c4 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 800600a:	88fb      	ldrh	r3, [r7, #6]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d109      	bne.n	8006024 <tcp_bind+0x64>
    port = tcp_new_port();
 8006010:	f000 f9ca 	bl	80063a8 <tcp_new_port>
 8006014:	4603      	mov	r3, r0
 8006016:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8006018:	88fb      	ldrh	r3, [r7, #6]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d135      	bne.n	800608a <tcp_bind+0xca>
      return ERR_BUF;
 800601e:	f06f 0301 	mvn.w	r3, #1
 8006022:	e04f      	b.n	80060c4 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8006024:	2300      	movs	r3, #0
 8006026:	61fb      	str	r3, [r7, #28]
 8006028:	e02b      	b.n	8006082 <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800602a:	4a2c      	ldr	r2, [pc, #176]	@ (80060dc <tcp_bind+0x11c>)
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	61bb      	str	r3, [r7, #24]
 8006036:	e01e      	b.n	8006076 <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	8adb      	ldrh	r3, [r3, #22]
 800603c:	88fa      	ldrh	r2, [r7, #6]
 800603e:	429a      	cmp	r2, r3
 8006040:	d116      	bne.n	8006070 <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8006042:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8006044:	2b00      	cmp	r3, #0
 8006046:	d010      	beq.n	800606a <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00c      	beq.n	800606a <tcp_bind+0xaa>
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d009      	beq.n	800606a <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d005      	beq.n	800606a <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8006066:	429a      	cmp	r2, r3
 8006068:	d102      	bne.n	8006070 <tcp_bind+0xb0>
              return ERR_USE;
 800606a:	f06f 0307 	mvn.w	r3, #7
 800606e:	e029      	b.n	80060c4 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	61bb      	str	r3, [r7, #24]
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1dd      	bne.n	8006038 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	3301      	adds	r3, #1
 8006080:	61fb      	str	r3, [r7, #28]
 8006082:	69fa      	ldr	r2, [r7, #28]
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	429a      	cmp	r2, r3
 8006088:	dbcf      	blt.n	800602a <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00c      	beq.n	80060aa <tcp_bind+0xea>
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d008      	beq.n	80060aa <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d002      	beq.n	80060a4 <tcp_bind+0xe4>
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	e000      	b.n	80060a6 <tcp_bind+0xe6>
 80060a4:	2300      	movs	r3, #0
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	88fa      	ldrh	r2, [r7, #6]
 80060ae:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80060b0:	4b0b      	ldr	r3, [pc, #44]	@ (80060e0 <tcp_bind+0x120>)
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	60da      	str	r2, [r3, #12]
 80060b8:	4a09      	ldr	r2, [pc, #36]	@ (80060e0 <tcp_bind+0x120>)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6013      	str	r3, [r2, #0]
 80060be:	f004 fe35 	bl	800ad2c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3720      	adds	r7, #32
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	08010284 	.word	0x08010284
 80060d0:	0800ee18 	.word	0x0800ee18
 80060d4:	0800eee4 	.word	0x0800eee4
 80060d8:	0800ee54 	.word	0x0800ee54
 80060dc:	0801025c 	.word	0x0801025c
 80060e0:	20006c4c 	.word	0x20006c4c

080060e4 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	4613      	mov	r3, r2
 80060f0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 80060f2:	68b8      	ldr	r0, [r7, #8]
 80060f4:	f7ff ff58 	bl	8005fa8 <tcp_abort>

  return ERR_ABRT;
 80060f8:	f06f 030c 	mvn.w	r3, #12
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3710      	adds	r7, #16
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	460b      	mov	r3, r1
 800610e:	70fb      	strb	r3, [r7, #3]
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8006110:	78fb      	ldrb	r3, [r7, #3]
 8006112:	2200      	movs	r2, #0
 8006114:	4619      	mov	r1, r3
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f806 	bl	8006128 <tcp_listen_with_backlog_and_err>
 800611c:	4603      	mov	r3, r0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3708      	adds	r7, #8
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
	...

08006128 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b088      	sub	sp, #32
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	460b      	mov	r3, r1
 8006132:	607a      	str	r2, [r7, #4]
 8006134:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8006136:	2300      	movs	r3, #0
 8006138:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	7d1b      	ldrb	r3, [r3, #20]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d009      	beq.n	8006156 <tcp_listen_with_backlog_and_err+0x2e>
 8006142:	4b3f      	ldr	r3, [pc, #252]	@ (8006240 <tcp_listen_with_backlog_and_err+0x118>)
 8006144:	f44f 722d 	mov.w	r2, #692	@ 0x2b4
 8006148:	493e      	ldr	r1, [pc, #248]	@ (8006244 <tcp_listen_with_backlog_and_err+0x11c>)
 800614a:	483f      	ldr	r0, [pc, #252]	@ (8006248 <tcp_listen_with_backlog_and_err+0x120>)
 800614c:	f007 fb2e 	bl	800d7ac <iprintf>
 8006150:	23f1      	movs	r3, #241	@ 0xf1
 8006152:	76fb      	strb	r3, [r7, #27]
 8006154:	e069      	b.n	800622a <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	7d1b      	ldrb	r3, [r3, #20]
 800615a:	2b01      	cmp	r3, #1
 800615c:	d104      	bne.n	8006168 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8006162:	23f7      	movs	r3, #247	@ 0xf7
 8006164:	76fb      	strb	r3, [r7, #27]
    goto done;
 8006166:	e060      	b.n	800622a <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8006168:	2002      	movs	r0, #2
 800616a:	f7fe fcbf 	bl	8004aec <memp_malloc>
 800616e:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d102      	bne.n	800617c <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 8006176:	23ff      	movs	r3, #255	@ 0xff
 8006178:	76fb      	strb	r3, [r7, #27]
    goto done;
 800617a:	e056      	b.n	800622a <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	691a      	ldr	r2, [r3, #16]
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	8ada      	ldrh	r2, [r3, #22]
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	2201      	movs	r2, #1
 8006190:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	7d5a      	ldrb	r2, [r3, #21]
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	7a1a      	ldrb	r2, [r3, #8]
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	7a9a      	ldrb	r2, [r3, #10]
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	7a5a      	ldrb	r2, [r3, #9]
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	8adb      	ldrh	r3, [r3, #22]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d021      	beq.n	8006206 <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80061c2:	4b22      	ldr	r3, [pc, #136]	@ (800624c <tcp_listen_with_backlog_and_err+0x124>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d105      	bne.n	80061d8 <tcp_listen_with_backlog_and_err+0xb0>
 80061cc:	4b1f      	ldr	r3, [pc, #124]	@ (800624c <tcp_listen_with_backlog_and_err+0x124>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	4a1e      	ldr	r2, [pc, #120]	@ (800624c <tcp_listen_with_backlog_and_err+0x124>)
 80061d4:	6013      	str	r3, [r2, #0]
 80061d6:	e013      	b.n	8006200 <tcp_listen_with_backlog_and_err+0xd8>
 80061d8:	4b1c      	ldr	r3, [pc, #112]	@ (800624c <tcp_listen_with_backlog_and_err+0x124>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	617b      	str	r3, [r7, #20]
 80061de:	e00c      	b.n	80061fa <tcp_listen_with_backlog_and_err+0xd2>
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d104      	bne.n	80061f4 <tcp_listen_with_backlog_and_err+0xcc>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	68da      	ldr	r2, [r3, #12]
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	60da      	str	r2, [r3, #12]
 80061f2:	e005      	b.n	8006200 <tcp_listen_with_backlog_and_err+0xd8>
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	617b      	str	r3, [r7, #20]
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1ef      	bne.n	80061e0 <tcp_listen_with_backlog_and_err+0xb8>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 8006206:	68f9      	ldr	r1, [r7, #12]
 8006208:	2001      	movs	r0, #1
 800620a:	f7fe fcbb 	bl	8004b84 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	4a0f      	ldr	r2, [pc, #60]	@ (8006250 <tcp_listen_with_backlog_and_err+0x128>)
 8006212:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8006214:	4b0f      	ldr	r3, [pc, #60]	@ (8006254 <tcp_listen_with_backlog_and_err+0x12c>)
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	60da      	str	r2, [r3, #12]
 800621c:	4a0d      	ldr	r2, [pc, #52]	@ (8006254 <tcp_listen_with_backlog_and_err+0x12c>)
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	6013      	str	r3, [r2, #0]
 8006222:	f004 fd83 	bl	800ad2c <tcp_timer_needed>
  res = ERR_OK;
 8006226:	2300      	movs	r3, #0
 8006228:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d002      	beq.n	8006236 <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	7efa      	ldrb	r2, [r7, #27]
 8006234:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8006236:	69fb      	ldr	r3, [r7, #28]
}
 8006238:	4618      	mov	r0, r3
 800623a:	3720      	adds	r7, #32
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	0800ee18 	.word	0x0800ee18
 8006244:	0800ef0c 	.word	0x0800ef0c
 8006248:	0800ee54 	.word	0x0800ee54
 800624c:	20006c4c 	.word	0x20006c4c
 8006250:	080060e5 	.word	0x080060e5
 8006254:	20006c50 	.word	0x20006c50

08006258 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8006268:	4413      	add	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8006274:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8006278:	bf28      	it	cs
 800627a:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800627e:	b292      	uxth	r2, r2
 8006280:	4413      	add	r3, r2
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	db08      	blt.n	800629c <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	e020      	b.n	80062de <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	dd03      	ble.n	80062b2 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80062b0:	e014      	b.n	80062dc <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062c4:	d306      	bcc.n	80062d4 <tcp_update_rcv_ann_wnd+0x7c>
 80062c6:	4b08      	ldr	r3, [pc, #32]	@ (80062e8 <tcp_update_rcv_ann_wnd+0x90>)
 80062c8:	f44f 7242 	mov.w	r2, #776	@ 0x308
 80062cc:	4907      	ldr	r1, [pc, #28]	@ (80062ec <tcp_update_rcv_ann_wnd+0x94>)
 80062ce:	4808      	ldr	r0, [pc, #32]	@ (80062f0 <tcp_update_rcv_ann_wnd+0x98>)
 80062d0:	f007 fa6c 	bl	800d7ac <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80062dc:	2300      	movs	r3, #0
  }
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	0800ee18 	.word	0x0800ee18
 80062ec:	0800ef30 	.word	0x0800ef30
 80062f0:	0800ee54 	.word	0x0800ee54

080062f4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	460b      	mov	r3, r1
 80062fe:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	7d1b      	ldrb	r3, [r3, #20]
 8006304:	2b01      	cmp	r3, #1
 8006306:	d106      	bne.n	8006316 <tcp_recved+0x22>
 8006308:	4b23      	ldr	r3, [pc, #140]	@ (8006398 <tcp_recved+0xa4>)
 800630a:	f240 321f 	movw	r2, #799	@ 0x31f
 800630e:	4923      	ldr	r1, [pc, #140]	@ (800639c <tcp_recved+0xa8>)
 8006310:	4823      	ldr	r0, [pc, #140]	@ (80063a0 <tcp_recved+0xac>)
 8006312:	f007 fa4b 	bl	800d7ac <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800631a:	887b      	ldrh	r3, [r7, #2]
 800631c:	4413      	add	r3, r2
 800631e:	b29a      	uxth	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	851a      	strh	r2, [r3, #40]	@ 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006328:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800632c:	d904      	bls.n	8006338 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8006334:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006336:	e017      	b.n	8006368 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800633c:	2b00      	cmp	r3, #0
 800633e:	d113      	bne.n	8006368 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	7d1b      	ldrb	r3, [r3, #20]
 8006344:	2b07      	cmp	r3, #7
 8006346:	d003      	beq.n	8006350 <tcp_recved+0x5c>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	7d1b      	ldrb	r3, [r3, #20]
 800634c:	2b09      	cmp	r3, #9
 800634e:	d104      	bne.n	800635a <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8006356:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006358:	e006      	b.n	8006368 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800635a:	4b0f      	ldr	r3, [pc, #60]	@ (8006398 <tcp_recved+0xa4>)
 800635c:	f240 322d 	movw	r2, #813	@ 0x32d
 8006360:	4910      	ldr	r1, [pc, #64]	@ (80063a4 <tcp_recved+0xb0>)
 8006362:	480f      	ldr	r0, [pc, #60]	@ (80063a0 <tcp_recved+0xac>)
 8006364:	f007 fa22 	bl	800d7ac <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f7ff ff75 	bl	8006258 <tcp_update_rcv_ann_wnd>
 800636e:	4603      	mov	r3, r0
 8006370:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8006378:	db09      	blt.n	800638e <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	7e9b      	ldrb	r3, [r3, #26]
 800637e:	f043 0302 	orr.w	r3, r3, #2
 8006382:	b2da      	uxtb	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f004 f803 	bl	800a394 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800638e:	bf00      	nop
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	0800ee18 	.word	0x0800ee18
 800639c:	0800ef4c 	.word	0x0800ef4c
 80063a0:	0800ee54 	.word	0x0800ee54
 80063a4:	0800ef74 	.word	0x0800ef74

080063a8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80063ae:	2300      	movs	r3, #0
 80063b0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 80063b2:	4b1d      	ldr	r3, [pc, #116]	@ (8006428 <tcp_new_port+0x80>)
 80063b4:	881b      	ldrh	r3, [r3, #0]
 80063b6:	1c5a      	adds	r2, r3, #1
 80063b8:	b291      	uxth	r1, r2
 80063ba:	4a1b      	ldr	r2, [pc, #108]	@ (8006428 <tcp_new_port+0x80>)
 80063bc:	8011      	strh	r1, [r2, #0]
 80063be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d103      	bne.n	80063ce <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80063c6:	4b18      	ldr	r3, [pc, #96]	@ (8006428 <tcp_new_port+0x80>)
 80063c8:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80063cc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80063ce:	2300      	movs	r3, #0
 80063d0:	71fb      	strb	r3, [r7, #7]
 80063d2:	e01e      	b.n	8006412 <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80063d4:	79fb      	ldrb	r3, [r7, #7]
 80063d6:	4a15      	ldr	r2, [pc, #84]	@ (800642c <tcp_new_port+0x84>)
 80063d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	603b      	str	r3, [r7, #0]
 80063e0:	e011      	b.n	8006406 <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	8ada      	ldrh	r2, [r3, #22]
 80063e6:	4b10      	ldr	r3, [pc, #64]	@ (8006428 <tcp_new_port+0x80>)
 80063e8:	881b      	ldrh	r3, [r3, #0]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d108      	bne.n	8006400 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80063ee:	88bb      	ldrh	r3, [r7, #4]
 80063f0:	3301      	adds	r3, #1
 80063f2:	80bb      	strh	r3, [r7, #4]
 80063f4:	88bb      	ldrh	r3, [r7, #4]
 80063f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063fa:	d3da      	bcc.n	80063b2 <tcp_new_port+0xa>
          return 0;
 80063fc:	2300      	movs	r3, #0
 80063fe:	e00d      	b.n	800641c <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	603b      	str	r3, [r7, #0]
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1ea      	bne.n	80063e2 <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800640c:	79fb      	ldrb	r3, [r7, #7]
 800640e:	3301      	adds	r3, #1
 8006410:	71fb      	strb	r3, [r7, #7]
 8006412:	79fb      	ldrb	r3, [r7, #7]
 8006414:	2b03      	cmp	r3, #3
 8006416:	d9dd      	bls.n	80063d4 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8006418:	4b03      	ldr	r3, [pc, #12]	@ (8006428 <tcp_new_port+0x80>)
 800641a:	881b      	ldrh	r3, [r3, #0]
}
 800641c:	4618      	mov	r0, r3
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	bc80      	pop	{r7}
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	2000000a 	.word	0x2000000a
 800642c:	0801025c 	.word	0x0801025c

08006430 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006430:	b5b0      	push	{r4, r5, r7, lr}
 8006432:	b08c      	sub	sp, #48	@ 0x30
 8006434:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8006436:	2300      	movs	r3, #0
 8006438:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800643a:	4b98      	ldr	r3, [pc, #608]	@ (800669c <tcp_slowtmr+0x26c>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	3301      	adds	r3, #1
 8006440:	4a96      	ldr	r2, [pc, #600]	@ (800669c <tcp_slowtmr+0x26c>)
 8006442:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006444:	4b96      	ldr	r3, [pc, #600]	@ (80066a0 <tcp_slowtmr+0x270>)
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	3301      	adds	r3, #1
 800644a:	b2da      	uxtb	r2, r3
 800644c:	4b94      	ldr	r3, [pc, #592]	@ (80066a0 <tcp_slowtmr+0x270>)
 800644e:	701a      	strb	r2, [r3, #0]
 8006450:	e000      	b.n	8006454 <tcp_slowtmr+0x24>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8006452:	bf00      	nop
  prev = NULL;
 8006454:	2300      	movs	r3, #0
 8006456:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 8006458:	4b92      	ldr	r3, [pc, #584]	@ (80066a4 <tcp_slowtmr+0x274>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 800645e:	e227      	b.n	80068b0 <tcp_slowtmr+0x480>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006462:	7d1b      	ldrb	r3, [r3, #20]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d106      	bne.n	8006476 <tcp_slowtmr+0x46>
 8006468:	4b8f      	ldr	r3, [pc, #572]	@ (80066a8 <tcp_slowtmr+0x278>)
 800646a:	f44f 727c 	mov.w	r2, #1008	@ 0x3f0
 800646e:	498f      	ldr	r1, [pc, #572]	@ (80066ac <tcp_slowtmr+0x27c>)
 8006470:	488f      	ldr	r0, [pc, #572]	@ (80066b0 <tcp_slowtmr+0x280>)
 8006472:	f007 f99b 	bl	800d7ac <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006478:	7d1b      	ldrb	r3, [r3, #20]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d106      	bne.n	800648c <tcp_slowtmr+0x5c>
 800647e:	4b8a      	ldr	r3, [pc, #552]	@ (80066a8 <tcp_slowtmr+0x278>)
 8006480:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8006484:	498b      	ldr	r1, [pc, #556]	@ (80066b4 <tcp_slowtmr+0x284>)
 8006486:	488a      	ldr	r0, [pc, #552]	@ (80066b0 <tcp_slowtmr+0x280>)
 8006488:	f007 f990 	bl	800d7ac <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800648c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648e:	7d1b      	ldrb	r3, [r3, #20]
 8006490:	2b0a      	cmp	r3, #10
 8006492:	d106      	bne.n	80064a2 <tcp_slowtmr+0x72>
 8006494:	4b84      	ldr	r3, [pc, #528]	@ (80066a8 <tcp_slowtmr+0x278>)
 8006496:	f240 32f2 	movw	r2, #1010	@ 0x3f2
 800649a:	4987      	ldr	r1, [pc, #540]	@ (80066b8 <tcp_slowtmr+0x288>)
 800649c:	4884      	ldr	r0, [pc, #528]	@ (80066b0 <tcp_slowtmr+0x280>)
 800649e:	f007 f985 	bl	800d7ac <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80064a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a4:	7f5a      	ldrb	r2, [r3, #29]
 80064a6:	4b7e      	ldr	r3, [pc, #504]	@ (80066a0 <tcp_slowtmr+0x270>)
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d103      	bne.n	80064b6 <tcp_slowtmr+0x86>
      pcb = pcb->next;
 80064ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	627b      	str	r3, [r7, #36]	@ 0x24
      continue;
 80064b4:	e1fc      	b.n	80068b0 <tcp_slowtmr+0x480>
    pcb->last_timer = tcp_timer_ctr;
 80064b6:	4b7a      	ldr	r3, [pc, #488]	@ (80066a0 <tcp_slowtmr+0x270>)
 80064b8:	781a      	ldrb	r2, [r3, #0]
 80064ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064bc:	775a      	strb	r2, [r3, #29]
    pcb_remove = 0;
 80064be:	2300      	movs	r3, #0
 80064c0:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 80064c2:	2300      	movs	r3, #0
 80064c4:	77bb      	strb	r3, [r7, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80064c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c8:	7d1b      	ldrb	r3, [r3, #20]
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d108      	bne.n	80064e0 <tcp_slowtmr+0xb0>
 80064ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80064d4:	2b05      	cmp	r3, #5
 80064d6:	d903      	bls.n	80064e0 <tcp_slowtmr+0xb0>
      ++pcb_remove;
 80064d8:	7ffb      	ldrb	r3, [r7, #31]
 80064da:	3301      	adds	r3, #1
 80064dc:	77fb      	strb	r3, [r7, #31]
 80064de:	e0a2      	b.n	8006626 <tcp_slowtmr+0x1f6>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 80064e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80064e6:	2b0b      	cmp	r3, #11
 80064e8:	d903      	bls.n	80064f2 <tcp_slowtmr+0xc2>
      ++pcb_remove;
 80064ea:	7ffb      	ldrb	r3, [r7, #31]
 80064ec:	3301      	adds	r3, #1
 80064ee:	77fb      	strb	r3, [r7, #31]
 80064f0:	e099      	b.n	8006626 <tcp_slowtmr+0x1f6>
      if (pcb->persist_backoff > 0) {
 80064f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f4:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d032      	beq.n	8006562 <tcp_slowtmr+0x132>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 80064fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fe:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8006502:	3b01      	subs	r3, #1
 8006504:	4a6d      	ldr	r2, [pc, #436]	@ (80066bc <tcp_slowtmr+0x28c>)
 8006506:	5cd3      	ldrb	r3, [r2, r3]
 8006508:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 800650a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650c:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 8006510:	7cfa      	ldrb	r2, [r7, #19]
 8006512:	429a      	cmp	r2, r3
 8006514:	d907      	bls.n	8006526 <tcp_slowtmr+0xf6>
          pcb->persist_cnt++;
 8006516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006518:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 800651c:	3301      	adds	r3, #1
 800651e:	b2da      	uxtb	r2, r3
 8006520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006522:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 8006526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006528:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 800652c:	7cfa      	ldrb	r2, [r7, #19]
 800652e:	429a      	cmp	r2, r3
 8006530:	d879      	bhi.n	8006626 <tcp_slowtmr+0x1f6>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8006532:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006534:	f004 fb39 	bl	800abaa <tcp_zero_window_probe>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d173      	bne.n	8006626 <tcp_slowtmr+0x1f6>
            pcb->persist_cnt = 0;
 800653e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006540:	2200      	movs	r2, #0
 8006542:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006548:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800654c:	2b06      	cmp	r3, #6
 800654e:	d86a      	bhi.n	8006626 <tcp_slowtmr+0x1f6>
              pcb->persist_backoff++;
 8006550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006552:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8006556:	3301      	adds	r3, #1
 8006558:	b2da      	uxtb	r2, r3
 800655a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655c:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
 8006560:	e061      	b.n	8006626 <tcp_slowtmr+0x1f6>
        if (pcb->rtime >= 0) {
 8006562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006564:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8006568:	2b00      	cmp	r3, #0
 800656a:	db08      	blt.n	800657e <tcp_slowtmr+0x14e>
          ++pcb->rtime;
 800656c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800656e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8006572:	b29b      	uxth	r3, r3
 8006574:	3301      	adds	r3, #1
 8006576:	b29b      	uxth	r3, r3
 8006578:	b21a      	sxth	r2, r3
 800657a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800657c:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800657e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006580:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006582:	2b00      	cmp	r3, #0
 8006584:	d04f      	beq.n	8006626 <tcp_slowtmr+0x1f6>
 8006586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006588:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800658c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800658e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8006592:	429a      	cmp	r2, r3
 8006594:	db47      	blt.n	8006626 <tcp_slowtmr+0x1f6>
          if (pcb->state != SYN_SENT) {
 8006596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006598:	7d1b      	ldrb	r3, [r3, #20]
 800659a:	2b02      	cmp	r3, #2
 800659c:	d018      	beq.n	80065d0 <tcp_slowtmr+0x1a0>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800659e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80065a4:	2b0c      	cmp	r3, #12
 80065a6:	bf28      	it	cs
 80065a8:	230c      	movcs	r3, #12
 80065aa:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80065ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ae:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80065b2:	10db      	asrs	r3, r3, #3
 80065b4:	b21b      	sxth	r3, r3
 80065b6:	461a      	mov	r2, r3
 80065b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ba:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80065be:	4413      	add	r3, r2
 80065c0:	7dfa      	ldrb	r2, [r7, #23]
 80065c2:	493f      	ldr	r1, [pc, #252]	@ (80066c0 <tcp_slowtmr+0x290>)
 80065c4:	5c8a      	ldrb	r2, [r1, r2]
 80065c6:	4093      	lsls	r3, r2
 80065c8:	b21a      	sxth	r2, r3
 80065ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065cc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
          pcb->rtime = 0;
 80065d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d2:	2200      	movs	r2, #0
 80065d4:	861a      	strh	r2, [r3, #48]	@ 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80065d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80065dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065de:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80065e2:	4293      	cmp	r3, r2
 80065e4:	bf28      	it	cs
 80065e6:	4613      	movcs	r3, r2
 80065e8:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 80065ea:	8abb      	ldrh	r3, [r7, #20]
 80065ec:	085b      	lsrs	r3, r3, #1
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f2:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80065f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80065fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065fe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006600:	005b      	lsls	r3, r3, #1
 8006602:	b29b      	uxth	r3, r3
 8006604:	429a      	cmp	r2, r3
 8006606:	d206      	bcs.n	8006616 <tcp_slowtmr+0x1e6>
            pcb->ssthresh = (pcb->mss << 1);
 8006608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800660a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800660c:	005b      	lsls	r3, r3, #1
 800660e:	b29a      	uxth	r2, r3
 8006610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006612:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
          pcb->cwnd = pcb->mss;
 8006616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006618:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800661a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
          tcp_rexmit_rto(pcb);
 8006620:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006622:	f004 f9b1 	bl	800a988 <tcp_rexmit_rto>
    if (pcb->state == FIN_WAIT_2) {
 8006626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006628:	7d1b      	ldrb	r3, [r3, #20]
 800662a:	2b06      	cmp	r3, #6
 800662c:	d10f      	bne.n	800664e <tcp_slowtmr+0x21e>
      if (pcb->flags & TF_RXCLOSED) {
 800662e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006630:	7e9b      	ldrb	r3, [r3, #26]
 8006632:	f003 0310 	and.w	r3, r3, #16
 8006636:	2b00      	cmp	r3, #0
 8006638:	d009      	beq.n	800664e <tcp_slowtmr+0x21e>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800663a:	4b18      	ldr	r3, [pc, #96]	@ (800669c <tcp_slowtmr+0x26c>)
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	2b28      	cmp	r3, #40	@ 0x28
 8006646:	d902      	bls.n	800664e <tcp_slowtmr+0x21e>
          ++pcb_remove;
 8006648:	7ffb      	ldrb	r3, [r7, #31]
 800664a:	3301      	adds	r3, #1
 800664c:	77fb      	strb	r3, [r7, #31]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800664e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006650:	7a1b      	ldrb	r3, [r3, #8]
 8006652:	f003 0308 	and.w	r3, r3, #8
 8006656:	2b00      	cmp	r3, #0
 8006658:	d05d      	beq.n	8006716 <tcp_slowtmr+0x2e6>
       ((pcb->state == ESTABLISHED) ||
 800665a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665c:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800665e:	2b04      	cmp	r3, #4
 8006660:	d003      	beq.n	800666a <tcp_slowtmr+0x23a>
        (pcb->state == CLOSE_WAIT))) {
 8006662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006664:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 8006666:	2b07      	cmp	r3, #7
 8006668:	d155      	bne.n	8006716 <tcp_slowtmr+0x2e6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800666a:	4b0c      	ldr	r3, [pc, #48]	@ (800669c <tcp_slowtmr+0x26c>)
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006670:	6a1b      	ldr	r3, [r3, #32]
 8006672:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8006674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800667a:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 800667e:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8006682:	4910      	ldr	r1, [pc, #64]	@ (80066c4 <tcp_slowtmr+0x294>)
 8006684:	fba1 1303 	umull	r1, r3, r1, r3
 8006688:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800668a:	429a      	cmp	r2, r3
 800668c:	d91c      	bls.n	80066c8 <tcp_slowtmr+0x298>
        ++pcb_remove;
 800668e:	7ffb      	ldrb	r3, [r7, #31]
 8006690:	3301      	adds	r3, #1
 8006692:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 8006694:	7fbb      	ldrb	r3, [r7, #30]
 8006696:	3301      	adds	r3, #1
 8006698:	77bb      	strb	r3, [r7, #30]
 800669a:	e03c      	b.n	8006716 <tcp_slowtmr+0x2e6>
 800669c:	20006c48 	.word	0x20006c48
 80066a0:	20006c5e 	.word	0x20006c5e
 80066a4:	20006c54 	.word	0x20006c54
 80066a8:	0800ee18 	.word	0x0800ee18
 80066ac:	0800efc8 	.word	0x0800efc8
 80066b0:	0800ee54 	.word	0x0800ee54
 80066b4:	0800eff4 	.word	0x0800eff4
 80066b8:	0800f020 	.word	0x0800f020
 80066bc:	08010254 	.word	0x08010254
 80066c0:	08010244 	.word	0x08010244
 80066c4:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80066c8:	4b97      	ldr	r3, [pc, #604]	@ (8006928 <tcp_slowtmr+0x4f8>)
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ce:	6a1b      	ldr	r3, [r3, #32]
 80066d0:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80066d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d4:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 80066d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066da:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 80066de:	4618      	mov	r0, r3
 80066e0:	4b92      	ldr	r3, [pc, #584]	@ (800692c <tcp_slowtmr+0x4fc>)
 80066e2:	fb00 f303 	mul.w	r3, r0, r3
 80066e6:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 80066e8:	4991      	ldr	r1, [pc, #580]	@ (8006930 <tcp_slowtmr+0x500>)
 80066ea:	fba1 1303 	umull	r1, r3, r1, r3
 80066ee:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d910      	bls.n	8006716 <tcp_slowtmr+0x2e6>
        err = tcp_keepalive(pcb);
 80066f4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80066f6:	f004 fa1b 	bl	800ab30 <tcp_keepalive>
 80066fa:	4603      	mov	r3, r0
 80066fc:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 80066fe:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d107      	bne.n	8006716 <tcp_slowtmr+0x2e6>
          pcb->keep_cnt_sent++;
 8006706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006708:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 800670c:	3301      	adds	r3, #1
 800670e:	b2da      	uxtb	r2, r3
 8006710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006712:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
    if (pcb->ooseq != NULL &&
 8006716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800671a:	2b00      	cmp	r3, #0
 800671c:	d016      	beq.n	800674c <tcp_slowtmr+0x31c>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800671e:	4b82      	ldr	r3, [pc, #520]	@ (8006928 <tcp_slowtmr+0x4f8>)
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	1ad2      	subs	r2, r2, r3
 8006728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800672e:	4619      	mov	r1, r3
 8006730:	460b      	mov	r3, r1
 8006732:	005b      	lsls	r3, r3, #1
 8006734:	440b      	add	r3, r1
 8006736:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8006738:	429a      	cmp	r2, r3
 800673a:	d307      	bcc.n	800674c <tcp_slowtmr+0x31c>
      tcp_segs_free(pcb->ooseq);
 800673c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006740:	4618      	mov	r0, r3
 8006742:	f000 fa06 	bl	8006b52 <tcp_segs_free>
      pcb->ooseq = NULL;
 8006746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006748:	2200      	movs	r2, #0
 800674a:	671a      	str	r2, [r3, #112]	@ 0x70
    if (pcb->state == SYN_RCVD) {
 800674c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674e:	7d1b      	ldrb	r3, [r3, #20]
 8006750:	2b03      	cmp	r3, #3
 8006752:	d109      	bne.n	8006768 <tcp_slowtmr+0x338>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006754:	4b74      	ldr	r3, [pc, #464]	@ (8006928 <tcp_slowtmr+0x4f8>)
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675a:	6a1b      	ldr	r3, [r3, #32]
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	2b28      	cmp	r3, #40	@ 0x28
 8006760:	d902      	bls.n	8006768 <tcp_slowtmr+0x338>
        ++pcb_remove;
 8006762:	7ffb      	ldrb	r3, [r7, #31]
 8006764:	3301      	adds	r3, #1
 8006766:	77fb      	strb	r3, [r7, #31]
    if (pcb->state == LAST_ACK) {
 8006768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676a:	7d1b      	ldrb	r3, [r3, #20]
 800676c:	2b09      	cmp	r3, #9
 800676e:	d109      	bne.n	8006784 <tcp_slowtmr+0x354>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006770:	4b6d      	ldr	r3, [pc, #436]	@ (8006928 <tcp_slowtmr+0x4f8>)
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006776:	6a1b      	ldr	r3, [r3, #32]
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	2bf0      	cmp	r3, #240	@ 0xf0
 800677c:	d902      	bls.n	8006784 <tcp_slowtmr+0x354>
        ++pcb_remove;
 800677e:	7ffb      	ldrb	r3, [r7, #31]
 8006780:	3301      	adds	r3, #1
 8006782:	77fb      	strb	r3, [r7, #31]
    if (pcb_remove) {
 8006784:	7ffb      	ldrb	r3, [r7, #31]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d05d      	beq.n	8006846 <tcp_slowtmr+0x416>
      tcp_err_fn err_fn = pcb->errf;
 800678a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006790:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8006792:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006794:	f000 fbc6 	bl	8006f24 <tcp_pcb_purge>
      if (prev != NULL) {
 8006798:	6a3b      	ldr	r3, [r7, #32]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d010      	beq.n	80067c0 <tcp_slowtmr+0x390>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800679e:	4b65      	ldr	r3, [pc, #404]	@ (8006934 <tcp_slowtmr+0x504>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d106      	bne.n	80067b6 <tcp_slowtmr+0x386>
 80067a8:	4b63      	ldr	r3, [pc, #396]	@ (8006938 <tcp_slowtmr+0x508>)
 80067aa:	f240 4289 	movw	r2, #1161	@ 0x489
 80067ae:	4963      	ldr	r1, [pc, #396]	@ (800693c <tcp_slowtmr+0x50c>)
 80067b0:	4863      	ldr	r0, [pc, #396]	@ (8006940 <tcp_slowtmr+0x510>)
 80067b2:	f006 fffb 	bl	800d7ac <iprintf>
        prev->next = pcb->next;
 80067b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b8:	68da      	ldr	r2, [r3, #12]
 80067ba:	6a3b      	ldr	r3, [r7, #32]
 80067bc:	60da      	str	r2, [r3, #12]
 80067be:	e00f      	b.n	80067e0 <tcp_slowtmr+0x3b0>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80067c0:	4b5c      	ldr	r3, [pc, #368]	@ (8006934 <tcp_slowtmr+0x504>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d006      	beq.n	80067d8 <tcp_slowtmr+0x3a8>
 80067ca:	4b5b      	ldr	r3, [pc, #364]	@ (8006938 <tcp_slowtmr+0x508>)
 80067cc:	f240 428d 	movw	r2, #1165	@ 0x48d
 80067d0:	495c      	ldr	r1, [pc, #368]	@ (8006944 <tcp_slowtmr+0x514>)
 80067d2:	485b      	ldr	r0, [pc, #364]	@ (8006940 <tcp_slowtmr+0x510>)
 80067d4:	f006 ffea 	bl	800d7ac <iprintf>
        tcp_active_pcbs = pcb->next;
 80067d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	4a55      	ldr	r2, [pc, #340]	@ (8006934 <tcp_slowtmr+0x504>)
 80067de:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 80067e0:	7fbb      	ldrb	r3, [r7, #30]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d010      	beq.n	8006808 <tcp_slowtmr+0x3d8>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80067e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e8:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80067ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ec:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80067ee:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 80067f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f2:	1d1d      	adds	r5, r3, #4
 80067f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f6:	8adb      	ldrh	r3, [r3, #22]
 80067f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067fa:	8b12      	ldrh	r2, [r2, #24]
 80067fc:	9201      	str	r2, [sp, #4]
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	462b      	mov	r3, r5
 8006802:	4622      	mov	r2, r4
 8006804:	f004 f84a 	bl	800a89c <tcp_rst>
      err_arg = pcb->callback_arg;
 8006808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800680e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006810:	7d1b      	ldrb	r3, [r3, #20]
 8006812:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8006814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006816:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8006818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	627b      	str	r3, [r7, #36]	@ 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800681e:	6839      	ldr	r1, [r7, #0]
 8006820:	2001      	movs	r0, #1
 8006822:	f7fe f9af 	bl	8004b84 <memp_free>
      tcp_active_pcbs_changed = 0;
 8006826:	4b48      	ldr	r3, [pc, #288]	@ (8006948 <tcp_slowtmr+0x518>)
 8006828:	2200      	movs	r2, #0
 800682a:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d004      	beq.n	800683c <tcp_slowtmr+0x40c>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f06f 010c 	mvn.w	r1, #12
 8006838:	68b8      	ldr	r0, [r7, #8]
 800683a:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800683c:	4b42      	ldr	r3, [pc, #264]	@ (8006948 <tcp_slowtmr+0x518>)
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d035      	beq.n	80068b0 <tcp_slowtmr+0x480>
        goto tcp_slowtmr_start;
 8006844:	e606      	b.n	8006454 <tcp_slowtmr+0x24>
      prev = pcb;
 8006846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006848:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800684a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	627b      	str	r3, [r7, #36]	@ 0x24
      ++prev->polltmr;
 8006850:	6a3b      	ldr	r3, [r7, #32]
 8006852:	7edb      	ldrb	r3, [r3, #27]
 8006854:	3301      	adds	r3, #1
 8006856:	b2da      	uxtb	r2, r3
 8006858:	6a3b      	ldr	r3, [r7, #32]
 800685a:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800685c:	6a3b      	ldr	r3, [r7, #32]
 800685e:	7eda      	ldrb	r2, [r3, #27]
 8006860:	6a3b      	ldr	r3, [r7, #32]
 8006862:	7f1b      	ldrb	r3, [r3, #28]
 8006864:	429a      	cmp	r2, r3
 8006866:	d323      	bcc.n	80068b0 <tcp_slowtmr+0x480>
        prev->polltmr = 0;
 8006868:	6a3b      	ldr	r3, [r7, #32]
 800686a:	2200      	movs	r2, #0
 800686c:	76da      	strb	r2, [r3, #27]
        tcp_active_pcbs_changed = 0;
 800686e:	4b36      	ldr	r3, [pc, #216]	@ (8006948 <tcp_slowtmr+0x518>)
 8006870:	2200      	movs	r2, #0
 8006872:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8006874:	6a3b      	ldr	r3, [r7, #32]
 8006876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00a      	beq.n	8006894 <tcp_slowtmr+0x464>
 800687e:	6a3b      	ldr	r3, [r7, #32]
 8006880:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006884:	6a3a      	ldr	r2, [r7, #32]
 8006886:	6912      	ldr	r2, [r2, #16]
 8006888:	6a39      	ldr	r1, [r7, #32]
 800688a:	4610      	mov	r0, r2
 800688c:	4798      	blx	r3
 800688e:	4603      	mov	r3, r0
 8006890:	777b      	strb	r3, [r7, #29]
 8006892:	e001      	b.n	8006898 <tcp_slowtmr+0x468>
 8006894:	2300      	movs	r3, #0
 8006896:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8006898:	4b2b      	ldr	r3, [pc, #172]	@ (8006948 <tcp_slowtmr+0x518>)
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	f47f add8 	bne.w	8006452 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80068a2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d102      	bne.n	80068b0 <tcp_slowtmr+0x480>
          tcp_output(prev);
 80068aa:	6a38      	ldr	r0, [r7, #32]
 80068ac:	f003 fd72 	bl	800a394 <tcp_output>
  while (pcb != NULL) {
 80068b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f47f add4 	bne.w	8006460 <tcp_slowtmr+0x30>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80068b8:	2300      	movs	r3, #0
 80068ba:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 80068bc:	4b23      	ldr	r3, [pc, #140]	@ (800694c <tcp_slowtmr+0x51c>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 80068c2:	e068      	b.n	8006996 <tcp_slowtmr+0x566>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80068c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c6:	7d1b      	ldrb	r3, [r3, #20]
 80068c8:	2b0a      	cmp	r3, #10
 80068ca:	d006      	beq.n	80068da <tcp_slowtmr+0x4aa>
 80068cc:	4b1a      	ldr	r3, [pc, #104]	@ (8006938 <tcp_slowtmr+0x508>)
 80068ce:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 80068d2:	491f      	ldr	r1, [pc, #124]	@ (8006950 <tcp_slowtmr+0x520>)
 80068d4:	481a      	ldr	r0, [pc, #104]	@ (8006940 <tcp_slowtmr+0x510>)
 80068d6:	f006 ff69 	bl	800d7ac <iprintf>
    pcb_remove = 0;
 80068da:	2300      	movs	r3, #0
 80068dc:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80068de:	4b12      	ldr	r3, [pc, #72]	@ (8006928 <tcp_slowtmr+0x4f8>)
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	2bf0      	cmp	r3, #240	@ 0xf0
 80068ea:	d902      	bls.n	80068f2 <tcp_slowtmr+0x4c2>
      ++pcb_remove;
 80068ec:	7ffb      	ldrb	r3, [r7, #31]
 80068ee:	3301      	adds	r3, #1
 80068f0:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80068f2:	7ffb      	ldrb	r3, [r7, #31]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d049      	beq.n	800698c <tcp_slowtmr+0x55c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80068f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80068fa:	f000 fb13 	bl	8006f24 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80068fe:	6a3b      	ldr	r3, [r7, #32]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d029      	beq.n	8006958 <tcp_slowtmr+0x528>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006904:	4b11      	ldr	r3, [pc, #68]	@ (800694c <tcp_slowtmr+0x51c>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800690a:	429a      	cmp	r2, r3
 800690c:	d106      	bne.n	800691c <tcp_slowtmr+0x4ec>
 800690e:	4b0a      	ldr	r3, [pc, #40]	@ (8006938 <tcp_slowtmr+0x508>)
 8006910:	f240 42cb 	movw	r2, #1227	@ 0x4cb
 8006914:	490f      	ldr	r1, [pc, #60]	@ (8006954 <tcp_slowtmr+0x524>)
 8006916:	480a      	ldr	r0, [pc, #40]	@ (8006940 <tcp_slowtmr+0x510>)
 8006918:	f006 ff48 	bl	800d7ac <iprintf>
        prev->next = pcb->next;
 800691c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800691e:	68da      	ldr	r2, [r3, #12]
 8006920:	6a3b      	ldr	r3, [r7, #32]
 8006922:	60da      	str	r2, [r3, #12]
 8006924:	e028      	b.n	8006978 <tcp_slowtmr+0x548>
 8006926:	bf00      	nop
 8006928:	20006c48 	.word	0x20006c48
 800692c:	000124f8 	.word	0x000124f8
 8006930:	10624dd3 	.word	0x10624dd3
 8006934:	20006c54 	.word	0x20006c54
 8006938:	0800ee18 	.word	0x0800ee18
 800693c:	0800f050 	.word	0x0800f050
 8006940:	0800ee54 	.word	0x0800ee54
 8006944:	0800f07c 	.word	0x0800f07c
 8006948:	20006c5c 	.word	0x20006c5c
 800694c:	20006c58 	.word	0x20006c58
 8006950:	0800f0a8 	.word	0x0800f0a8
 8006954:	0800f0d8 	.word	0x0800f0d8
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006958:	4b13      	ldr	r3, [pc, #76]	@ (80069a8 <tcp_slowtmr+0x578>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800695e:	429a      	cmp	r2, r3
 8006960:	d006      	beq.n	8006970 <tcp_slowtmr+0x540>
 8006962:	4b12      	ldr	r3, [pc, #72]	@ (80069ac <tcp_slowtmr+0x57c>)
 8006964:	f240 42cf 	movw	r2, #1231	@ 0x4cf
 8006968:	4911      	ldr	r1, [pc, #68]	@ (80069b0 <tcp_slowtmr+0x580>)
 800696a:	4812      	ldr	r0, [pc, #72]	@ (80069b4 <tcp_slowtmr+0x584>)
 800696c:	f006 ff1e 	bl	800d7ac <iprintf>
        tcp_tw_pcbs = pcb->next;
 8006970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	4a0c      	ldr	r2, [pc, #48]	@ (80069a8 <tcp_slowtmr+0x578>)
 8006976:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8006978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800697a:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 800697c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	627b      	str	r3, [r7, #36]	@ 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8006982:	69b9      	ldr	r1, [r7, #24]
 8006984:	2001      	movs	r0, #1
 8006986:	f7fe f8fd 	bl	8004b84 <memp_free>
 800698a:	e004      	b.n	8006996 <tcp_slowtmr+0x566>
    } else {
      prev = pcb;
 800698c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800698e:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8006990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 8006996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006998:	2b00      	cmp	r3, #0
 800699a:	d193      	bne.n	80068c4 <tcp_slowtmr+0x494>
    }
  }
}
 800699c:	bf00      	nop
 800699e:	bf00      	nop
 80069a0:	3728      	adds	r7, #40	@ 0x28
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bdb0      	pop	{r4, r5, r7, pc}
 80069a6:	bf00      	nop
 80069a8:	20006c58 	.word	0x20006c58
 80069ac:	0800ee18 	.word	0x0800ee18
 80069b0:	0800f100 	.word	0x0800f100
 80069b4:	0800ee54 	.word	0x0800ee54

080069b8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80069be:	4b2d      	ldr	r3, [pc, #180]	@ (8006a74 <tcp_fasttmr+0xbc>)
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	3301      	adds	r3, #1
 80069c4:	b2da      	uxtb	r2, r3
 80069c6:	4b2b      	ldr	r3, [pc, #172]	@ (8006a74 <tcp_fasttmr+0xbc>)
 80069c8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80069ca:	4b2b      	ldr	r3, [pc, #172]	@ (8006a78 <tcp_fasttmr+0xc0>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80069d0:	e048      	b.n	8006a64 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	7f5a      	ldrb	r2, [r3, #29]
 80069d6:	4b27      	ldr	r3, [pc, #156]	@ (8006a74 <tcp_fasttmr+0xbc>)
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d03f      	beq.n	8006a5e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80069de:	4b25      	ldr	r3, [pc, #148]	@ (8006a74 <tcp_fasttmr+0xbc>)
 80069e0:	781a      	ldrb	r2, [r3, #0]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	7e9b      	ldrb	r3, [r3, #26]
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d010      	beq.n	8006a14 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	7e9b      	ldrb	r3, [r3, #26]
 80069f6:	f043 0302 	orr.w	r3, r3, #2
 80069fa:	b2da      	uxtb	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f003 fcc7 	bl	800a394 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	7e9b      	ldrb	r3, [r3, #26]
 8006a0a:	f023 0303 	bic.w	r3, r3, #3
 8006a0e:	b2da      	uxtb	r2, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	7e9b      	ldrb	r3, [r3, #26]
 8006a18:	f003 0308 	and.w	r3, r3, #8
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d009      	beq.n	8006a34 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	7e9b      	ldrb	r3, [r3, #26]
 8006a24:	f023 0308 	bic.w	r3, r3, #8
 8006a28:	b2da      	uxtb	r2, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f7ff f986 	bl	8005d40 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00a      	beq.n	8006a58 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8006a42:	4b0e      	ldr	r3, [pc, #56]	@ (8006a7c <tcp_fasttmr+0xc4>)
 8006a44:	2200      	movs	r2, #0
 8006a46:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 f819 	bl	8006a80 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8006a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8006a7c <tcp_fasttmr+0xc4>)
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d000      	beq.n	8006a58 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8006a56:	e7b8      	b.n	80069ca <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	607b      	str	r3, [r7, #4]
 8006a5c:	e002      	b.n	8006a64 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1b3      	bne.n	80069d2 <tcp_fasttmr+0x1a>
    }
  }
}
 8006a6a:	bf00      	nop
 8006a6c:	bf00      	nop
 8006a6e:	3708      	adds	r7, #8
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	20006c5e 	.word	0x20006c5e
 8006a78:	20006c54 	.word	0x20006c54
 8006a7c:	20006c5c 	.word	0x20006c5c

08006a80 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006a80:	b590      	push	{r4, r7, lr}
 8006a82:	b085      	sub	sp, #20
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a8c:	7b5b      	ldrb	r3, [r3, #13]
 8006a8e:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a94:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	675a      	str	r2, [r3, #116]	@ 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00b      	beq.n	8006abe <tcp_process_refused_data+0x3e>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6918      	ldr	r0, [r3, #16]
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	68ba      	ldr	r2, [r7, #8]
 8006ab4:	6879      	ldr	r1, [r7, #4]
 8006ab6:	47a0      	blx	r4
 8006ab8:	4603      	mov	r3, r0
 8006aba:	73fb      	strb	r3, [r7, #15]
 8006abc:	e007      	b.n	8006ace <tcp_process_refused_data+0x4e>
 8006abe:	2300      	movs	r3, #0
 8006ac0:	68ba      	ldr	r2, [r7, #8]
 8006ac2:	6879      	ldr	r1, [r7, #4]
 8006ac4:	2000      	movs	r0, #0
 8006ac6:	f000 f88d 	bl	8006be4 <tcp_recv_null>
 8006aca:	4603      	mov	r3, r0
 8006acc:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d12a      	bne.n	8006b2c <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8006ad6:	7bbb      	ldrb	r3, [r7, #14]
 8006ad8:	f003 0320 	and.w	r3, r3, #32
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d033      	beq.n	8006b48 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ae4:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8006ae8:	d005      	beq.n	8006af6 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006aee:	3301      	adds	r3, #1
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00b      	beq.n	8006b18 <tcp_process_refused_data+0x98>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6918      	ldr	r0, [r3, #16]
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	6879      	ldr	r1, [r7, #4]
 8006b10:	47a0      	blx	r4
 8006b12:	4603      	mov	r3, r0
 8006b14:	73fb      	strb	r3, [r7, #15]
 8006b16:	e001      	b.n	8006b1c <tcp_process_refused_data+0x9c>
 8006b18:	2300      	movs	r3, #0
 8006b1a:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8006b1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b20:	f113 0f0d 	cmn.w	r3, #13
 8006b24:	d110      	bne.n	8006b48 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 8006b26:	f06f 030c 	mvn.w	r3, #12
 8006b2a:	e00e      	b.n	8006b4a <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 8006b2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b30:	f113 0f0d 	cmn.w	r3, #13
 8006b34:	d102      	bne.n	8006b3c <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8006b36:	f06f 030c 	mvn.w	r3, #12
 8006b3a:	e006      	b.n	8006b4a <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	675a      	str	r2, [r3, #116]	@ 0x74
      return ERR_INPROGRESS;
 8006b42:	f06f 0304 	mvn.w	r3, #4
 8006b46:	e000      	b.n	8006b4a <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3714      	adds	r7, #20
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd90      	pop	{r4, r7, pc}

08006b52 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b084      	sub	sp, #16
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8006b5a:	e007      	b.n	8006b6c <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 f80a 	bl	8006b7c <tcp_seg_free>
    seg = next;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1f4      	bne.n	8006b5c <tcp_segs_free+0xa>
  }
}
 8006b72:	bf00      	nop
 8006b74:	bf00      	nop
 8006b76:	3710      	adds	r7, #16
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00c      	beq.n	8006ba4 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d004      	beq.n	8006b9c <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7fe fd10 	bl	80055bc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8006b9c:	6879      	ldr	r1, [r7, #4]
 8006b9e:	2003      	movs	r0, #3
 8006ba0:	f7fd fff0 	bl	8004b84 <memp_free>
  }
}
 8006ba4:	bf00      	nop
 8006ba6:	3708      	adds	r7, #8
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8006bb4:	2003      	movs	r0, #3
 8006bb6:	f7fd ff99 	bl	8004aec <memp_malloc>
 8006bba:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d101      	bne.n	8006bc6 <tcp_seg_copy+0x1a>
    return NULL;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	e00a      	b.n	8006bdc <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8006bc6:	2210      	movs	r2, #16
 8006bc8:	6879      	ldr	r1, [r7, #4]
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	f006 fec9 	bl	800d962 <memcpy>
  pbuf_ref(cseg->p);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f7fe fd9b 	bl	8005710 <pbuf_ref>
  return cseg;
 8006bda:	68fb      	ldr	r3, [r7, #12]
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3710      	adds	r7, #16
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	607a      	str	r2, [r7, #4]
 8006bf0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d009      	beq.n	8006c0c <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	891b      	ldrh	r3, [r3, #8]
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	68b8      	ldr	r0, [r7, #8]
 8006c00:	f7ff fb78 	bl	80062f4 <tcp_recved>
    pbuf_free(p);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f7fe fcd9 	bl	80055bc <pbuf_free>
 8006c0a:	e008      	b.n	8006c1e <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 8006c0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d104      	bne.n	8006c1e <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 8006c14:	68b8      	ldr	r0, [r7, #8]
 8006c16:	f7ff f8fd 	bl	8005e14 <tcp_close>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	e000      	b.n	8006c20 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3710      	adds	r7, #16
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b086      	sub	sp, #24
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	4603      	mov	r3, r0
 8006c30:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8006c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	db01      	blt.n	8006c3e <tcp_kill_prio+0x16>
 8006c3a:	79fb      	ldrb	r3, [r7, #7]
 8006c3c:	e000      	b.n	8006c40 <tcp_kill_prio+0x18>
 8006c3e:	237f      	movs	r3, #127	@ 0x7f
 8006c40:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 8006c42:	2300      	movs	r3, #0
 8006c44:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006c46:	2300      	movs	r3, #0
 8006c48:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006c4a:	4b16      	ldr	r3, [pc, #88]	@ (8006ca4 <tcp_kill_prio+0x7c>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	617b      	str	r3, [r7, #20]
 8006c50:	e01a      	b.n	8006c88 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	7d5b      	ldrb	r3, [r3, #21]
 8006c56:	7afa      	ldrb	r2, [r7, #11]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d312      	bcc.n	8006c82 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006c5c:	4b12      	ldr	r3, [pc, #72]	@ (8006ca8 <tcp_kill_prio+0x80>)
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	6a1b      	ldr	r3, [r3, #32]
 8006c64:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d80a      	bhi.n	8006c82 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 8006c6c:	4b0e      	ldr	r3, [pc, #56]	@ (8006ca8 <tcp_kill_prio+0x80>)
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	6a1b      	ldr	r3, [r3, #32]
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	7d5b      	ldrb	r3, [r3, #21]
 8006c80:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	617b      	str	r3, [r7, #20]
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1e1      	bne.n	8006c52 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d002      	beq.n	8006c9a <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006c94:	6938      	ldr	r0, [r7, #16]
 8006c96:	f7ff f987 	bl	8005fa8 <tcp_abort>
  }
}
 8006c9a:	bf00      	nop
 8006c9c:	3718      	adds	r7, #24
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	20006c54 	.word	0x20006c54
 8006ca8:	20006c48 	.word	0x20006c48

08006cac <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b086      	sub	sp, #24
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8006cb6:	79fb      	ldrb	r3, [r7, #7]
 8006cb8:	2b08      	cmp	r3, #8
 8006cba:	d009      	beq.n	8006cd0 <tcp_kill_state+0x24>
 8006cbc:	79fb      	ldrb	r3, [r7, #7]
 8006cbe:	2b09      	cmp	r3, #9
 8006cc0:	d006      	beq.n	8006cd0 <tcp_kill_state+0x24>
 8006cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8006d2c <tcp_kill_state+0x80>)
 8006cc4:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8006cc8:	4919      	ldr	r1, [pc, #100]	@ (8006d30 <tcp_kill_state+0x84>)
 8006cca:	481a      	ldr	r0, [pc, #104]	@ (8006d34 <tcp_kill_state+0x88>)
 8006ccc:	f006 fd6e 	bl	800d7ac <iprintf>

  inactivity = 0;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006cd8:	4b17      	ldr	r3, [pc, #92]	@ (8006d38 <tcp_kill_state+0x8c>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	617b      	str	r3, [r7, #20]
 8006cde:	e017      	b.n	8006d10 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	7d1b      	ldrb	r3, [r3, #20]
 8006ce4:	79fa      	ldrb	r2, [r7, #7]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d10f      	bne.n	8006d0a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006cea:	4b14      	ldr	r3, [pc, #80]	@ (8006d3c <tcp_kill_state+0x90>)
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d807      	bhi.n	8006d0a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8006cfa:	4b10      	ldr	r3, [pc, #64]	@ (8006d3c <tcp_kill_state+0x90>)
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	6a1b      	ldr	r3, [r3, #32]
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	617b      	str	r3, [r7, #20]
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1e4      	bne.n	8006ce0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d003      	beq.n	8006d24 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8006d1c:	2100      	movs	r1, #0
 8006d1e:	6938      	ldr	r0, [r7, #16]
 8006d20:	f7ff f890 	bl	8005e44 <tcp_abandon>
  }
}
 8006d24:	bf00      	nop
 8006d26:	3718      	adds	r7, #24
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	0800ee18 	.word	0x0800ee18
 8006d30:	0800f128 	.word	0x0800f128
 8006d34:	0800ee54 	.word	0x0800ee54
 8006d38:	20006c54 	.word	0x20006c54
 8006d3c:	20006c48 	.word	0x20006c48

08006d40 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8006d46:	2300      	movs	r3, #0
 8006d48:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006d4e:	4b12      	ldr	r3, [pc, #72]	@ (8006d98 <tcp_kill_timewait+0x58>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	60fb      	str	r3, [r7, #12]
 8006d54:	e012      	b.n	8006d7c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006d56:	4b11      	ldr	r3, [pc, #68]	@ (8006d9c <tcp_kill_timewait+0x5c>)
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6a1b      	ldr	r3, [r3, #32]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d807      	bhi.n	8006d76 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8006d66:	4b0d      	ldr	r3, [pc, #52]	@ (8006d9c <tcp_kill_timewait+0x5c>)
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6a1b      	ldr	r3, [r3, #32]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	60fb      	str	r3, [r7, #12]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d1e9      	bne.n	8006d56 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d002      	beq.n	8006d8e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006d88:	68b8      	ldr	r0, [r7, #8]
 8006d8a:	f7ff f90d 	bl	8005fa8 <tcp_abort>
  }
}
 8006d8e:	bf00      	nop
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	20006c58 	.word	0x20006c58
 8006d9c:	20006c48 	.word	0x20006c48

08006da0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	4603      	mov	r3, r0
 8006da8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006daa:	2001      	movs	r0, #1
 8006dac:	f7fd fe9e 	bl	8004aec <memp_malloc>
 8006db0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d124      	bne.n	8006e02 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8006db8:	f7ff ffc2 	bl	8006d40 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006dbc:	2001      	movs	r0, #1
 8006dbe:	f7fd fe95 	bl	8004aec <memp_malloc>
 8006dc2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d11b      	bne.n	8006e02 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8006dca:	2009      	movs	r0, #9
 8006dcc:	f7ff ff6e 	bl	8006cac <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006dd0:	2001      	movs	r0, #1
 8006dd2:	f7fd fe8b 	bl	8004aec <memp_malloc>
 8006dd6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d111      	bne.n	8006e02 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8006dde:	2008      	movs	r0, #8
 8006de0:	f7ff ff64 	bl	8006cac <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006de4:	2001      	movs	r0, #1
 8006de6:	f7fd fe81 	bl	8004aec <memp_malloc>
 8006dea:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d107      	bne.n	8006e02 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8006df2:	79fb      	ldrb	r3, [r7, #7]
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7ff ff17 	bl	8006c28 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006dfa:	2001      	movs	r0, #1
 8006dfc:	f7fd fe76 	bl	8004aec <memp_malloc>
 8006e00:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d03f      	beq.n	8006e88 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8006e08:	2298      	movs	r2, #152	@ 0x98
 8006e0a:	2100      	movs	r1, #0
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f006 fd32 	bl	800d876 <memset>
    pcb->prio = prio;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	79fa      	ldrb	r2, [r7, #7]
 8006e16:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8006e1e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8006e28:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	22ff      	movs	r2, #255	@ 0xff
 8006e36:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8006e3e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2206      	movs	r2, #6
 8006e44:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2206      	movs	r2, #6
 8006e4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006e54:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8006e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e94 <tcp_alloc+0xf4>)
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8006e66:	4b0c      	ldr	r3, [pc, #48]	@ (8006e98 <tcp_alloc+0xf8>)
 8006e68:	781a      	ldrb	r2, [r3, #0]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8006e74:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	4a08      	ldr	r2, [pc, #32]	@ (8006e9c <tcp_alloc+0xfc>)
 8006e7c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	4a07      	ldr	r2, [pc, #28]	@ (8006ea0 <tcp_alloc+0x100>)
 8006e84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8006e88:	68fb      	ldr	r3, [r7, #12]
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3710      	adds	r7, #16
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	20006c48 	.word	0x20006c48
 8006e98:	20006c5e 	.word	0x20006c5e
 8006e9c:	08006be5 	.word	0x08006be5
 8006ea0:	006ddd00 	.word	0x006ddd00

08006ea4 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8006ea8:	2040      	movs	r0, #64	@ 0x40
 8006eaa:	f7ff ff79 	bl	8006da0 <tcp_alloc>
 8006eae:	4603      	mov	r3, r0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00e      	beq.n	8006ee2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	7d1b      	ldrb	r3, [r3, #20]
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d106      	bne.n	8006eda <tcp_recv+0x26>
 8006ecc:	4b07      	ldr	r3, [pc, #28]	@ (8006eec <tcp_recv+0x38>)
 8006ece:	f240 62bb 	movw	r2, #1723	@ 0x6bb
 8006ed2:	4907      	ldr	r1, [pc, #28]	@ (8006ef0 <tcp_recv+0x3c>)
 8006ed4:	4807      	ldr	r0, [pc, #28]	@ (8006ef4 <tcp_recv+0x40>)
 8006ed6:	f006 fc69 	bl	800d7ac <iprintf>
    pcb->recv = recv;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	683a      	ldr	r2, [r7, #0]
 8006ede:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 8006ee2:	bf00      	nop
 8006ee4:	3708      	adds	r7, #8
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	0800ee18 	.word	0x0800ee18
 8006ef0:	0800f138 	.word	0x0800f138
 8006ef4:	0800ee54 	.word	0x0800ee54

08006ef8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b085      	sub	sp, #20
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d008      	beq.n	8006f1a <tcp_accept+0x22>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	7d1b      	ldrb	r3, [r3, #20]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d104      	bne.n	8006f1a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	683a      	ldr	r2, [r7, #0]
 8006f18:	619a      	str	r2, [r3, #24]
  }
}
 8006f1a:	bf00      	nop
 8006f1c:	3714      	adds	r7, #20
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bc80      	pop	{r7}
 8006f22:	4770      	bx	lr

08006f24 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	7d1b      	ldrb	r3, [r3, #20]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d034      	beq.n	8006f9e <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8006f38:	2b0a      	cmp	r3, #10
 8006f3a:	d030      	beq.n	8006f9e <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d02c      	beq.n	8006f9e <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d007      	beq.n	8006f5c <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7fe fb33 	bl	80055bc <pbuf_free>
      pcb->refused_data = NULL;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f60:	4618      	mov	r0, r3
 8006f62:	f7ff fdf6 	bl	8006b52 <tcp_segs_free>
    pcb->ooseq = NULL;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	671a      	str	r2, [r3, #112]	@ 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006f72:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7ff fdea 	bl	8006b52 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7ff fde5 	bl	8006b52 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	669a      	str	r2, [r3, #104]	@ 0x68
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	66da      	str	r2, [r3, #108]	@ 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
#endif /* TCP_OVERSIZE */
  }
}
 8006f9e:	bf00      	nop
 8006fa0:	3708      	adds	r7, #8
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
	...

08006fa8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	683a      	ldr	r2, [r7, #0]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d105      	bne.n	8006fc8 <tcp_pcb_remove+0x20>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	68da      	ldr	r2, [r3, #12]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	601a      	str	r2, [r3, #0]
 8006fc6:	e013      	b.n	8006ff0 <tcp_pcb_remove+0x48>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	60fb      	str	r3, [r7, #12]
 8006fce:	e00c      	b.n	8006fea <tcp_pcb_remove+0x42>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	683a      	ldr	r2, [r7, #0]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d104      	bne.n	8006fe4 <tcp_pcb_remove+0x3c>
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	68da      	ldr	r2, [r3, #12]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	60da      	str	r2, [r3, #12]
 8006fe2:	e005      	b.n	8006ff0 <tcp_pcb_remove+0x48>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	60fb      	str	r3, [r7, #12]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d1ef      	bne.n	8006fd0 <tcp_pcb_remove+0x28>
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8006ff6:	6838      	ldr	r0, [r7, #0]
 8006ff8:	f7ff ff94 	bl	8006f24 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	7d1b      	ldrb	r3, [r3, #20]
 8007000:	2b0a      	cmp	r3, #10
 8007002:	d013      	beq.n	800702c <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 8007008:	2b01      	cmp	r3, #1
 800700a:	d00f      	beq.n	800702c <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	7e9b      	ldrb	r3, [r3, #26]
 8007010:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 8007014:	2b00      	cmp	r3, #0
 8007016:	d009      	beq.n	800702c <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	7e9b      	ldrb	r3, [r3, #26]
 800701c:	f043 0302 	orr.w	r3, r3, #2
 8007020:	b2da      	uxtb	r2, r3
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8007026:	6838      	ldr	r0, [r7, #0]
 8007028:	f003 f9b4 	bl	800a394 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	7d1b      	ldrb	r3, [r3, #20]
 8007030:	2b01      	cmp	r3, #1
 8007032:	d020      	beq.n	8007076 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007038:	2b00      	cmp	r3, #0
 800703a:	d006      	beq.n	800704a <tcp_pcb_remove+0xa2>
 800703c:	4b13      	ldr	r3, [pc, #76]	@ (800708c <tcp_pcb_remove+0xe4>)
 800703e:	f240 7253 	movw	r2, #1875	@ 0x753
 8007042:	4913      	ldr	r1, [pc, #76]	@ (8007090 <tcp_pcb_remove+0xe8>)
 8007044:	4813      	ldr	r0, [pc, #76]	@ (8007094 <tcp_pcb_remove+0xec>)
 8007046:	f006 fbb1 	bl	800d7ac <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800704e:	2b00      	cmp	r3, #0
 8007050:	d006      	beq.n	8007060 <tcp_pcb_remove+0xb8>
 8007052:	4b0e      	ldr	r3, [pc, #56]	@ (800708c <tcp_pcb_remove+0xe4>)
 8007054:	f240 7254 	movw	r2, #1876	@ 0x754
 8007058:	490f      	ldr	r1, [pc, #60]	@ (8007098 <tcp_pcb_remove+0xf0>)
 800705a:	480e      	ldr	r0, [pc, #56]	@ (8007094 <tcp_pcb_remove+0xec>)
 800705c:	f006 fba6 	bl	800d7ac <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007064:	2b00      	cmp	r3, #0
 8007066:	d006      	beq.n	8007076 <tcp_pcb_remove+0xce>
 8007068:	4b08      	ldr	r3, [pc, #32]	@ (800708c <tcp_pcb_remove+0xe4>)
 800706a:	f240 7256 	movw	r2, #1878	@ 0x756
 800706e:	490b      	ldr	r1, [pc, #44]	@ (800709c <tcp_pcb_remove+0xf4>)
 8007070:	4808      	ldr	r0, [pc, #32]	@ (8007094 <tcp_pcb_remove+0xec>)
 8007072:	f006 fb9b 	bl	800d7ac <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	2200      	movs	r2, #0
 800707a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	2200      	movs	r2, #0
 8007080:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8007082:	bf00      	nop
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	0800ee18 	.word	0x0800ee18
 8007090:	0800f1d0 	.word	0x0800f1d0
 8007094:	0800ee54 	.word	0x0800ee54
 8007098:	0800f1e8 	.word	0x0800f1e8
 800709c:	0800f204 	.word	0x0800f204

080070a0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80070a8:	4b06      	ldr	r3, [pc, #24]	@ (80070c4 <tcp_next_iss+0x24>)
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	4b06      	ldr	r3, [pc, #24]	@ (80070c8 <tcp_next_iss+0x28>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4413      	add	r3, r2
 80070b2:	4a04      	ldr	r2, [pc, #16]	@ (80070c4 <tcp_next_iss+0x24>)
 80070b4:	6013      	str	r3, [r2, #0]
  return iss;
 80070b6:	4b03      	ldr	r3, [pc, #12]	@ (80070c4 <tcp_next_iss+0x24>)
 80070b8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	370c      	adds	r7, #12
 80070be:	46bd      	mov	sp, r7
 80070c0:	bc80      	pop	{r7}
 80070c2:	4770      	bx	lr
 80070c4:	2000000c 	.word	0x2000000c
 80070c8:	20006c48 	.word	0x20006c48

080070cc <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	4603      	mov	r3, r0
 80070d4:	6039      	str	r1, [r7, #0]
 80070d6:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 80070d8:	6838      	ldr	r0, [r7, #0]
 80070da:	f005 f941 	bl	800c360 <ip4_route>
 80070de:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d101      	bne.n	80070ea <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 80070e6:	88fb      	ldrh	r3, [r7, #6]
 80070e8:	e010      	b.n	800710c <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80070ee:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80070f0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d008      	beq.n	800710a <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 80070f8:	897b      	ldrh	r3, [r7, #10]
 80070fa:	3b28      	subs	r3, #40	@ 0x28
 80070fc:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80070fe:	893a      	ldrh	r2, [r7, #8]
 8007100:	88fb      	ldrh	r3, [r7, #6]
 8007102:	4293      	cmp	r3, r2
 8007104:	bf28      	it	cs
 8007106:	4613      	movcs	r3, r2
 8007108:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800710a:	88fb      	ldrh	r3, [r7, #6]
}
 800710c:	4618      	mov	r0, r3
 800710e:	3710      	adds	r7, #16
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007122:	e011      	b.n	8007148 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	429a      	cmp	r2, r3
 800712e:	d108      	bne.n	8007142 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f7fe ff36 	bl	8005fa8 <tcp_abort>
      pcb = next;
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	60fb      	str	r3, [r7, #12]
 8007140:	e002      	b.n	8007148 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d1ea      	bne.n	8007124 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800714e:	bf00      	nop
 8007150:	bf00      	nop
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d02c      	beq.n	80071c2 <tcp_netif_ip_addr_changed+0x6a>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d028      	beq.n	80071c2 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007170:	4b16      	ldr	r3, [pc, #88]	@ (80071cc <tcp_netif_ip_addr_changed+0x74>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4619      	mov	r1, r3
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f7ff ffcc 	bl	8007114 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800717c:	4b14      	ldr	r3, [pc, #80]	@ (80071d0 <tcp_netif_ip_addr_changed+0x78>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4619      	mov	r1, r3
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f7ff ffc6 	bl	8007114 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d019      	beq.n	80071c2 <tcp_netif_ip_addr_changed+0x6a>
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d015      	beq.n	80071c2 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8007196:	4b0f      	ldr	r3, [pc, #60]	@ (80071d4 <tcp_netif_ip_addr_changed+0x7c>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	60fb      	str	r3, [r7, #12]
 800719c:	e00e      	b.n	80071bc <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d103      	bne.n	80071b8 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	60fb      	str	r3, [r7, #12]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d1ed      	bne.n	800719e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80071c2:	bf00      	nop
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	20006c54 	.word	0x20006c54
 80071d0:	20006c4c 	.word	0x20006c4c
 80071d4:	20006c50 	.word	0x20006c50

080071d8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80071d8:	b590      	push	{r4, r7, lr}
 80071da:	b08b      	sub	sp, #44	@ 0x2c
 80071dc:	af02      	add	r7, sp, #8
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	4a81      	ldr	r2, [pc, #516]	@ (80073ec <tcp_input+0x214>)
 80071e8:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	895b      	ldrh	r3, [r3, #10]
 80071ee:	2b13      	cmp	r3, #19
 80071f0:	f240 8396 	bls.w	8007920 <tcp_input+0x748>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80071f4:	4b7e      	ldr	r3, [pc, #504]	@ (80073f0 <tcp_input+0x218>)
 80071f6:	695b      	ldr	r3, [r3, #20]
 80071f8:	4a7d      	ldr	r2, [pc, #500]	@ (80073f0 <tcp_input+0x218>)
 80071fa:	6812      	ldr	r2, [r2, #0]
 80071fc:	4611      	mov	r1, r2
 80071fe:	4618      	mov	r0, r3
 8007200:	f005 fb28 	bl	800c854 <ip4_addr_isbroadcast_u32>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	f040 838c 	bne.w	8007924 <tcp_input+0x74c>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800720c:	4b78      	ldr	r3, [pc, #480]	@ (80073f0 <tcp_input+0x218>)
 800720e:	695b      	ldr	r3, [r3, #20]
 8007210:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007214:	2be0      	cmp	r3, #224	@ 0xe0
 8007216:	f000 8385 	beq.w	8007924 <tcp_input+0x74c>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800721a:	4b74      	ldr	r3, [pc, #464]	@ (80073ec <tcp_input+0x214>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	899b      	ldrh	r3, [r3, #12]
 8007220:	b29b      	uxth	r3, r3
 8007222:	4618      	mov	r0, r3
 8007224:	f7fd f8b9 	bl	800439a <lwip_htons>
 8007228:	4603      	mov	r3, r0
 800722a:	0b1b      	lsrs	r3, r3, #12
 800722c:	b29b      	uxth	r3, r3
 800722e:	b2db      	uxtb	r3, r3
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007234:	7cbb      	ldrb	r3, [r7, #18]
 8007236:	2b13      	cmp	r3, #19
 8007238:	f240 8376 	bls.w	8007928 <tcp_input+0x750>
 800723c:	7cbb      	ldrb	r3, [r7, #18]
 800723e:	b29a      	uxth	r2, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	891b      	ldrh	r3, [r3, #8]
 8007244:	429a      	cmp	r2, r3
 8007246:	f200 836f 	bhi.w	8007928 <tcp_input+0x750>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800724a:	7cbb      	ldrb	r3, [r7, #18]
 800724c:	b29b      	uxth	r3, r3
 800724e:	3b14      	subs	r3, #20
 8007250:	b29a      	uxth	r2, r3
 8007252:	4b68      	ldr	r3, [pc, #416]	@ (80073f4 <tcp_input+0x21c>)
 8007254:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8007256:	4b68      	ldr	r3, [pc, #416]	@ (80073f8 <tcp_input+0x220>)
 8007258:	2200      	movs	r2, #0
 800725a:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	895a      	ldrh	r2, [r3, #10]
 8007260:	7cbb      	ldrb	r3, [r7, #18]
 8007262:	b29b      	uxth	r3, r3
 8007264:	429a      	cmp	r2, r3
 8007266:	d30d      	bcc.n	8007284 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8007268:	4b62      	ldr	r3, [pc, #392]	@ (80073f4 <tcp_input+0x21c>)
 800726a:	881a      	ldrh	r2, [r3, #0]
 800726c:	4b63      	ldr	r3, [pc, #396]	@ (80073fc <tcp_input+0x224>)
 800726e:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8007270:	7cbb      	ldrb	r3, [r7, #18]
 8007272:	b29b      	uxth	r3, r3
 8007274:	425b      	negs	r3, r3
 8007276:	b29b      	uxth	r3, r3
 8007278:	b21b      	sxth	r3, r3
 800727a:	4619      	mov	r1, r3
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f7fe f979 	bl	8005574 <pbuf_header>
 8007282:	e055      	b.n	8007330 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d105      	bne.n	8007298 <tcp_input+0xc0>
 800728c:	4b5c      	ldr	r3, [pc, #368]	@ (8007400 <tcp_input+0x228>)
 800728e:	22b2      	movs	r2, #178	@ 0xb2
 8007290:	495c      	ldr	r1, [pc, #368]	@ (8007404 <tcp_input+0x22c>)
 8007292:	485d      	ldr	r0, [pc, #372]	@ (8007408 <tcp_input+0x230>)
 8007294:	f006 fa8a 	bl	800d7ac <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 8007298:	f06f 0113 	mvn.w	r1, #19
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f7fe f969 	bl	8005574 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	895a      	ldrh	r2, [r3, #10]
 80072a6:	4b55      	ldr	r3, [pc, #340]	@ (80073fc <tcp_input+0x224>)
 80072a8:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 80072aa:	4b52      	ldr	r3, [pc, #328]	@ (80073f4 <tcp_input+0x21c>)
 80072ac:	881a      	ldrh	r2, [r3, #0]
 80072ae:	4b53      	ldr	r3, [pc, #332]	@ (80073fc <tcp_input+0x224>)
 80072b0:	881b      	ldrh	r3, [r3, #0]
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 80072b6:	4b51      	ldr	r3, [pc, #324]	@ (80073fc <tcp_input+0x224>)
 80072b8:	881b      	ldrh	r3, [r3, #0]
 80072ba:	425b      	negs	r3, r3
 80072bc:	b29b      	uxth	r3, r3
 80072be:	b21b      	sxth	r3, r3
 80072c0:	4619      	mov	r1, r3
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f7fe f956 	bl	8005574 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	895b      	ldrh	r3, [r3, #10]
 80072ce:	8a3a      	ldrh	r2, [r7, #16]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	f200 832b 	bhi.w	800792c <tcp_input+0x754>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	4a46      	ldr	r2, [pc, #280]	@ (80073f8 <tcp_input+0x220>)
 80072de:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	8a3b      	ldrh	r3, [r7, #16]
 80072e6:	425b      	negs	r3, r3
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	b21b      	sxth	r3, r3
 80072ec:	4619      	mov	r1, r3
 80072ee:	4610      	mov	r0, r2
 80072f0:	f7fe f940 	bl	8005574 <pbuf_header>
    p->tot_len -= opt2len;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	891a      	ldrh	r2, [r3, #8]
 80072f8:	8a3b      	ldrh	r3, [r7, #16]
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	895b      	ldrh	r3, [r3, #10]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d005      	beq.n	8007316 <tcp_input+0x13e>
 800730a:	4b3d      	ldr	r3, [pc, #244]	@ (8007400 <tcp_input+0x228>)
 800730c:	22cf      	movs	r2, #207	@ 0xcf
 800730e:	493f      	ldr	r1, [pc, #252]	@ (800740c <tcp_input+0x234>)
 8007310:	483d      	ldr	r0, [pc, #244]	@ (8007408 <tcp_input+0x230>)
 8007312:	f006 fa4b 	bl	800d7ac <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	891a      	ldrh	r2, [r3, #8]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	891b      	ldrh	r3, [r3, #8]
 8007320:	429a      	cmp	r2, r3
 8007322:	d005      	beq.n	8007330 <tcp_input+0x158>
 8007324:	4b36      	ldr	r3, [pc, #216]	@ (8007400 <tcp_input+0x228>)
 8007326:	22d0      	movs	r2, #208	@ 0xd0
 8007328:	4939      	ldr	r1, [pc, #228]	@ (8007410 <tcp_input+0x238>)
 800732a:	4837      	ldr	r0, [pc, #220]	@ (8007408 <tcp_input+0x230>)
 800732c:	f006 fa3e 	bl	800d7ac <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007330:	4b2e      	ldr	r3, [pc, #184]	@ (80073ec <tcp_input+0x214>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	881b      	ldrh	r3, [r3, #0]
 8007336:	b29b      	uxth	r3, r3
 8007338:	4a2c      	ldr	r2, [pc, #176]	@ (80073ec <tcp_input+0x214>)
 800733a:	6814      	ldr	r4, [r2, #0]
 800733c:	4618      	mov	r0, r3
 800733e:	f7fd f82c 	bl	800439a <lwip_htons>
 8007342:	4603      	mov	r3, r0
 8007344:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8007346:	4b29      	ldr	r3, [pc, #164]	@ (80073ec <tcp_input+0x214>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	885b      	ldrh	r3, [r3, #2]
 800734c:	b29b      	uxth	r3, r3
 800734e:	4a27      	ldr	r2, [pc, #156]	@ (80073ec <tcp_input+0x214>)
 8007350:	6814      	ldr	r4, [r2, #0]
 8007352:	4618      	mov	r0, r3
 8007354:	f7fd f821 	bl	800439a <lwip_htons>
 8007358:	4603      	mov	r3, r0
 800735a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800735c:	4b23      	ldr	r3, [pc, #140]	@ (80073ec <tcp_input+0x214>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	4a22      	ldr	r2, [pc, #136]	@ (80073ec <tcp_input+0x214>)
 8007364:	6814      	ldr	r4, [r2, #0]
 8007366:	4618      	mov	r0, r3
 8007368:	f7fd f824 	bl	80043b4 <lwip_htonl>
 800736c:	4603      	mov	r3, r0
 800736e:	6063      	str	r3, [r4, #4]
 8007370:	6863      	ldr	r3, [r4, #4]
 8007372:	4a28      	ldr	r2, [pc, #160]	@ (8007414 <tcp_input+0x23c>)
 8007374:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007376:	4b1d      	ldr	r3, [pc, #116]	@ (80073ec <tcp_input+0x214>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	4a1b      	ldr	r2, [pc, #108]	@ (80073ec <tcp_input+0x214>)
 800737e:	6814      	ldr	r4, [r2, #0]
 8007380:	4618      	mov	r0, r3
 8007382:	f7fd f817 	bl	80043b4 <lwip_htonl>
 8007386:	4603      	mov	r3, r0
 8007388:	60a3      	str	r3, [r4, #8]
 800738a:	68a3      	ldr	r3, [r4, #8]
 800738c:	4a22      	ldr	r2, [pc, #136]	@ (8007418 <tcp_input+0x240>)
 800738e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007390:	4b16      	ldr	r3, [pc, #88]	@ (80073ec <tcp_input+0x214>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	89db      	ldrh	r3, [r3, #14]
 8007396:	b29b      	uxth	r3, r3
 8007398:	4a14      	ldr	r2, [pc, #80]	@ (80073ec <tcp_input+0x214>)
 800739a:	6814      	ldr	r4, [r2, #0]
 800739c:	4618      	mov	r0, r3
 800739e:	f7fc fffc 	bl	800439a <lwip_htons>
 80073a2:	4603      	mov	r3, r0
 80073a4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80073a6:	4b11      	ldr	r3, [pc, #68]	@ (80073ec <tcp_input+0x214>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	899b      	ldrh	r3, [r3, #12]
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	4618      	mov	r0, r3
 80073b0:	f7fc fff3 	bl	800439a <lwip_htons>
 80073b4:	4603      	mov	r3, r0
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80073bc:	b2da      	uxtb	r2, r3
 80073be:	4b17      	ldr	r3, [pc, #92]	@ (800741c <tcp_input+0x244>)
 80073c0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	891b      	ldrh	r3, [r3, #8]
 80073c6:	4a15      	ldr	r2, [pc, #84]	@ (800741c <tcp_input+0x244>)
 80073c8:	7812      	ldrb	r2, [r2, #0]
 80073ca:	f002 0203 	and.w	r2, r2, #3
 80073ce:	2a00      	cmp	r2, #0
 80073d0:	bf14      	ite	ne
 80073d2:	2201      	movne	r2, #1
 80073d4:	2200      	moveq	r2, #0
 80073d6:	b2d2      	uxtb	r2, r2
 80073d8:	4413      	add	r3, r2
 80073da:	b29a      	uxth	r2, r3
 80073dc:	4b10      	ldr	r3, [pc, #64]	@ (8007420 <tcp_input+0x248>)
 80073de:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80073e0:	2300      	movs	r3, #0
 80073e2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80073e4:	4b0f      	ldr	r3, [pc, #60]	@ (8007424 <tcp_input+0x24c>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	61fb      	str	r3, [r7, #28]
 80073ea:	e081      	b.n	80074f0 <tcp_input+0x318>
 80073ec:	20006c70 	.word	0x20006c70
 80073f0:	200036ec 	.word	0x200036ec
 80073f4:	20006c74 	.word	0x20006c74
 80073f8:	20006c78 	.word	0x20006c78
 80073fc:	20006c76 	.word	0x20006c76
 8007400:	0800f21c 	.word	0x0800f21c
 8007404:	0800f250 	.word	0x0800f250
 8007408:	0800f260 	.word	0x0800f260
 800740c:	0800f288 	.word	0x0800f288
 8007410:	0800f294 	.word	0x0800f294
 8007414:	20006c80 	.word	0x20006c80
 8007418:	20006c84 	.word	0x20006c84
 800741c:	20006c8c 	.word	0x20006c8c
 8007420:	20006c8a 	.word	0x20006c8a
 8007424:	20006c54 	.word	0x20006c54
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	7d1b      	ldrb	r3, [r3, #20]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d105      	bne.n	800743c <tcp_input+0x264>
 8007430:	4b6e      	ldr	r3, [pc, #440]	@ (80075ec <tcp_input+0x414>)
 8007432:	22e2      	movs	r2, #226	@ 0xe2
 8007434:	496e      	ldr	r1, [pc, #440]	@ (80075f0 <tcp_input+0x418>)
 8007436:	486f      	ldr	r0, [pc, #444]	@ (80075f4 <tcp_input+0x41c>)
 8007438:	f006 f9b8 	bl	800d7ac <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	7d1b      	ldrb	r3, [r3, #20]
 8007440:	2b0a      	cmp	r3, #10
 8007442:	d105      	bne.n	8007450 <tcp_input+0x278>
 8007444:	4b69      	ldr	r3, [pc, #420]	@ (80075ec <tcp_input+0x414>)
 8007446:	22e3      	movs	r2, #227	@ 0xe3
 8007448:	496b      	ldr	r1, [pc, #428]	@ (80075f8 <tcp_input+0x420>)
 800744a:	486a      	ldr	r0, [pc, #424]	@ (80075f4 <tcp_input+0x41c>)
 800744c:	f006 f9ae 	bl	800d7ac <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007450:	69fb      	ldr	r3, [r7, #28]
 8007452:	7d1b      	ldrb	r3, [r3, #20]
 8007454:	2b01      	cmp	r3, #1
 8007456:	d105      	bne.n	8007464 <tcp_input+0x28c>
 8007458:	4b64      	ldr	r3, [pc, #400]	@ (80075ec <tcp_input+0x414>)
 800745a:	22e4      	movs	r2, #228	@ 0xe4
 800745c:	4967      	ldr	r1, [pc, #412]	@ (80075fc <tcp_input+0x424>)
 800745e:	4865      	ldr	r0, [pc, #404]	@ (80075f4 <tcp_input+0x41c>)
 8007460:	f006 f9a4 	bl	800d7ac <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	8b1a      	ldrh	r2, [r3, #24]
 8007468:	4b65      	ldr	r3, [pc, #404]	@ (8007600 <tcp_input+0x428>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	881b      	ldrh	r3, [r3, #0]
 800746e:	b29b      	uxth	r3, r3
 8007470:	429a      	cmp	r2, r3
 8007472:	d138      	bne.n	80074e6 <tcp_input+0x30e>
        pcb->local_port == tcphdr->dest &&
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	8ada      	ldrh	r2, [r3, #22]
 8007478:	4b61      	ldr	r3, [pc, #388]	@ (8007600 <tcp_input+0x428>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	885b      	ldrh	r3, [r3, #2]
 800747e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8007480:	429a      	cmp	r2, r3
 8007482:	d130      	bne.n	80074e6 <tcp_input+0x30e>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	685a      	ldr	r2, [r3, #4]
 8007488:	4b5e      	ldr	r3, [pc, #376]	@ (8007604 <tcp_input+0x42c>)
 800748a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800748c:	429a      	cmp	r2, r3
 800748e:	d12a      	bne.n	80074e6 <tcp_input+0x30e>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	4b5b      	ldr	r3, [pc, #364]	@ (8007604 <tcp_input+0x42c>)
 8007496:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007498:	429a      	cmp	r2, r3
 800749a:	d124      	bne.n	80074e6 <tcp_input+0x30e>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	69fa      	ldr	r2, [r7, #28]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d105      	bne.n	80074b2 <tcp_input+0x2da>
 80074a6:	4b51      	ldr	r3, [pc, #324]	@ (80075ec <tcp_input+0x414>)
 80074a8:	22ec      	movs	r2, #236	@ 0xec
 80074aa:	4957      	ldr	r1, [pc, #348]	@ (8007608 <tcp_input+0x430>)
 80074ac:	4851      	ldr	r0, [pc, #324]	@ (80075f4 <tcp_input+0x41c>)
 80074ae:	f006 f97d 	bl	800d7ac <iprintf>
      if (prev != NULL) {
 80074b2:	69bb      	ldr	r3, [r7, #24]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00a      	beq.n	80074ce <tcp_input+0x2f6>
        prev->next = pcb->next;
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	68da      	ldr	r2, [r3, #12]
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80074c0:	4b52      	ldr	r3, [pc, #328]	@ (800760c <tcp_input+0x434>)
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80074c8:	4a50      	ldr	r2, [pc, #320]	@ (800760c <tcp_input+0x434>)
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	69fa      	ldr	r2, [r7, #28]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d10f      	bne.n	80074f8 <tcp_input+0x320>
 80074d8:	4b44      	ldr	r3, [pc, #272]	@ (80075ec <tcp_input+0x414>)
 80074da:	22f4      	movs	r2, #244	@ 0xf4
 80074dc:	494c      	ldr	r1, [pc, #304]	@ (8007610 <tcp_input+0x438>)
 80074de:	4845      	ldr	r0, [pc, #276]	@ (80075f4 <tcp_input+0x41c>)
 80074e0:	f006 f964 	bl	800d7ac <iprintf>
      break;
 80074e4:	e008      	b.n	80074f8 <tcp_input+0x320>
    }
    prev = pcb;
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	61fb      	str	r3, [r7, #28]
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d198      	bne.n	8007428 <tcp_input+0x250>
 80074f6:	e000      	b.n	80074fa <tcp_input+0x322>
      break;
 80074f8:	bf00      	nop
  }

  if (pcb == NULL) {
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f040 808f 	bne.w	8007620 <tcp_input+0x448>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007502:	4b44      	ldr	r3, [pc, #272]	@ (8007614 <tcp_input+0x43c>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	61fb      	str	r3, [r7, #28]
 8007508:	e02f      	b.n	800756a <tcp_input+0x392>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	7d1b      	ldrb	r3, [r3, #20]
 800750e:	2b0a      	cmp	r3, #10
 8007510:	d005      	beq.n	800751e <tcp_input+0x346>
 8007512:	4b36      	ldr	r3, [pc, #216]	@ (80075ec <tcp_input+0x414>)
 8007514:	22fe      	movs	r2, #254	@ 0xfe
 8007516:	4940      	ldr	r1, [pc, #256]	@ (8007618 <tcp_input+0x440>)
 8007518:	4836      	ldr	r0, [pc, #216]	@ (80075f4 <tcp_input+0x41c>)
 800751a:	f006 f947 	bl	800d7ac <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	8b1a      	ldrh	r2, [r3, #24]
 8007522:	4b37      	ldr	r3, [pc, #220]	@ (8007600 <tcp_input+0x428>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	881b      	ldrh	r3, [r3, #0]
 8007528:	b29b      	uxth	r3, r3
 800752a:	429a      	cmp	r2, r3
 800752c:	d11a      	bne.n	8007564 <tcp_input+0x38c>
          pcb->local_port == tcphdr->dest &&
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	8ada      	ldrh	r2, [r3, #22]
 8007532:	4b33      	ldr	r3, [pc, #204]	@ (8007600 <tcp_input+0x428>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	885b      	ldrh	r3, [r3, #2]
 8007538:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800753a:	429a      	cmp	r2, r3
 800753c:	d112      	bne.n	8007564 <tcp_input+0x38c>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	685a      	ldr	r2, [r3, #4]
 8007542:	4b30      	ldr	r3, [pc, #192]	@ (8007604 <tcp_input+0x42c>)
 8007544:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8007546:	429a      	cmp	r2, r3
 8007548:	d10c      	bne.n	8007564 <tcp_input+0x38c>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	4b2d      	ldr	r3, [pc, #180]	@ (8007604 <tcp_input+0x42c>)
 8007550:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007552:	429a      	cmp	r2, r3
 8007554:	d106      	bne.n	8007564 <tcp_input+0x38c>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 8007556:	69f8      	ldr	r0, [r7, #28]
 8007558:	f000 fb16 	bl	8007b88 <tcp_timewait_input>
        pbuf_free(p);
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f7fe f82d 	bl	80055bc <pbuf_free>
        return;
 8007562:	e1e9      	b.n	8007938 <tcp_input+0x760>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	61fb      	str	r3, [r7, #28]
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1cc      	bne.n	800750a <tcp_input+0x332>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8007570:	2300      	movs	r3, #0
 8007572:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007574:	4b29      	ldr	r3, [pc, #164]	@ (800761c <tcp_input+0x444>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	617b      	str	r3, [r7, #20]
 800757a:	e019      	b.n	80075b0 <tcp_input+0x3d8>
      if (lpcb->local_port == tcphdr->dest) {
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	8ada      	ldrh	r2, [r3, #22]
 8007580:	4b1f      	ldr	r3, [pc, #124]	@ (8007600 <tcp_input+0x428>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	885b      	ldrh	r3, [r3, #2]
 8007586:	b29b      	uxth	r3, r3
 8007588:	429a      	cmp	r2, r3
 800758a:	d10c      	bne.n	80075a6 <tcp_input+0x3ce>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	4b1c      	ldr	r3, [pc, #112]	@ (8007604 <tcp_input+0x42c>)
 8007592:	695b      	ldr	r3, [r3, #20]
 8007594:	429a      	cmp	r2, r3
 8007596:	d00f      	beq.n	80075b8 <tcp_input+0x3e0>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00d      	beq.n	80075ba <tcp_input+0x3e2>
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d009      	beq.n	80075ba <tcp_input+0x3e2>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	617b      	str	r3, [r7, #20]
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1e2      	bne.n	800757c <tcp_input+0x3a4>
 80075b6:	e000      	b.n	80075ba <tcp_input+0x3e2>
            break;
 80075b8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d02f      	beq.n	8007620 <tcp_input+0x448>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00a      	beq.n	80075dc <tcp_input+0x404>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	68da      	ldr	r2, [r3, #12]
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80075ce:	4b13      	ldr	r3, [pc, #76]	@ (800761c <tcp_input+0x444>)
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80075d6:	4a11      	ldr	r2, [pc, #68]	@ (800761c <tcp_input+0x444>)
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 80075dc:	6978      	ldr	r0, [r7, #20]
 80075de:	f000 f9f3 	bl	80079c8 <tcp_listen_input>
      pbuf_free(p);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f7fd ffea 	bl	80055bc <pbuf_free>
      return;
 80075e8:	e1a6      	b.n	8007938 <tcp_input+0x760>
 80075ea:	bf00      	nop
 80075ec:	0800f21c 	.word	0x0800f21c
 80075f0:	0800f2b4 	.word	0x0800f2b4
 80075f4:	0800f260 	.word	0x0800f260
 80075f8:	0800f2dc 	.word	0x0800f2dc
 80075fc:	0800f308 	.word	0x0800f308
 8007600:	20006c70 	.word	0x20006c70
 8007604:	200036ec 	.word	0x200036ec
 8007608:	0800f330 	.word	0x0800f330
 800760c:	20006c54 	.word	0x20006c54
 8007610:	0800f35c 	.word	0x0800f35c
 8007614:	20006c58 	.word	0x20006c58
 8007618:	0800f388 	.word	0x0800f388
 800761c:	20006c50 	.word	0x20006c50
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	2b00      	cmp	r3, #0
 8007624:	f000 8156 	beq.w	80078d4 <tcp_input+0x6fc>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8007628:	4b94      	ldr	r3, [pc, #592]	@ (800787c <tcp_input+0x6a4>)
 800762a:	2200      	movs	r2, #0
 800762c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	891a      	ldrh	r2, [r3, #8]
 8007632:	4b92      	ldr	r3, [pc, #584]	@ (800787c <tcp_input+0x6a4>)
 8007634:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8007636:	4a91      	ldr	r2, [pc, #580]	@ (800787c <tcp_input+0x6a4>)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800763c:	4b90      	ldr	r3, [pc, #576]	@ (8007880 <tcp_input+0x6a8>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a8e      	ldr	r2, [pc, #568]	@ (800787c <tcp_input+0x6a4>)
 8007642:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8007644:	4b8f      	ldr	r3, [pc, #572]	@ (8007884 <tcp_input+0x6ac>)
 8007646:	2200      	movs	r2, #0
 8007648:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800764a:	4b8f      	ldr	r3, [pc, #572]	@ (8007888 <tcp_input+0x6b0>)
 800764c:	2200      	movs	r2, #0
 800764e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8007650:	4b8e      	ldr	r3, [pc, #568]	@ (800788c <tcp_input+0x6b4>)
 8007652:	2200      	movs	r2, #0
 8007654:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8007656:	4b8e      	ldr	r3, [pc, #568]	@ (8007890 <tcp_input+0x6b8>)
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	f003 0308 	and.w	r3, r3, #8
 800765e:	2b00      	cmp	r3, #0
 8007660:	d006      	beq.n	8007670 <tcp_input+0x498>
      p->flags |= PBUF_FLAG_PUSH;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	7b5b      	ldrb	r3, [r3, #13]
 8007666:	f043 0301 	orr.w	r3, r3, #1
 800766a:	b2da      	uxtb	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007674:	2b00      	cmp	r3, #0
 8007676:	d017      	beq.n	80076a8 <tcp_input+0x4d0>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007678:	69f8      	ldr	r0, [r7, #28]
 800767a:	f7ff fa01 	bl	8006a80 <tcp_process_refused_data>
 800767e:	4603      	mov	r3, r0
 8007680:	f113 0f0d 	cmn.w	r3, #13
 8007684:	d007      	beq.n	8007696 <tcp_input+0x4be>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00c      	beq.n	80076a8 <tcp_input+0x4d0>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800768e:	4b81      	ldr	r3, [pc, #516]	@ (8007894 <tcp_input+0x6bc>)
 8007690:	881b      	ldrh	r3, [r3, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d008      	beq.n	80076a8 <tcp_input+0x4d0>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800769a:	2b00      	cmp	r3, #0
 800769c:	f040 80e2 	bne.w	8007864 <tcp_input+0x68c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80076a0:	69f8      	ldr	r0, [r7, #28]
 80076a2:	f002 fe1b 	bl	800a2dc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80076a6:	e0dd      	b.n	8007864 <tcp_input+0x68c>
      }
    }
    tcp_input_pcb = pcb;
 80076a8:	4a7b      	ldr	r2, [pc, #492]	@ (8007898 <tcp_input+0x6c0>)
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80076ae:	69f8      	ldr	r0, [r7, #28]
 80076b0:	f000 fad2 	bl	8007c58 <tcp_process>
 80076b4:	4603      	mov	r3, r0
 80076b6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80076b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80076bc:	f113 0f0d 	cmn.w	r3, #13
 80076c0:	f000 80d2 	beq.w	8007868 <tcp_input+0x690>
      if (recv_flags & TF_RESET) {
 80076c4:	4b70      	ldr	r3, [pc, #448]	@ (8007888 <tcp_input+0x6b0>)
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	f003 0308 	and.w	r3, r3, #8
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d016      	beq.n	80076fe <tcp_input+0x526>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d008      	beq.n	80076ec <tcp_input+0x514>
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076e0:	69fa      	ldr	r2, [r7, #28]
 80076e2:	6912      	ldr	r2, [r2, #16]
 80076e4:	f06f 010d 	mvn.w	r1, #13
 80076e8:	4610      	mov	r0, r2
 80076ea:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80076ec:	69f9      	ldr	r1, [r7, #28]
 80076ee:	486b      	ldr	r0, [pc, #428]	@ (800789c <tcp_input+0x6c4>)
 80076f0:	f7ff fc5a 	bl	8006fa8 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 80076f4:	69f9      	ldr	r1, [r7, #28]
 80076f6:	2001      	movs	r0, #1
 80076f8:	f7fd fa44 	bl	8004b84 <memp_free>
 80076fc:	e0d7      	b.n	80078ae <tcp_input+0x6d6>
      } else {
        err = ERR_OK;
 80076fe:	2300      	movs	r3, #0
 8007700:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8007702:	4b62      	ldr	r3, [pc, #392]	@ (800788c <tcp_input+0x6b4>)
 8007704:	881b      	ldrh	r3, [r3, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d01b      	beq.n	8007742 <tcp_input+0x56a>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800770a:	4b60      	ldr	r3, [pc, #384]	@ (800788c <tcp_input+0x6b4>)
 800770c:	881b      	ldrh	r3, [r3, #0]
 800770e:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007714:	2b00      	cmp	r3, #0
 8007716:	d009      	beq.n	800772c <tcp_input+0x554>
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800771c:	69fa      	ldr	r2, [r7, #28]
 800771e:	6910      	ldr	r0, [r2, #16]
 8007720:	89fa      	ldrh	r2, [r7, #14]
 8007722:	69f9      	ldr	r1, [r7, #28]
 8007724:	4798      	blx	r3
 8007726:	4603      	mov	r3, r0
 8007728:	74fb      	strb	r3, [r7, #19]
 800772a:	e001      	b.n	8007730 <tcp_input+0x558>
 800772c:	2300      	movs	r3, #0
 800772e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007730:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007734:	f113 0f0d 	cmn.w	r3, #13
 8007738:	f000 8098 	beq.w	800786c <tcp_input+0x694>
              goto aborted;
            }
          }
          recv_acked = 0;
 800773c:	4b53      	ldr	r3, [pc, #332]	@ (800788c <tcp_input+0x6b4>)
 800773e:	2200      	movs	r2, #0
 8007740:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8007742:	69f8      	ldr	r0, [r7, #28]
 8007744:	f000 f90e 	bl	8007964 <tcp_input_delayed_close>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	f040 8090 	bne.w	8007870 <tcp_input+0x698>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8007750:	4b4c      	ldr	r3, [pc, #304]	@ (8007884 <tcp_input+0x6ac>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d041      	beq.n	80077dc <tcp_input+0x604>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800775c:	2b00      	cmp	r3, #0
 800775e:	d006      	beq.n	800776e <tcp_input+0x596>
 8007760:	4b4f      	ldr	r3, [pc, #316]	@ (80078a0 <tcp_input+0x6c8>)
 8007762:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 8007766:	494f      	ldr	r1, [pc, #316]	@ (80078a4 <tcp_input+0x6cc>)
 8007768:	484f      	ldr	r0, [pc, #316]	@ (80078a8 <tcp_input+0x6d0>)
 800776a:	f006 f81f 	bl	800d7ac <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	7e9b      	ldrb	r3, [r3, #26]
 8007772:	f003 0310 	and.w	r3, r3, #16
 8007776:	2b00      	cmp	r3, #0
 8007778:	d008      	beq.n	800778c <tcp_input+0x5b4>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800777a:	4b42      	ldr	r3, [pc, #264]	@ (8007884 <tcp_input+0x6ac>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4618      	mov	r0, r3
 8007780:	f7fd ff1c 	bl	80055bc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8007784:	69f8      	ldr	r0, [r7, #28]
 8007786:	f7fe fc0f 	bl	8005fa8 <tcp_abort>
            goto aborted;
 800778a:	e090      	b.n	80078ae <tcp_input+0x6d6>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00c      	beq.n	80077b0 <tcp_input+0x5d8>
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	6918      	ldr	r0, [r3, #16]
 80077a0:	4b38      	ldr	r3, [pc, #224]	@ (8007884 <tcp_input+0x6ac>)
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	2300      	movs	r3, #0
 80077a6:	69f9      	ldr	r1, [r7, #28]
 80077a8:	47a0      	blx	r4
 80077aa:	4603      	mov	r3, r0
 80077ac:	74fb      	strb	r3, [r7, #19]
 80077ae:	e008      	b.n	80077c2 <tcp_input+0x5ea>
 80077b0:	4b34      	ldr	r3, [pc, #208]	@ (8007884 <tcp_input+0x6ac>)
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	2300      	movs	r3, #0
 80077b6:	69f9      	ldr	r1, [r7, #28]
 80077b8:	2000      	movs	r0, #0
 80077ba:	f7ff fa13 	bl	8006be4 <tcp_recv_null>
 80077be:	4603      	mov	r3, r0
 80077c0:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80077c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80077c6:	f113 0f0d 	cmn.w	r3, #13
 80077ca:	d053      	beq.n	8007874 <tcp_input+0x69c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80077cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d003      	beq.n	80077dc <tcp_input+0x604>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80077d4:	4b2b      	ldr	r3, [pc, #172]	@ (8007884 <tcp_input+0x6ac>)
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	69fb      	ldr	r3, [r7, #28]
 80077da:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80077dc:	4b2a      	ldr	r3, [pc, #168]	@ (8007888 <tcp_input+0x6b0>)
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	f003 0320 	and.w	r3, r3, #32
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d030      	beq.n	800784a <tcp_input+0x672>
          if (pcb->refused_data != NULL) {
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d009      	beq.n	8007804 <tcp_input+0x62c>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077f4:	7b5a      	ldrb	r2, [r3, #13]
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077fa:	f042 0220 	orr.w	r2, r2, #32
 80077fe:	b2d2      	uxtb	r2, r2
 8007800:	735a      	strb	r2, [r3, #13]
 8007802:	e022      	b.n	800784a <tcp_input+0x672>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007808:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800780c:	d005      	beq.n	800781a <tcp_input+0x642>
              pcb->rcv_wnd++;
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007812:	3301      	adds	r3, #1
 8007814:	b29a      	uxth	r2, r3
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007820:	2b00      	cmp	r3, #0
 8007822:	d00b      	beq.n	800783c <tcp_input+0x664>
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	6918      	ldr	r0, [r3, #16]
 800782e:	2300      	movs	r3, #0
 8007830:	2200      	movs	r2, #0
 8007832:	69f9      	ldr	r1, [r7, #28]
 8007834:	47a0      	blx	r4
 8007836:	4603      	mov	r3, r0
 8007838:	74fb      	strb	r3, [r7, #19]
 800783a:	e001      	b.n	8007840 <tcp_input+0x668>
 800783c:	2300      	movs	r3, #0
 800783e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007840:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007844:	f113 0f0d 	cmn.w	r3, #13
 8007848:	d016      	beq.n	8007878 <tcp_input+0x6a0>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800784a:	4b13      	ldr	r3, [pc, #76]	@ (8007898 <tcp_input+0x6c0>)
 800784c:	2200      	movs	r2, #0
 800784e:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007850:	69f8      	ldr	r0, [r7, #28]
 8007852:	f000 f887 	bl	8007964 <tcp_input_delayed_close>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d127      	bne.n	80078ac <tcp_input+0x6d4>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800785c:	69f8      	ldr	r0, [r7, #28]
 800785e:	f002 fd99 	bl	800a394 <tcp_output>
 8007862:	e024      	b.n	80078ae <tcp_input+0x6d6>
        goto aborted;
 8007864:	bf00      	nop
 8007866:	e022      	b.n	80078ae <tcp_input+0x6d6>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8007868:	bf00      	nop
 800786a:	e020      	b.n	80078ae <tcp_input+0x6d6>
              goto aborted;
 800786c:	bf00      	nop
 800786e:	e01e      	b.n	80078ae <tcp_input+0x6d6>
          goto aborted;
 8007870:	bf00      	nop
 8007872:	e01c      	b.n	80078ae <tcp_input+0x6d6>
            goto aborted;
 8007874:	bf00      	nop
 8007876:	e01a      	b.n	80078ae <tcp_input+0x6d6>
              goto aborted;
 8007878:	bf00      	nop
 800787a:	e018      	b.n	80078ae <tcp_input+0x6d6>
 800787c:	20006c60 	.word	0x20006c60
 8007880:	20006c70 	.word	0x20006c70
 8007884:	20006c90 	.word	0x20006c90
 8007888:	20006c8d 	.word	0x20006c8d
 800788c:	20006c88 	.word	0x20006c88
 8007890:	20006c8c 	.word	0x20006c8c
 8007894:	20006c8a 	.word	0x20006c8a
 8007898:	20006c94 	.word	0x20006c94
 800789c:	20006c54 	.word	0x20006c54
 80078a0:	0800f21c 	.word	0x0800f21c
 80078a4:	0800f3b8 	.word	0x0800f3b8
 80078a8:	0800f260 	.word	0x0800f260
          goto aborted;
 80078ac:	bf00      	nop
    tcp_input_pcb = NULL;
 80078ae:	4b24      	ldr	r3, [pc, #144]	@ (8007940 <tcp_input+0x768>)
 80078b0:	2200      	movs	r2, #0
 80078b2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80078b4:	4b23      	ldr	r3, [pc, #140]	@ (8007944 <tcp_input+0x76c>)
 80078b6:	2200      	movs	r2, #0
 80078b8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 80078ba:	4b23      	ldr	r3, [pc, #140]	@ (8007948 <tcp_input+0x770>)
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d039      	beq.n	8007936 <tcp_input+0x75e>
    {
      pbuf_free(inseg.p);
 80078c2:	4b21      	ldr	r3, [pc, #132]	@ (8007948 <tcp_input+0x770>)
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7fd fe78 	bl	80055bc <pbuf_free>
      inseg.p = NULL;
 80078cc:	4b1e      	ldr	r3, [pc, #120]	@ (8007948 <tcp_input+0x770>)
 80078ce:	2200      	movs	r2, #0
 80078d0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80078d2:	e030      	b.n	8007936 <tcp_input+0x75e>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80078d4:	4b1d      	ldr	r3, [pc, #116]	@ (800794c <tcp_input+0x774>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	899b      	ldrh	r3, [r3, #12]
 80078da:	b29b      	uxth	r3, r3
 80078dc:	4618      	mov	r0, r3
 80078de:	f7fc fd5c 	bl	800439a <lwip_htons>
 80078e2:	4603      	mov	r3, r0
 80078e4:	f003 0304 	and.w	r3, r3, #4
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d115      	bne.n	8007918 <tcp_input+0x740>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80078ec:	4b18      	ldr	r3, [pc, #96]	@ (8007950 <tcp_input+0x778>)
 80078ee:	6818      	ldr	r0, [r3, #0]
 80078f0:	4b18      	ldr	r3, [pc, #96]	@ (8007954 <tcp_input+0x77c>)
 80078f2:	881b      	ldrh	r3, [r3, #0]
 80078f4:	461a      	mov	r2, r3
 80078f6:	4b18      	ldr	r3, [pc, #96]	@ (8007958 <tcp_input+0x780>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80078fc:	4b13      	ldr	r3, [pc, #76]	@ (800794c <tcp_input+0x774>)
 80078fe:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007900:	885b      	ldrh	r3, [r3, #2]
 8007902:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007904:	4a11      	ldr	r2, [pc, #68]	@ (800794c <tcp_input+0x774>)
 8007906:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007908:	8812      	ldrh	r2, [r2, #0]
 800790a:	b292      	uxth	r2, r2
 800790c:	9201      	str	r2, [sp, #4]
 800790e:	9300      	str	r3, [sp, #0]
 8007910:	4b12      	ldr	r3, [pc, #72]	@ (800795c <tcp_input+0x784>)
 8007912:	4a13      	ldr	r2, [pc, #76]	@ (8007960 <tcp_input+0x788>)
 8007914:	f002 ffc2 	bl	800a89c <tcp_rst>
    pbuf_free(p);
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f7fd fe4f 	bl	80055bc <pbuf_free>
  return;
 800791e:	e00a      	b.n	8007936 <tcp_input+0x75e>
    goto dropped;
 8007920:	bf00      	nop
 8007922:	e004      	b.n	800792e <tcp_input+0x756>
    goto dropped;
 8007924:	bf00      	nop
 8007926:	e002      	b.n	800792e <tcp_input+0x756>
    goto dropped;
 8007928:	bf00      	nop
 800792a:	e000      	b.n	800792e <tcp_input+0x756>
      goto dropped;
 800792c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f7fd fe44 	bl	80055bc <pbuf_free>
 8007934:	e000      	b.n	8007938 <tcp_input+0x760>
  return;
 8007936:	bf00      	nop
}
 8007938:	3724      	adds	r7, #36	@ 0x24
 800793a:	46bd      	mov	sp, r7
 800793c:	bd90      	pop	{r4, r7, pc}
 800793e:	bf00      	nop
 8007940:	20006c94 	.word	0x20006c94
 8007944:	20006c90 	.word	0x20006c90
 8007948:	20006c60 	.word	0x20006c60
 800794c:	20006c70 	.word	0x20006c70
 8007950:	20006c84 	.word	0x20006c84
 8007954:	20006c8a 	.word	0x20006c8a
 8007958:	20006c80 	.word	0x20006c80
 800795c:	200036fc 	.word	0x200036fc
 8007960:	20003700 	.word	0x20003700

08007964 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b082      	sub	sp, #8
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800796c:	4b14      	ldr	r3, [pc, #80]	@ (80079c0 <tcp_input_delayed_close+0x5c>)
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	f003 0310 	and.w	r3, r3, #16
 8007974:	2b00      	cmp	r3, #0
 8007976:	d01d      	beq.n	80079b4 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	7e9b      	ldrb	r3, [r3, #26]
 800797c:	f003 0310 	and.w	r3, r3, #16
 8007980:	2b00      	cmp	r3, #0
 8007982:	d10d      	bne.n	80079a0 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800798a:	2b00      	cmp	r3, #0
 800798c:	d008      	beq.n	80079a0 <tcp_input_delayed_close+0x3c>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	6912      	ldr	r2, [r2, #16]
 8007998:	f06f 010e 	mvn.w	r1, #14
 800799c:	4610      	mov	r0, r2
 800799e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80079a0:	6879      	ldr	r1, [r7, #4]
 80079a2:	4808      	ldr	r0, [pc, #32]	@ (80079c4 <tcp_input_delayed_close+0x60>)
 80079a4:	f7ff fb00 	bl	8006fa8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80079a8:	6879      	ldr	r1, [r7, #4]
 80079aa:	2001      	movs	r0, #1
 80079ac:	f7fd f8ea 	bl	8004b84 <memp_free>
    return 1;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e000      	b.n	80079b6 <tcp_input_delayed_close+0x52>
  }
  return 0;
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3708      	adds	r7, #8
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	20006c8d 	.word	0x20006c8d
 80079c4:	20006c54 	.word	0x20006c54

080079c8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b088      	sub	sp, #32
 80079cc:	af02      	add	r7, sp, #8
 80079ce:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80079d0:	4b63      	ldr	r3, [pc, #396]	@ (8007b60 <tcp_listen_input+0x198>)
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	f003 0304 	and.w	r3, r3, #4
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f040 80bb 	bne.w	8007b54 <tcp_listen_input+0x18c>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80079de:	4b60      	ldr	r3, [pc, #384]	@ (8007b60 <tcp_listen_input+0x198>)
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	f003 0310 	and.w	r3, r3, #16
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d016      	beq.n	8007a18 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80079ea:	4b5e      	ldr	r3, [pc, #376]	@ (8007b64 <tcp_listen_input+0x19c>)
 80079ec:	6818      	ldr	r0, [r3, #0]
 80079ee:	4b5e      	ldr	r3, [pc, #376]	@ (8007b68 <tcp_listen_input+0x1a0>)
 80079f0:	881b      	ldrh	r3, [r3, #0]
 80079f2:	461a      	mov	r2, r3
 80079f4:	4b5d      	ldr	r3, [pc, #372]	@ (8007b6c <tcp_listen_input+0x1a4>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80079fa:	4b5d      	ldr	r3, [pc, #372]	@ (8007b70 <tcp_listen_input+0x1a8>)
 80079fc:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80079fe:	885b      	ldrh	r3, [r3, #2]
 8007a00:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007a02:	4a5b      	ldr	r2, [pc, #364]	@ (8007b70 <tcp_listen_input+0x1a8>)
 8007a04:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007a06:	8812      	ldrh	r2, [r2, #0]
 8007a08:	b292      	uxth	r2, r2
 8007a0a:	9201      	str	r2, [sp, #4]
 8007a0c:	9300      	str	r3, [sp, #0]
 8007a0e:	4b59      	ldr	r3, [pc, #356]	@ (8007b74 <tcp_listen_input+0x1ac>)
 8007a10:	4a59      	ldr	r2, [pc, #356]	@ (8007b78 <tcp_listen_input+0x1b0>)
 8007a12:	f002 ff43 	bl	800a89c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8007a16:	e09f      	b.n	8007b58 <tcp_listen_input+0x190>
  } else if (flags & TCP_SYN) {
 8007a18:	4b51      	ldr	r3, [pc, #324]	@ (8007b60 <tcp_listen_input+0x198>)
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	f003 0302 	and.w	r3, r3, #2
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 8099 	beq.w	8007b58 <tcp_listen_input+0x190>
    npcb = tcp_alloc(pcb->prio);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	7d5b      	ldrb	r3, [r3, #21]
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7ff f9b8 	bl	8006da0 <tcp_alloc>
 8007a30:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d111      	bne.n	8007a5c <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	699b      	ldr	r3, [r3, #24]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d00a      	beq.n	8007a56 <tcp_listen_input+0x8e>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	699b      	ldr	r3, [r3, #24]
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	6910      	ldr	r0, [r2, #16]
 8007a48:	f04f 32ff 	mov.w	r2, #4294967295
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	4798      	blx	r3
 8007a50:	4603      	mov	r3, r0
 8007a52:	73bb      	strb	r3, [r7, #14]
      return;
 8007a54:	e081      	b.n	8007b5a <tcp_listen_input+0x192>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007a56:	23f0      	movs	r3, #240	@ 0xf0
 8007a58:	73bb      	strb	r3, [r7, #14]
      return;
 8007a5a:	e07e      	b.n	8007b5a <tcp_listen_input+0x192>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007a5c:	4b47      	ldr	r3, [pc, #284]	@ (8007b7c <tcp_listen_input+0x1b4>)
 8007a5e:	695a      	ldr	r2, [r3, #20]
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8007a64:	4b45      	ldr	r3, [pc, #276]	@ (8007b7c <tcp_listen_input+0x1b4>)
 8007a66:	691a      	ldr	r2, [r3, #16]
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	8ada      	ldrh	r2, [r3, #22]
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8007a74:	4b3e      	ldr	r3, [pc, #248]	@ (8007b70 <tcp_listen_input+0x1a8>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	881b      	ldrh	r3, [r3, #0]
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	2203      	movs	r2, #3
 8007a84:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8007a86:	4b39      	ldr	r3, [pc, #228]	@ (8007b6c <tcp_listen_input+0x1a4>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	1c5a      	adds	r2, r3, #1
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8007a98:	6978      	ldr	r0, [r7, #20]
 8007a9a:	f7ff fb01 	bl	80070a0 <tcp_next_iss>
 8007a9e:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	693a      	ldr	r2, [r7, #16]
 8007aa4:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->snd_nxt = iss;
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	693a      	ldr	r2, [r7, #16]
 8007aaa:	64da      	str	r2, [r3, #76]	@ 0x4c
    npcb->lastack = iss;
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	693a      	ldr	r2, [r7, #16]
 8007ab0:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	693a      	ldr	r2, [r7, #16]
 8007ab6:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8007ab8:	4b2c      	ldr	r3, [pc, #176]	@ (8007b6c <tcp_listen_input+0x1a4>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	1e5a      	subs	r2, r3, #1
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->callback_arg = pcb->callback_arg;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	691a      	ldr	r2, [r3, #16]
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	679a      	str	r2, [r3, #120]	@ 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	7a1b      	ldrb	r3, [r3, #8]
 8007ad4:	f003 030c 	and.w	r3, r3, #12
 8007ad8:	b2da      	uxtb	r2, r3
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8007ade:	4b28      	ldr	r3, [pc, #160]	@ (8007b80 <tcp_listen_input+0x1b8>)
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	60da      	str	r2, [r3, #12]
 8007ae6:	4a26      	ldr	r2, [pc, #152]	@ (8007b80 <tcp_listen_input+0x1b8>)
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	6013      	str	r3, [r2, #0]
 8007aec:	f003 f91e 	bl	800ad2c <tcp_timer_needed>
 8007af0:	4b24      	ldr	r3, [pc, #144]	@ (8007b84 <tcp_listen_input+0x1bc>)
 8007af2:	2201      	movs	r2, #1
 8007af4:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8007af6:	6978      	ldr	r0, [r7, #20]
 8007af8:	f001 fd0c 	bl	8009514 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8007afc:	4b1c      	ldr	r3, [pc, #112]	@ (8007b70 <tcp_listen_input+0x1a8>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	89db      	ldrh	r3, [r3, #14]
 8007b02:	b29a      	uxth	r2, r3
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	3304      	adds	r3, #4
 8007b1e:	4619      	mov	r1, r3
 8007b20:	4610      	mov	r0, r2
 8007b22:	f7ff fad3 	bl	80070cc <tcp_eff_send_mss_impl>
 8007b26:	4603      	mov	r3, r0
 8007b28:	461a      	mov	r2, r3
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007b2e:	2112      	movs	r1, #18
 8007b30:	6978      	ldr	r0, [r7, #20]
 8007b32:	f002 fad7 	bl	800a0e4 <tcp_enqueue_flags>
 8007b36:	4603      	mov	r3, r0
 8007b38:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8007b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d004      	beq.n	8007b4c <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 8007b42:	2100      	movs	r1, #0
 8007b44:	6978      	ldr	r0, [r7, #20]
 8007b46:	f7fe f97d 	bl	8005e44 <tcp_abandon>
      return;
 8007b4a:	e006      	b.n	8007b5a <tcp_listen_input+0x192>
    tcp_output(npcb);
 8007b4c:	6978      	ldr	r0, [r7, #20]
 8007b4e:	f002 fc21 	bl	800a394 <tcp_output>
  return;
 8007b52:	e001      	b.n	8007b58 <tcp_listen_input+0x190>
    return;
 8007b54:	bf00      	nop
 8007b56:	e000      	b.n	8007b5a <tcp_listen_input+0x192>
  return;
 8007b58:	bf00      	nop
}
 8007b5a:	3718      	adds	r7, #24
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	20006c8c 	.word	0x20006c8c
 8007b64:	20006c84 	.word	0x20006c84
 8007b68:	20006c8a 	.word	0x20006c8a
 8007b6c:	20006c80 	.word	0x20006c80
 8007b70:	20006c70 	.word	0x20006c70
 8007b74:	200036fc 	.word	0x200036fc
 8007b78:	20003700 	.word	0x20003700
 8007b7c:	200036ec 	.word	0x200036ec
 8007b80:	20006c54 	.word	0x20006c54
 8007b84:	20006c5c 	.word	0x20006c5c

08007b88 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af02      	add	r7, sp, #8
 8007b8e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8007b90:	4b29      	ldr	r3, [pc, #164]	@ (8007c38 <tcp_timewait_input+0xb0>)
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	f003 0304 	and.w	r3, r3, #4
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d146      	bne.n	8007c2a <tcp_timewait_input+0xa2>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8007b9c:	4b26      	ldr	r3, [pc, #152]	@ (8007c38 <tcp_timewait_input+0xb0>)
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	f003 0302 	and.w	r3, r3, #2
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d027      	beq.n	8007bf8 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007ba8:	4b24      	ldr	r3, [pc, #144]	@ (8007c3c <tcp_timewait_input+0xb4>)
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	db2a      	blt.n	8007c0c <tcp_timewait_input+0x84>
 8007bb6:	4b21      	ldr	r3, [pc, #132]	@ (8007c3c <tcp_timewait_input+0xb4>)
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bbe:	6879      	ldr	r1, [r7, #4]
 8007bc0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8007bc2:	440b      	add	r3, r1
 8007bc4:	1ad3      	subs	r3, r2, r3
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	dc20      	bgt.n	8007c0c <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007bca:	4b1d      	ldr	r3, [pc, #116]	@ (8007c40 <tcp_timewait_input+0xb8>)
 8007bcc:	6818      	ldr	r0, [r3, #0]
 8007bce:	4b1d      	ldr	r3, [pc, #116]	@ (8007c44 <tcp_timewait_input+0xbc>)
 8007bd0:	881b      	ldrh	r3, [r3, #0]
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	4b19      	ldr	r3, [pc, #100]	@ (8007c3c <tcp_timewait_input+0xb4>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007bda:	4b1b      	ldr	r3, [pc, #108]	@ (8007c48 <tcp_timewait_input+0xc0>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007bde:	885b      	ldrh	r3, [r3, #2]
 8007be0:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007be2:	4a19      	ldr	r2, [pc, #100]	@ (8007c48 <tcp_timewait_input+0xc0>)
 8007be4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007be6:	8812      	ldrh	r2, [r2, #0]
 8007be8:	b292      	uxth	r2, r2
 8007bea:	9201      	str	r2, [sp, #4]
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	4b17      	ldr	r3, [pc, #92]	@ (8007c4c <tcp_timewait_input+0xc4>)
 8007bf0:	4a17      	ldr	r2, [pc, #92]	@ (8007c50 <tcp_timewait_input+0xc8>)
 8007bf2:	f002 fe53 	bl	800a89c <tcp_rst>
      return;
 8007bf6:	e01b      	b.n	8007c30 <tcp_timewait_input+0xa8>
    }
  } else if (flags & TCP_FIN) {
 8007bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8007c38 <tcp_timewait_input+0xb0>)
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	f003 0301 	and.w	r3, r3, #1
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d003      	beq.n	8007c0c <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8007c04:	4b13      	ldr	r3, [pc, #76]	@ (8007c54 <tcp_timewait_input+0xcc>)
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8007c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8007c44 <tcp_timewait_input+0xbc>)
 8007c0e:	881b      	ldrh	r3, [r3, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d00c      	beq.n	8007c2e <tcp_timewait_input+0xa6>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	7e9b      	ldrb	r3, [r3, #26]
 8007c18:	f043 0302 	orr.w	r3, r3, #2
 8007c1c:	b2da      	uxtb	r2, r3
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f002 fbb6 	bl	800a394 <tcp_output>
  }
  return;
 8007c28:	e001      	b.n	8007c2e <tcp_timewait_input+0xa6>
    return;
 8007c2a:	bf00      	nop
 8007c2c:	e000      	b.n	8007c30 <tcp_timewait_input+0xa8>
  return;
 8007c2e:	bf00      	nop
}
 8007c30:	3708      	adds	r7, #8
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop
 8007c38:	20006c8c 	.word	0x20006c8c
 8007c3c:	20006c80 	.word	0x20006c80
 8007c40:	20006c84 	.word	0x20006c84
 8007c44:	20006c8a 	.word	0x20006c8a
 8007c48:	20006c70 	.word	0x20006c70
 8007c4c:	200036fc 	.word	0x200036fc
 8007c50:	20003700 	.word	0x20003700
 8007c54:	20006c48 	.word	0x20006c48

08007c58 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b08a      	sub	sp, #40	@ 0x28
 8007c5c:	af02      	add	r7, sp, #8
 8007c5e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8007c60:	2300      	movs	r3, #0
 8007c62:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8007c64:	2300      	movs	r3, #0
 8007c66:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8007c68:	4b93      	ldr	r3, [pc, #588]	@ (8007eb8 <tcp_process+0x260>)
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	f003 0304 	and.w	r3, r3, #4
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d04e      	beq.n	8007d12 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	7d1b      	ldrb	r3, [r3, #20]
 8007c78:	2b02      	cmp	r3, #2
 8007c7a:	d108      	bne.n	8007c8e <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c80:	4b8e      	ldr	r3, [pc, #568]	@ (8007ebc <tcp_process+0x264>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d123      	bne.n	8007cd0 <tcp_process+0x78>
        acceptable = 1;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	76fb      	strb	r3, [r7, #27]
 8007c8c:	e020      	b.n	8007cd0 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c92:	4b8b      	ldr	r3, [pc, #556]	@ (8007ec0 <tcp_process+0x268>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d102      	bne.n	8007ca0 <tcp_process+0x48>
        acceptable = 1;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	76fb      	strb	r3, [r7, #27]
 8007c9e:	e017      	b.n	8007cd0 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007ca0:	4b87      	ldr	r3, [pc, #540]	@ (8007ec0 <tcp_process+0x268>)
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ca8:	1ad3      	subs	r3, r2, r3
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	db10      	blt.n	8007cd0 <tcp_process+0x78>
 8007cae:	4b84      	ldr	r3, [pc, #528]	@ (8007ec0 <tcp_process+0x268>)
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cb6:	6879      	ldr	r1, [r7, #4]
 8007cb8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8007cba:	440b      	add	r3, r1
 8007cbc:	1ad3      	subs	r3, r2, r3
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	dc06      	bgt.n	8007cd0 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	7e9b      	ldrb	r3, [r3, #26]
 8007cc6:	f043 0302 	orr.w	r3, r3, #2
 8007cca:	b2da      	uxtb	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8007cd0:	7efb      	ldrb	r3, [r7, #27]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d01b      	beq.n	8007d0e <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	7d1b      	ldrb	r3, [r3, #20]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d106      	bne.n	8007cec <tcp_process+0x94>
 8007cde:	4b79      	ldr	r3, [pc, #484]	@ (8007ec4 <tcp_process+0x26c>)
 8007ce0:	f240 22e7 	movw	r2, #743	@ 0x2e7
 8007ce4:	4978      	ldr	r1, [pc, #480]	@ (8007ec8 <tcp_process+0x270>)
 8007ce6:	4879      	ldr	r0, [pc, #484]	@ (8007ecc <tcp_process+0x274>)
 8007ce8:	f005 fd60 	bl	800d7ac <iprintf>
      recv_flags |= TF_RESET;
 8007cec:	4b78      	ldr	r3, [pc, #480]	@ (8007ed0 <tcp_process+0x278>)
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	f043 0308 	orr.w	r3, r3, #8
 8007cf4:	b2da      	uxtb	r2, r3
 8007cf6:	4b76      	ldr	r3, [pc, #472]	@ (8007ed0 <tcp_process+0x278>)
 8007cf8:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	7e9b      	ldrb	r3, [r3, #26]
 8007cfe:	f023 0301 	bic.w	r3, r3, #1
 8007d02:	b2da      	uxtb	r2, r3
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 8007d08:	f06f 030d 	mvn.w	r3, #13
 8007d0c:	e348      	b.n	80083a0 <tcp_process+0x748>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	e346      	b.n	80083a0 <tcp_process+0x748>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8007d12:	4b69      	ldr	r3, [pc, #420]	@ (8007eb8 <tcp_process+0x260>)
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	f003 0302 	and.w	r3, r3, #2
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d010      	beq.n	8007d40 <tcp_process+0xe8>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	7d1b      	ldrb	r3, [r3, #20]
 8007d22:	2b02      	cmp	r3, #2
 8007d24:	d00c      	beq.n	8007d40 <tcp_process+0xe8>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	7d1b      	ldrb	r3, [r3, #20]
 8007d2a:	2b03      	cmp	r3, #3
 8007d2c:	d008      	beq.n	8007d40 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	7e9b      	ldrb	r3, [r3, #26]
 8007d32:	f043 0302 	orr.w	r3, r3, #2
 8007d36:	b2da      	uxtb	r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	e32f      	b.n	80083a0 <tcp_process+0x748>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	7e9b      	ldrb	r3, [r3, #26]
 8007d44:	f003 0310 	and.w	r3, r3, #16
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d103      	bne.n	8007d54 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8007d4c:	4b61      	ldr	r3, [pc, #388]	@ (8007ed4 <tcp_process+0x27c>)
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96

  tcp_parseopt(pcb);
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f001 fbd9 	bl	8009514 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	7d1b      	ldrb	r3, [r3, #20]
 8007d66:	3b02      	subs	r3, #2
 8007d68:	2b07      	cmp	r3, #7
 8007d6a:	f200 8309 	bhi.w	8008380 <tcp_process+0x728>
 8007d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d74 <tcp_process+0x11c>)
 8007d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d74:	08007d95 	.word	0x08007d95
 8007d78:	08007f8b 	.word	0x08007f8b
 8007d7c:	080080e3 	.word	0x080080e3
 8007d80:	0800810d 	.word	0x0800810d
 8007d84:	0800822f 	.word	0x0800822f
 8007d88:	080080e3 	.word	0x080080e3
 8007d8c:	080082bb 	.word	0x080082bb
 8007d90:	0800834b 	.word	0x0800834b
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8007d94:	4b48      	ldr	r3, [pc, #288]	@ (8007eb8 <tcp_process+0x260>)
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	f003 0310 	and.w	r3, r3, #16
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	f000 80ca 	beq.w	8007f36 <tcp_process+0x2de>
 8007da2:	4b45      	ldr	r3, [pc, #276]	@ (8007eb8 <tcp_process+0x260>)
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	f003 0302 	and.w	r3, r3, #2
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f000 80c3 	beq.w	8007f36 <tcp_process+0x2de>
        && (ackno == pcb->lastack + 1)) {
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007db4:	1c5a      	adds	r2, r3, #1
 8007db6:	4b41      	ldr	r3, [pc, #260]	@ (8007ebc <tcp_process+0x264>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	f040 80bb 	bne.w	8007f36 <tcp_process+0x2de>
      pcb->rcv_nxt = seqno + 1;
 8007dc0:	4b3f      	ldr	r3, [pc, #252]	@ (8007ec0 <tcp_process+0x268>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	1c5a      	adds	r2, r3, #1
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	625a      	str	r2, [r3, #36]	@ 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	62da      	str	r2, [r3, #44]	@ 0x2c
      pcb->lastack = ackno;
 8007dd2:	4b3a      	ldr	r3, [pc, #232]	@ (8007ebc <tcp_process+0x264>)
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	645a      	str	r2, [r3, #68]	@ 0x44
      pcb->snd_wnd = tcphdr->wnd;
 8007dda:	4b3f      	ldr	r3, [pc, #252]	@ (8007ed8 <tcp_process+0x280>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	89db      	ldrh	r3, [r3, #14]
 8007de0:	b29a      	uxth	r2, r3
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8007df4:	4b32      	ldr	r3, [pc, #200]	@ (8007ec0 <tcp_process+0x268>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	1e5a      	subs	r2, r3, #1
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	651a      	str	r2, [r3, #80]	@ 0x50
      pcb->state = ESTABLISHED;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2204      	movs	r2, #4
 8007e02:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	3304      	adds	r3, #4
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	4610      	mov	r0, r2
 8007e10:	f7ff f95c 	bl	80070cc <tcp_eff_send_mss_impl>
 8007e14:	4603      	mov	r3, r0
 8007e16:	461a      	mov	r2, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007e20:	005b      	lsls	r3, r3, #1
 8007e22:	f241 121c 	movw	r2, #4380	@ 0x111c
 8007e26:	429a      	cmp	r2, r3
 8007e28:	bf38      	it	cc
 8007e2a:	461a      	movcc	r2, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	4293      	cmp	r3, r2
 8007e34:	bf28      	it	cs
 8007e36:	4613      	movcs	r3, r2
 8007e38:	b29a      	uxth	r2, r3
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d106      	bne.n	8007e58 <tcp_process+0x200>
 8007e4a:	4b1e      	ldr	r3, [pc, #120]	@ (8007ec4 <tcp_process+0x26c>)
 8007e4c:	f240 321a 	movw	r2, #794	@ 0x31a
 8007e50:	4922      	ldr	r1, [pc, #136]	@ (8007edc <tcp_process+0x284>)
 8007e52:	481e      	ldr	r0, [pc, #120]	@ (8007ecc <tcp_process+0x274>)
 8007e54:	f005 fcaa 	bl	800d7ac <iprintf>
      --pcb->snd_queuelen;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007e5e:	3b01      	subs	r3, #1
 8007e60:	b29a      	uxth	r2, r3
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e6c:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d111      	bne.n	8007e98 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007e78:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d106      	bne.n	8007e8e <tcp_process+0x236>
 8007e80:	4b10      	ldr	r3, [pc, #64]	@ (8007ec4 <tcp_process+0x26c>)
 8007e82:	f240 3222 	movw	r2, #802	@ 0x322
 8007e86:	4916      	ldr	r1, [pc, #88]	@ (8007ee0 <tcp_process+0x288>)
 8007e88:	4810      	ldr	r0, [pc, #64]	@ (8007ecc <tcp_process+0x274>)
 8007e8a:	f005 fc8f 	bl	800d7ac <iprintf>
        pcb->unsent = rseg->next;
 8007e8e:	69fb      	ldr	r3, [r7, #28]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	669a      	str	r2, [r3, #104]	@ 0x68
 8007e96:	e003      	b.n	8007ea0 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 8007e98:	69fb      	ldr	r3, [r7, #28]
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      tcp_seg_free(rseg);
 8007ea0:	69f8      	ldr	r0, [r7, #28]
 8007ea2:	f7fe fe6b 	bl	8006b7c <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d11a      	bne.n	8007ee4 <tcp_process+0x28c>
        pcb->rtime = -1;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007eb4:	861a      	strh	r2, [r3, #48]	@ 0x30
 8007eb6:	e01c      	b.n	8007ef2 <tcp_process+0x29a>
 8007eb8:	20006c8c 	.word	0x20006c8c
 8007ebc:	20006c84 	.word	0x20006c84
 8007ec0:	20006c80 	.word	0x20006c80
 8007ec4:	0800f21c 	.word	0x0800f21c
 8007ec8:	0800f3d4 	.word	0x0800f3d4
 8007ecc:	0800f260 	.word	0x0800f260
 8007ed0:	20006c8d 	.word	0x20006c8d
 8007ed4:	20006c48 	.word	0x20006c48
 8007ed8:	20006c70 	.word	0x20006c70
 8007edc:	0800f3f4 	.word	0x0800f3f4
 8007ee0:	0800f40c 	.word	0x0800f40c
      } else {
        pcb->rtime = 0;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	861a      	strh	r2, [r3, #48]	@ 0x30
        pcb->nrtx = 0;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d00a      	beq.n	8007f12 <tcp_process+0x2ba>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	6910      	ldr	r0, [r2, #16]
 8007f06:	2200      	movs	r2, #0
 8007f08:	6879      	ldr	r1, [r7, #4]
 8007f0a:	4798      	blx	r3
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	76bb      	strb	r3, [r7, #26]
 8007f10:	e001      	b.n	8007f16 <tcp_process+0x2be>
 8007f12:	2300      	movs	r3, #0
 8007f14:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 8007f16:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007f1a:	f113 0f0d 	cmn.w	r3, #13
 8007f1e:	d102      	bne.n	8007f26 <tcp_process+0x2ce>
        return ERR_ABRT;
 8007f20:	f06f 030c 	mvn.w	r3, #12
 8007f24:	e23c      	b.n	80083a0 <tcp_process+0x748>
      }
      tcp_ack_now(pcb);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	7e9b      	ldrb	r3, [r3, #26]
 8007f2a:	f043 0302 	orr.w	r3, r3, #2
 8007f2e:	b2da      	uxtb	r2, r3
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 8007f34:	e226      	b.n	8008384 <tcp_process+0x72c>
    else if (flags & TCP_ACK) {
 8007f36:	4b93      	ldr	r3, [pc, #588]	@ (8008184 <tcp_process+0x52c>)
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	f003 0310 	and.w	r3, r3, #16
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	f000 8220 	beq.w	8008384 <tcp_process+0x72c>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007f44:	4b90      	ldr	r3, [pc, #576]	@ (8008188 <tcp_process+0x530>)
 8007f46:	6818      	ldr	r0, [r3, #0]
 8007f48:	4b90      	ldr	r3, [pc, #576]	@ (800818c <tcp_process+0x534>)
 8007f4a:	881b      	ldrh	r3, [r3, #0]
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	4b90      	ldr	r3, [pc, #576]	@ (8008190 <tcp_process+0x538>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007f54:	4b8f      	ldr	r3, [pc, #572]	@ (8008194 <tcp_process+0x53c>)
 8007f56:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007f58:	885b      	ldrh	r3, [r3, #2]
 8007f5a:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007f5c:	4a8d      	ldr	r2, [pc, #564]	@ (8008194 <tcp_process+0x53c>)
 8007f5e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007f60:	8812      	ldrh	r2, [r2, #0]
 8007f62:	b292      	uxth	r2, r2
 8007f64:	9201      	str	r2, [sp, #4]
 8007f66:	9300      	str	r3, [sp, #0]
 8007f68:	4b8b      	ldr	r3, [pc, #556]	@ (8008198 <tcp_process+0x540>)
 8007f6a:	4a8c      	ldr	r2, [pc, #560]	@ (800819c <tcp_process+0x544>)
 8007f6c:	f002 fc96 	bl	800a89c <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007f76:	2b05      	cmp	r3, #5
 8007f78:	f200 8204 	bhi.w	8008384 <tcp_process+0x72c>
        pcb->rtime = 0;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	861a      	strh	r2, [r3, #48]	@ 0x30
        tcp_rexmit_rto(pcb);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f002 fd00 	bl	800a988 <tcp_rexmit_rto>
    break;
 8007f88:	e1fc      	b.n	8008384 <tcp_process+0x72c>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 8007f8a:	4b7e      	ldr	r3, [pc, #504]	@ (8008184 <tcp_process+0x52c>)
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	f003 0310 	and.w	r3, r3, #16
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	f000 8091 	beq.w	80080ba <tcp_process+0x462>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8007f98:	4b7b      	ldr	r3, [pc, #492]	@ (8008188 <tcp_process+0x530>)
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fa0:	1ad3      	subs	r3, r2, r3
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	db71      	blt.n	800808c <tcp_process+0x434>
 8007fa8:	4b77      	ldr	r3, [pc, #476]	@ (8008188 <tcp_process+0x530>)
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fb0:	1ad3      	subs	r3, r2, r3
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	dc6a      	bgt.n	800808c <tcp_process+0x434>
        pcb->state = ESTABLISHED;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2204      	movs	r2, #4
 8007fba:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d00b      	beq.n	8007fdc <tcp_process+0x384>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007fc8:	699b      	ldr	r3, [r3, #24]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d106      	bne.n	8007fdc <tcp_process+0x384>
 8007fce:	4b74      	ldr	r3, [pc, #464]	@ (80081a0 <tcp_process+0x548>)
 8007fd0:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8007fd4:	4973      	ldr	r1, [pc, #460]	@ (80081a4 <tcp_process+0x54c>)
 8007fd6:	4874      	ldr	r0, [pc, #464]	@ (80081a8 <tcp_process+0x550>)
 8007fd8:	f005 fbe8 	bl	800d7ac <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d102      	bne.n	8007fea <tcp_process+0x392>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 8007fe4:	23fa      	movs	r3, #250	@ 0xfa
 8007fe6:	76bb      	strb	r3, [r7, #26]
 8007fe8:	e011      	b.n	800800e <tcp_process+0x3b6>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007fee:	699b      	ldr	r3, [r3, #24]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00a      	beq.n	800800a <tcp_process+0x3b2>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	6910      	ldr	r0, [r2, #16]
 8007ffe:	2200      	movs	r2, #0
 8008000:	6879      	ldr	r1, [r7, #4]
 8008002:	4798      	blx	r3
 8008004:	4603      	mov	r3, r0
 8008006:	76bb      	strb	r3, [r7, #26]
 8008008:	e001      	b.n	800800e <tcp_process+0x3b6>
 800800a:	23f0      	movs	r3, #240	@ 0xf0
 800800c:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800800e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d00a      	beq.n	800802c <tcp_process+0x3d4>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 8008016:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800801a:	f113 0f0d 	cmn.w	r3, #13
 800801e:	d002      	beq.n	8008026 <tcp_process+0x3ce>
            tcp_abort(pcb);
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f7fd ffc1 	bl	8005fa8 <tcp_abort>
          }
          return ERR_ABRT;
 8008026:	f06f 030c 	mvn.w	r3, #12
 800802a:	e1b9      	b.n	80083a0 <tcp_process+0x748>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 fa3d 	bl	80084ac <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 8008032:	4b5e      	ldr	r3, [pc, #376]	@ (80081ac <tcp_process+0x554>)
 8008034:	881b      	ldrh	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d005      	beq.n	8008046 <tcp_process+0x3ee>
          recv_acked--;
 800803a:	4b5c      	ldr	r3, [pc, #368]	@ (80081ac <tcp_process+0x554>)
 800803c:	881b      	ldrh	r3, [r3, #0]
 800803e:	3b01      	subs	r3, #1
 8008040:	b29a      	uxth	r2, r3
 8008042:	4b5a      	ldr	r3, [pc, #360]	@ (80081ac <tcp_process+0x554>)
 8008044:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800804a:	005b      	lsls	r3, r3, #1
 800804c:	f241 121c 	movw	r2, #4380	@ 0x111c
 8008050:	429a      	cmp	r2, r3
 8008052:	bf38      	it	cc
 8008054:	461a      	movcc	r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	4293      	cmp	r3, r2
 800805e:	bf28      	it	cs
 8008060:	4613      	movcs	r3, r2
 8008062:	b29a      	uxth	r2, r3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800806a:	4b51      	ldr	r3, [pc, #324]	@ (80081b0 <tcp_process+0x558>)
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	f003 0320 	and.w	r3, r3, #32
 8008072:	2b00      	cmp	r3, #0
 8008074:	d034      	beq.n	80080e0 <tcp_process+0x488>
          tcp_ack_now(pcb);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	7e9b      	ldrb	r3, [r3, #26]
 800807a:	f043 0302 	orr.w	r3, r3, #2
 800807e:	b2da      	uxtb	r2, r3
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2207      	movs	r2, #7
 8008088:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800808a:	e029      	b.n	80080e0 <tcp_process+0x488>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800808c:	4b3e      	ldr	r3, [pc, #248]	@ (8008188 <tcp_process+0x530>)
 800808e:	6818      	ldr	r0, [r3, #0]
 8008090:	4b3e      	ldr	r3, [pc, #248]	@ (800818c <tcp_process+0x534>)
 8008092:	881b      	ldrh	r3, [r3, #0]
 8008094:	461a      	mov	r2, r3
 8008096:	4b3e      	ldr	r3, [pc, #248]	@ (8008190 <tcp_process+0x538>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800809c:	4b3d      	ldr	r3, [pc, #244]	@ (8008194 <tcp_process+0x53c>)
 800809e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80080a0:	885b      	ldrh	r3, [r3, #2]
 80080a2:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80080a4:	4a3b      	ldr	r2, [pc, #236]	@ (8008194 <tcp_process+0x53c>)
 80080a6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80080a8:	8812      	ldrh	r2, [r2, #0]
 80080aa:	b292      	uxth	r2, r2
 80080ac:	9201      	str	r2, [sp, #4]
 80080ae:	9300      	str	r3, [sp, #0]
 80080b0:	4b39      	ldr	r3, [pc, #228]	@ (8008198 <tcp_process+0x540>)
 80080b2:	4a3a      	ldr	r2, [pc, #232]	@ (800819c <tcp_process+0x544>)
 80080b4:	f002 fbf2 	bl	800a89c <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 80080b8:	e166      	b.n	8008388 <tcp_process+0x730>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80080ba:	4b32      	ldr	r3, [pc, #200]	@ (8008184 <tcp_process+0x52c>)
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	f003 0302 	and.w	r3, r3, #2
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	f000 8160 	beq.w	8008388 <tcp_process+0x730>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080cc:	1e5a      	subs	r2, r3, #1
 80080ce:	4b30      	ldr	r3, [pc, #192]	@ (8008190 <tcp_process+0x538>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	f040 8158 	bne.w	8008388 <tcp_process+0x730>
      tcp_rexmit(pcb);
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f002 fc8b 	bl	800a9f4 <tcp_rexmit>
    break;
 80080de:	e153      	b.n	8008388 <tcp_process+0x730>
 80080e0:	e152      	b.n	8008388 <tcp_process+0x730>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 f9e2 	bl	80084ac <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 80080e8:	4b31      	ldr	r3, [pc, #196]	@ (80081b0 <tcp_process+0x558>)
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	f003 0320 	and.w	r3, r3, #32
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	f000 814b 	beq.w	800838c <tcp_process+0x734>
      tcp_ack_now(pcb);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	7e9b      	ldrb	r3, [r3, #26]
 80080fa:	f043 0302 	orr.w	r3, r3, #2
 80080fe:	b2da      	uxtb	r2, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2207      	movs	r2, #7
 8008108:	751a      	strb	r2, [r3, #20]
    }
    break;
 800810a:	e13f      	b.n	800838c <tcp_process+0x734>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 f9cd 	bl	80084ac <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8008112:	4b27      	ldr	r3, [pc, #156]	@ (80081b0 <tcp_process+0x558>)
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	f003 0320 	and.w	r3, r3, #32
 800811a:	2b00      	cmp	r3, #0
 800811c:	d070      	beq.n	8008200 <tcp_process+0x5a8>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800811e:	4b19      	ldr	r3, [pc, #100]	@ (8008184 <tcp_process+0x52c>)
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	f003 0310 	and.w	r3, r3, #16
 8008126:	2b00      	cmp	r3, #0
 8008128:	d05f      	beq.n	80081ea <tcp_process+0x592>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800812e:	4b16      	ldr	r3, [pc, #88]	@ (8008188 <tcp_process+0x530>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	429a      	cmp	r2, r3
 8008134:	d159      	bne.n	80081ea <tcp_process+0x592>
          pcb->unsent == NULL) {
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800813a:	2b00      	cmp	r3, #0
 800813c:	d155      	bne.n	80081ea <tcp_process+0x592>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	7e9b      	ldrb	r3, [r3, #26]
 8008142:	f043 0302 	orr.w	r3, r3, #2
 8008146:	b2da      	uxtb	r2, r3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f7fe fee9 	bl	8006f24 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008152:	4b18      	ldr	r3, [pc, #96]	@ (80081b4 <tcp_process+0x55c>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	429a      	cmp	r2, r3
 800815a:	d105      	bne.n	8008168 <tcp_process+0x510>
 800815c:	4b15      	ldr	r3, [pc, #84]	@ (80081b4 <tcp_process+0x55c>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	4a14      	ldr	r2, [pc, #80]	@ (80081b4 <tcp_process+0x55c>)
 8008164:	6013      	str	r3, [r2, #0]
 8008166:	e02d      	b.n	80081c4 <tcp_process+0x56c>
 8008168:	4b12      	ldr	r3, [pc, #72]	@ (80081b4 <tcp_process+0x55c>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	617b      	str	r3, [r7, #20]
 800816e:	e026      	b.n	80081be <tcp_process+0x566>
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	687a      	ldr	r2, [r7, #4]
 8008176:	429a      	cmp	r2, r3
 8008178:	d11e      	bne.n	80081b8 <tcp_process+0x560>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	68da      	ldr	r2, [r3, #12]
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	60da      	str	r2, [r3, #12]
 8008182:	e01f      	b.n	80081c4 <tcp_process+0x56c>
 8008184:	20006c8c 	.word	0x20006c8c
 8008188:	20006c84 	.word	0x20006c84
 800818c:	20006c8a 	.word	0x20006c8a
 8008190:	20006c80 	.word	0x20006c80
 8008194:	20006c70 	.word	0x20006c70
 8008198:	200036fc 	.word	0x200036fc
 800819c:	20003700 	.word	0x20003700
 80081a0:	0800f21c 	.word	0x0800f21c
 80081a4:	0800f420 	.word	0x0800f420
 80081a8:	0800f260 	.word	0x0800f260
 80081ac:	20006c88 	.word	0x20006c88
 80081b0:	20006c8d 	.word	0x20006c8d
 80081b4:	20006c54 	.word	0x20006c54
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	617b      	str	r3, [r7, #20]
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d1d5      	bne.n	8008170 <tcp_process+0x518>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	60da      	str	r2, [r3, #12]
 80081ca:	4b77      	ldr	r3, [pc, #476]	@ (80083a8 <tcp_process+0x750>)
 80081cc:	2201      	movs	r2, #1
 80081ce:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	220a      	movs	r2, #10
 80081d4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80081d6:	4b75      	ldr	r3, [pc, #468]	@ (80083ac <tcp_process+0x754>)
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	60da      	str	r2, [r3, #12]
 80081de:	4a73      	ldr	r2, [pc, #460]	@ (80083ac <tcp_process+0x754>)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6013      	str	r3, [r2, #0]
 80081e4:	f002 fda2 	bl	800ad2c <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 80081e8:	e0d2      	b.n	8008390 <tcp_process+0x738>
        tcp_ack_now(pcb);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	7e9b      	ldrb	r3, [r3, #26]
 80081ee:	f043 0302 	orr.w	r3, r3, #2
 80081f2:	b2da      	uxtb	r2, r3
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2208      	movs	r2, #8
 80081fc:	751a      	strb	r2, [r3, #20]
    break;
 80081fe:	e0c7      	b.n	8008390 <tcp_process+0x738>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008200:	4b6b      	ldr	r3, [pc, #428]	@ (80083b0 <tcp_process+0x758>)
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	f003 0310 	and.w	r3, r3, #16
 8008208:	2b00      	cmp	r3, #0
 800820a:	f000 80c1 	beq.w	8008390 <tcp_process+0x738>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008212:	4b68      	ldr	r3, [pc, #416]	@ (80083b4 <tcp_process+0x75c>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	429a      	cmp	r2, r3
 8008218:	f040 80ba 	bne.w	8008390 <tcp_process+0x738>
               pcb->unsent == NULL) {
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008220:	2b00      	cmp	r3, #0
 8008222:	f040 80b5 	bne.w	8008390 <tcp_process+0x738>
      pcb->state = FIN_WAIT_2;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2206      	movs	r2, #6
 800822a:	751a      	strb	r2, [r3, #20]
    break;
 800822c:	e0b0      	b.n	8008390 <tcp_process+0x738>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 f93c 	bl	80084ac <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8008234:	4b60      	ldr	r3, [pc, #384]	@ (80083b8 <tcp_process+0x760>)
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	f003 0320 	and.w	r3, r3, #32
 800823c:	2b00      	cmp	r3, #0
 800823e:	f000 80a9 	beq.w	8008394 <tcp_process+0x73c>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	7e9b      	ldrb	r3, [r3, #26]
 8008246:	f043 0302 	orr.w	r3, r3, #2
 800824a:	b2da      	uxtb	r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f7fe fe67 	bl	8006f24 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008256:	4b59      	ldr	r3, [pc, #356]	@ (80083bc <tcp_process+0x764>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	429a      	cmp	r2, r3
 800825e:	d105      	bne.n	800826c <tcp_process+0x614>
 8008260:	4b56      	ldr	r3, [pc, #344]	@ (80083bc <tcp_process+0x764>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	4a55      	ldr	r2, [pc, #340]	@ (80083bc <tcp_process+0x764>)
 8008268:	6013      	str	r3, [r2, #0]
 800826a:	e013      	b.n	8008294 <tcp_process+0x63c>
 800826c:	4b53      	ldr	r3, [pc, #332]	@ (80083bc <tcp_process+0x764>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	613b      	str	r3, [r7, #16]
 8008272:	e00c      	b.n	800828e <tcp_process+0x636>
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	68db      	ldr	r3, [r3, #12]
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	429a      	cmp	r2, r3
 800827c:	d104      	bne.n	8008288 <tcp_process+0x630>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	68da      	ldr	r2, [r3, #12]
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	60da      	str	r2, [r3, #12]
 8008286:	e005      	b.n	8008294 <tcp_process+0x63c>
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	613b      	str	r3, [r7, #16]
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d1ef      	bne.n	8008274 <tcp_process+0x61c>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	60da      	str	r2, [r3, #12]
 800829a:	4b43      	ldr	r3, [pc, #268]	@ (80083a8 <tcp_process+0x750>)
 800829c:	2201      	movs	r2, #1
 800829e:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	220a      	movs	r2, #10
 80082a4:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80082a6:	4b41      	ldr	r3, [pc, #260]	@ (80083ac <tcp_process+0x754>)
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	60da      	str	r2, [r3, #12]
 80082ae:	4a3f      	ldr	r2, [pc, #252]	@ (80083ac <tcp_process+0x754>)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6013      	str	r3, [r2, #0]
 80082b4:	f002 fd3a 	bl	800ad2c <tcp_timer_needed>
    }
    break;
 80082b8:	e06c      	b.n	8008394 <tcp_process+0x73c>
  case CLOSING:
    tcp_receive(pcb);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 f8f6 	bl	80084ac <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80082c0:	4b3b      	ldr	r3, [pc, #236]	@ (80083b0 <tcp_process+0x758>)
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	f003 0310 	and.w	r3, r3, #16
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d065      	beq.n	8008398 <tcp_process+0x740>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80082d0:	4b38      	ldr	r3, [pc, #224]	@ (80083b4 <tcp_process+0x75c>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d15f      	bne.n	8008398 <tcp_process+0x740>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d15b      	bne.n	8008398 <tcp_process+0x740>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f7fe fe1f 	bl	8006f24 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80082e6:	4b35      	ldr	r3, [pc, #212]	@ (80083bc <tcp_process+0x764>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d105      	bne.n	80082fc <tcp_process+0x6a4>
 80082f0:	4b32      	ldr	r3, [pc, #200]	@ (80083bc <tcp_process+0x764>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	4a31      	ldr	r2, [pc, #196]	@ (80083bc <tcp_process+0x764>)
 80082f8:	6013      	str	r3, [r2, #0]
 80082fa:	e013      	b.n	8008324 <tcp_process+0x6cc>
 80082fc:	4b2f      	ldr	r3, [pc, #188]	@ (80083bc <tcp_process+0x764>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	60fb      	str	r3, [r7, #12]
 8008302:	e00c      	b.n	800831e <tcp_process+0x6c6>
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	429a      	cmp	r2, r3
 800830c:	d104      	bne.n	8008318 <tcp_process+0x6c0>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	68da      	ldr	r2, [r3, #12]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	60da      	str	r2, [r3, #12]
 8008316:	e005      	b.n	8008324 <tcp_process+0x6cc>
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	60fb      	str	r3, [r7, #12]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d1ef      	bne.n	8008304 <tcp_process+0x6ac>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	60da      	str	r2, [r3, #12]
 800832a:	4b1f      	ldr	r3, [pc, #124]	@ (80083a8 <tcp_process+0x750>)
 800832c:	2201      	movs	r2, #1
 800832e:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	220a      	movs	r2, #10
 8008334:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8008336:	4b1d      	ldr	r3, [pc, #116]	@ (80083ac <tcp_process+0x754>)
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	60da      	str	r2, [r3, #12]
 800833e:	4a1b      	ldr	r2, [pc, #108]	@ (80083ac <tcp_process+0x754>)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6013      	str	r3, [r2, #0]
 8008344:	f002 fcf2 	bl	800ad2c <tcp_timer_needed>
    }
    break;
 8008348:	e026      	b.n	8008398 <tcp_process+0x740>
  case LAST_ACK:
    tcp_receive(pcb);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 f8ae 	bl	80084ac <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008350:	4b17      	ldr	r3, [pc, #92]	@ (80083b0 <tcp_process+0x758>)
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	f003 0310 	and.w	r3, r3, #16
 8008358:	2b00      	cmp	r3, #0
 800835a:	d01f      	beq.n	800839c <tcp_process+0x744>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008360:	4b14      	ldr	r3, [pc, #80]	@ (80083b4 <tcp_process+0x75c>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	429a      	cmp	r2, r3
 8008366:	d119      	bne.n	800839c <tcp_process+0x744>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800836c:	2b00      	cmp	r3, #0
 800836e:	d115      	bne.n	800839c <tcp_process+0x744>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 8008370:	4b11      	ldr	r3, [pc, #68]	@ (80083b8 <tcp_process+0x760>)
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	f043 0310 	orr.w	r3, r3, #16
 8008378:	b2da      	uxtb	r2, r3
 800837a:	4b0f      	ldr	r3, [pc, #60]	@ (80083b8 <tcp_process+0x760>)
 800837c:	701a      	strb	r2, [r3, #0]
    }
    break;
 800837e:	e00d      	b.n	800839c <tcp_process+0x744>
  default:
    break;
 8008380:	bf00      	nop
 8008382:	e00c      	b.n	800839e <tcp_process+0x746>
    break;
 8008384:	bf00      	nop
 8008386:	e00a      	b.n	800839e <tcp_process+0x746>
    break;
 8008388:	bf00      	nop
 800838a:	e008      	b.n	800839e <tcp_process+0x746>
    break;
 800838c:	bf00      	nop
 800838e:	e006      	b.n	800839e <tcp_process+0x746>
    break;
 8008390:	bf00      	nop
 8008392:	e004      	b.n	800839e <tcp_process+0x746>
    break;
 8008394:	bf00      	nop
 8008396:	e002      	b.n	800839e <tcp_process+0x746>
    break;
 8008398:	bf00      	nop
 800839a:	e000      	b.n	800839e <tcp_process+0x746>
    break;
 800839c:	bf00      	nop
  }
  return ERR_OK;
 800839e:	2300      	movs	r3, #0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3720      	adds	r7, #32
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	20006c5c 	.word	0x20006c5c
 80083ac:	20006c58 	.word	0x20006c58
 80083b0:	20006c8c 	.word	0x20006c8c
 80083b4:	20006c84 	.word	0x20006c84
 80083b8:	20006c8d 	.word	0x20006c8d
 80083bc:	20006c54 	.word	0x20006c54

080083c0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80083c0:	b590      	push	{r4, r7, lr}
 80083c2:	b085      	sub	sp, #20
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	899b      	ldrh	r3, [r3, #12]
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7fb ffe1 	bl	800439a <lwip_htons>
 80083d8:	4603      	mov	r3, r0
 80083da:	f003 0301 	and.w	r3, r3, #1
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d027      	beq.n	8008432 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80083e2:	6838      	ldr	r0, [r7, #0]
 80083e4:	f7fe fbb5 	bl	8006b52 <tcp_segs_free>
    next = NULL;
 80083e8:	2300      	movs	r3, #0
 80083ea:	603b      	str	r3, [r7, #0]
 80083ec:	e055      	b.n	800849a <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	68db      	ldr	r3, [r3, #12]
 80083f2:	899b      	ldrh	r3, [r3, #12]
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7fb ffcf 	bl	800439a <lwip_htons>
 80083fc:	4603      	mov	r3, r0
 80083fe:	f003 0301 	and.w	r3, r3, #1
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00d      	beq.n	8008422 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	899b      	ldrh	r3, [r3, #12]
 800840c:	b29c      	uxth	r4, r3
 800840e:	2001      	movs	r0, #1
 8008410:	f7fb ffc3 	bl	800439a <lwip_htons>
 8008414:	4603      	mov	r3, r0
 8008416:	461a      	mov	r2, r3
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	4322      	orrs	r2, r4
 800841e:	b292      	uxth	r2, r2
 8008420:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	f7fe fba5 	bl	8006b7c <tcp_seg_free>
    while (next &&
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d00e      	beq.n	8008456 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	891b      	ldrh	r3, [r3, #8]
 800843c:	461a      	mov	r2, r3
 800843e:	4b1a      	ldr	r3, [pc, #104]	@ (80084a8 <tcp_oos_insert_segment+0xe8>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	441a      	add	r2, r3
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	6839      	ldr	r1, [r7, #0]
 800844c:	8909      	ldrh	r1, [r1, #8]
 800844e:	440b      	add	r3, r1
 8008450:	1ad3      	subs	r3, r2, r3
    while (next &&
 8008452:	2b00      	cmp	r3, #0
 8008454:	dacb      	bge.n	80083ee <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d01e      	beq.n	800849a <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	891b      	ldrh	r3, [r3, #8]
 8008460:	461a      	mov	r2, r3
 8008462:	4b11      	ldr	r3, [pc, #68]	@ (80084a8 <tcp_oos_insert_segment+0xe8>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	441a      	add	r2, r3
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8008470:	2b00      	cmp	r3, #0
 8008472:	dd12      	ble.n	800849a <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	b29a      	uxth	r2, r3
 800847c:	4b0a      	ldr	r3, [pc, #40]	@ (80084a8 <tcp_oos_insert_segment+0xe8>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	b29b      	uxth	r3, r3
 8008482:	1ad3      	subs	r3, r2, r3
 8008484:	b29a      	uxth	r2, r3
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	685a      	ldr	r2, [r3, #4]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	891b      	ldrh	r3, [r3, #8]
 8008492:	4619      	mov	r1, r3
 8008494:	4610      	mov	r0, r2
 8008496:	f7fc ff1d 	bl	80052d4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	683a      	ldr	r2, [r7, #0]
 800849e:	601a      	str	r2, [r3, #0]
}
 80084a0:	bf00      	nop
 80084a2:	3714      	adds	r7, #20
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd90      	pop	{r4, r7, pc}
 80084a8:	20006c80 	.word	0x20006c80

080084ac <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80084ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084ae:	b08d      	sub	sp, #52	@ 0x34
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 80084b4:	2300      	movs	r3, #0
 80084b6:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	7d1b      	ldrb	r3, [r3, #20]
 80084bc:	2b03      	cmp	r3, #3
 80084be:	d806      	bhi.n	80084ce <tcp_receive+0x22>
 80084c0:	4b98      	ldr	r3, [pc, #608]	@ (8008724 <tcp_receive+0x278>)
 80084c2:	f44f 6281 	mov.w	r2, #1032	@ 0x408
 80084c6:	4998      	ldr	r1, [pc, #608]	@ (8008728 <tcp_receive+0x27c>)
 80084c8:	4898      	ldr	r0, [pc, #608]	@ (800872c <tcp_receive+0x280>)
 80084ca:	f005 f96f 	bl	800d7ac <iprintf>

  if (flags & TCP_ACK) {
 80084ce:	4b98      	ldr	r3, [pc, #608]	@ (8008730 <tcp_receive+0x284>)
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	f003 0310 	and.w	r3, r3, #16
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	f000 82c1 	beq.w	8008a5e <tcp_receive+0x5b2>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80084e2:	461a      	mov	r2, r3
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084e8:	4413      	add	r3, r2
 80084ea:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80084f0:	4b90      	ldr	r3, [pc, #576]	@ (8008734 <tcp_receive+0x288>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	1ad3      	subs	r3, r2, r3
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	db1b      	blt.n	8008532 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80084fe:	4b8d      	ldr	r3, [pc, #564]	@ (8008734 <tcp_receive+0x288>)
 8008500:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008502:	429a      	cmp	r2, r3
 8008504:	d106      	bne.n	8008514 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800850a:	4b8b      	ldr	r3, [pc, #556]	@ (8008738 <tcp_receive+0x28c>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	1ad3      	subs	r3, r2, r3
 8008510:	2b00      	cmp	r3, #0
 8008512:	db0e      	blt.n	8008532 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008518:	4b87      	ldr	r3, [pc, #540]	@ (8008738 <tcp_receive+0x28c>)
 800851a:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800851c:	429a      	cmp	r2, r3
 800851e:	d141      	bne.n	80085a4 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008520:	4b86      	ldr	r3, [pc, #536]	@ (800873c <tcp_receive+0x290>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	89db      	ldrh	r3, [r3, #14]
 8008526:	b29a      	uxth	r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800852e:	429a      	cmp	r2, r3
 8008530:	d938      	bls.n	80085a4 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008532:	4b82      	ldr	r3, [pc, #520]	@ (800873c <tcp_receive+0x290>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	89db      	ldrh	r3, [r3, #14]
 8008538:	b29a      	uxth	r2, r3
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8b3 205e 	ldrh.w	r2, [r3, #94]	@ 0x5e
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800854c:	429a      	cmp	r2, r3
 800854e:	d205      	bcs.n	800855c <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      }
      pcb->snd_wl1 = seqno;
 800855c:	4b75      	ldr	r3, [pc, #468]	@ (8008734 <tcp_receive+0x288>)
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	651a      	str	r2, [r3, #80]	@ 0x50
      pcb->snd_wl2 = ackno;
 8008564:	4b74      	ldr	r3, [pc, #464]	@ (8008738 <tcp_receive+0x28c>)
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	655a      	str	r2, [r3, #84]	@ 0x54
      if (pcb->snd_wnd == 0) {
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008572:	2b00      	cmp	r3, #0
 8008574:	d10d      	bne.n	8008592 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800857c:	2b00      	cmp	r3, #0
 800857e:	d111      	bne.n	80085a4 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
          pcb->persist_backoff = 1;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2201      	movs	r2, #1
 800858c:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
 8008590:	e008      	b.n	80085a4 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8008598:	2b00      	cmp	r3, #0
 800859a:	d003      	beq.n	80085a4 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80085a4:	4b64      	ldr	r3, [pc, #400]	@ (8008738 <tcp_receive+0x28c>)
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085ac:	1ad3      	subs	r3, r2, r3
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	dc53      	bgt.n	800865a <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 80085b2:	4b63      	ldr	r3, [pc, #396]	@ (8008740 <tcp_receive+0x294>)
 80085b4:	881b      	ldrh	r3, [r3, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d146      	bne.n	8008648 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 80085c4:	4413      	add	r3, r2
 80085c6:	697a      	ldr	r2, [r7, #20]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d13d      	bne.n	8008648 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	db38      	blt.n	8008648 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80085da:	4b57      	ldr	r3, [pc, #348]	@ (8008738 <tcp_receive+0x28c>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	429a      	cmp	r2, r3
 80085e0:	d132      	bne.n	8008648 <tcp_receive+0x19c>
              found_dupack = 1;
 80085e2:	2301      	movs	r3, #1
 80085e4:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80085ec:	2bff      	cmp	r3, #255	@ 0xff
 80085ee:	d007      	beq.n	8008600 <tcp_receive+0x154>
                ++pcb->dupacks;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80085f6:	3301      	adds	r3, #1
 80085f8:	b2da      	uxtb	r2, r3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008606:	2b03      	cmp	r3, #3
 8008608:	d916      	bls.n	8008638 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008614:	4413      	add	r3, r2
 8008616:	b29a      	uxth	r2, r3
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800861e:	429a      	cmp	r2, r3
 8008620:	d912      	bls.n	8008648 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800862c:	4413      	add	r3, r2
 800862e:	b29a      	uxth	r2, r3
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8008636:	e007      	b.n	8008648 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800863e:	2b03      	cmp	r3, #3
 8008640:	d102      	bne.n	8008648 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f002 fa26 	bl	800aa94 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	2b00      	cmp	r3, #0
 800864c:	f040 816a 	bne.w	8008924 <tcp_receive+0x478>
        pcb->dupacks = 0;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2200      	movs	r2, #0
 8008654:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008658:	e164      	b.n	8008924 <tcp_receive+0x478>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800865a:	4b37      	ldr	r3, [pc, #220]	@ (8008738 <tcp_receive+0x28c>)
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008662:	1ad3      	subs	r3, r2, r3
 8008664:	3b01      	subs	r3, #1
 8008666:	2b00      	cmp	r3, #0
 8008668:	f2c0 8108 	blt.w	800887c <tcp_receive+0x3d0>
 800866c:	4b32      	ldr	r3, [pc, #200]	@ (8008738 <tcp_receive+0x28c>)
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008674:	1ad3      	subs	r3, r2, r3
 8008676:	2b00      	cmp	r3, #0
 8008678:	f300 8100 	bgt.w	800887c <tcp_receive+0x3d0>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	7e9b      	ldrb	r3, [r3, #26]
 8008680:	f003 0304 	and.w	r3, r3, #4
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00c      	beq.n	80086a2 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	7e9b      	ldrb	r3, [r3, #26]
 800868c:	f023 0304 	bic.w	r3, r3, #4
 8008690:	b2da      	uxtb	r2, r3
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80086b0:	10db      	asrs	r3, r3, #3
 80086b2:	b21b      	sxth	r3, r3
 80086b4:	b29a      	uxth	r2, r3
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80086bc:	b29b      	uxth	r3, r3
 80086be:	4413      	add	r3, r2
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	b21a      	sxth	r2, r3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80086d2:	4b19      	ldr	r3, [pc, #100]	@ (8008738 <tcp_receive+0x28c>)
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	7d1b      	ldrb	r3, [r3, #20]
 80086de:	2b03      	cmp	r3, #3
 80086e0:	f240 8095 	bls.w	800880e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d227      	bcs.n	8008744 <tcp_receive+0x298>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80086fe:	4413      	add	r3, r2
 8008700:	b29a      	uxth	r2, r3
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008708:	429a      	cmp	r2, r3
 800870a:	f240 8080 	bls.w	800880e <tcp_receive+0x362>
            pcb->cwnd += pcb->mss;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008718:	4413      	add	r3, r2
 800871a:	b29a      	uxth	r2, r3
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8008722:	e074      	b.n	800880e <tcp_receive+0x362>
 8008724:	0800f21c 	.word	0x0800f21c
 8008728:	0800f440 	.word	0x0800f440
 800872c:	0800f260 	.word	0x0800f260
 8008730:	20006c8c 	.word	0x20006c8c
 8008734:	20006c80 	.word	0x20006c80
 8008738:	20006c84 	.word	0x20006c84
 800873c:	20006c70 	.word	0x20006c70
 8008740:	20006c8a 	.word	0x20006c8a
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800874e:	4619      	mov	r1, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008754:	fb01 f303 	mul.w	r3, r1, r3
 8008758:	6879      	ldr	r1, [r7, #4]
 800875a:	f8b1 1048 	ldrh.w	r1, [r1, #72]	@ 0x48
 800875e:	fb93 f3f1 	sdiv	r3, r3, r1
 8008762:	b29b      	uxth	r3, r3
 8008764:	4413      	add	r3, r2
 8008766:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800876e:	8a7a      	ldrh	r2, [r7, #18]
 8008770:	429a      	cmp	r2, r3
 8008772:	d94c      	bls.n	800880e <tcp_receive+0x362>
            pcb->cwnd = new_cwnd;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	8a7a      	ldrh	r2, [r7, #18]
 8008778:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800877c:	e047      	b.n	800880e <tcp_receive+0x362>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008782:	62fb      	str	r3, [r7, #44]	@ 0x2c
        pcb->unacked = pcb->unacked->next;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	66da      	str	r2, [r3, #108]	@ 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f8b3 4062 	ldrh.w	r4, [r3, #98]	@ 0x62
 8008794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	4618      	mov	r0, r3
 800879a:	f7fc ffa3 	bl	80056e4 <pbuf_clen>
 800879e:	4603      	mov	r3, r0
 80087a0:	429c      	cmp	r4, r3
 80087a2:	d206      	bcs.n	80087b2 <tcp_receive+0x306>
 80087a4:	4b70      	ldr	r3, [pc, #448]	@ (8008968 <tcp_receive+0x4bc>)
 80087a6:	f240 429e 	movw	r2, #1182	@ 0x49e
 80087aa:	4970      	ldr	r1, [pc, #448]	@ (800896c <tcp_receive+0x4c0>)
 80087ac:	4870      	ldr	r0, [pc, #448]	@ (8008970 <tcp_receive+0x4c4>)
 80087ae:	f004 fffd 	bl	800d7ac <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 80087b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7fc ff94 	bl	80056e4 <pbuf_clen>
 80087bc:	4603      	mov	r3, r0
 80087be:	461a      	mov	r2, r3
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80087c6:	1a9b      	subs	r3, r3, r2
 80087c8:	b29a      	uxth	r2, r3
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        recv_acked += next->len;
 80087d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087d2:	891a      	ldrh	r2, [r3, #8]
 80087d4:	4b67      	ldr	r3, [pc, #412]	@ (8008974 <tcp_receive+0x4c8>)
 80087d6:	881b      	ldrh	r3, [r3, #0]
 80087d8:	4413      	add	r3, r2
 80087da:	b29a      	uxth	r2, r3
 80087dc:	4b65      	ldr	r3, [pc, #404]	@ (8008974 <tcp_receive+0x4c8>)
 80087de:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 80087e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80087e2:	f7fe f9cb 	bl	8006b7c <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d00e      	beq.n	800880e <tcp_receive+0x362>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d10a      	bne.n	800880e <tcp_receive+0x362>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d106      	bne.n	800880e <tcp_receive+0x362>
 8008800:	4b59      	ldr	r3, [pc, #356]	@ (8008968 <tcp_receive+0x4bc>)
 8008802:	f240 42a6 	movw	r2, #1190	@ 0x4a6
 8008806:	495c      	ldr	r1, [pc, #368]	@ (8008978 <tcp_receive+0x4cc>)
 8008808:	4859      	ldr	r0, [pc, #356]	@ (8008970 <tcp_receive+0x4c4>)
 800880a:	f004 ffcf 	bl	800d7ac <iprintf>
      while (pcb->unacked != NULL &&
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008812:	2b00      	cmp	r3, #0
 8008814:	d022      	beq.n	800885c <tcp_receive+0x3b0>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	4618      	mov	r0, r3
 8008820:	f7fb fdc8 	bl	80043b4 <lwip_htonl>
 8008824:	4604      	mov	r4, r0
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800882a:	891b      	ldrh	r3, [r3, #8]
 800882c:	461d      	mov	r5, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	899b      	ldrh	r3, [r3, #12]
 8008836:	b29b      	uxth	r3, r3
 8008838:	4618      	mov	r0, r3
 800883a:	f7fb fdae 	bl	800439a <lwip_htons>
 800883e:	4603      	mov	r3, r0
 8008840:	f003 0303 	and.w	r3, r3, #3
 8008844:	2b00      	cmp	r3, #0
 8008846:	d001      	beq.n	800884c <tcp_receive+0x3a0>
 8008848:	2301      	movs	r3, #1
 800884a:	e000      	b.n	800884e <tcp_receive+0x3a2>
 800884c:	2300      	movs	r3, #0
 800884e:	442b      	add	r3, r5
 8008850:	18e2      	adds	r2, r4, r3
 8008852:	4b4a      	ldr	r3, [pc, #296]	@ (800897c <tcp_receive+0x4d0>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 8008858:	2b00      	cmp	r3, #0
 800885a:	dd90      	ble.n	800877e <tcp_receive+0x2d2>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008860:	2b00      	cmp	r3, #0
 8008862:	d104      	bne.n	800886e <tcp_receive+0x3c2>
        pcb->rtime = -1;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800886a:	861a      	strh	r2, [r3, #48]	@ 0x30
 800886c:	e002      	b.n	8008874 <tcp_receive+0x3c8>
      } else {
        pcb->rtime = 0;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	76da      	strb	r2, [r3, #27]
 800887a:	e002      	b.n	8008882 <tcp_receive+0x3d6>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f001 fd2d 	bl	800a2dc <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8008882:	e04f      	b.n	8008924 <tcp_receive+0x478>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008888:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pcb->unsent = pcb->unsent->next;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	669a      	str	r2, [r3, #104]	@ 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008898:	2b00      	cmp	r3, #0
 800889a:	d103      	bne.n	80088a4 <tcp_receive+0x3f8>
        pcb->unsent_oversize = 0;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8b3 4062 	ldrh.w	r4, [r3, #98]	@ 0x62
 80088aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fc ff18 	bl	80056e4 <pbuf_clen>
 80088b4:	4603      	mov	r3, r0
 80088b6:	429c      	cmp	r4, r3
 80088b8:	d206      	bcs.n	80088c8 <tcp_receive+0x41c>
 80088ba:	4b2b      	ldr	r3, [pc, #172]	@ (8008968 <tcp_receive+0x4bc>)
 80088bc:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 80088c0:	492a      	ldr	r1, [pc, #168]	@ (800896c <tcp_receive+0x4c0>)
 80088c2:	482b      	ldr	r0, [pc, #172]	@ (8008970 <tcp_receive+0x4c4>)
 80088c4:	f004 ff72 	bl	800d7ac <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 80088c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7fc ff09 	bl	80056e4 <pbuf_clen>
 80088d2:	4603      	mov	r3, r0
 80088d4:	461a      	mov	r2, r3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80088dc:	1a9b      	subs	r3, r3, r2
 80088de:	b29a      	uxth	r2, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      recv_acked += next->len;
 80088e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088e8:	891a      	ldrh	r2, [r3, #8]
 80088ea:	4b22      	ldr	r3, [pc, #136]	@ (8008974 <tcp_receive+0x4c8>)
 80088ec:	881b      	ldrh	r3, [r3, #0]
 80088ee:	4413      	add	r3, r2
 80088f0:	b29a      	uxth	r2, r3
 80088f2:	4b20      	ldr	r3, [pc, #128]	@ (8008974 <tcp_receive+0x4c8>)
 80088f4:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 80088f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80088f8:	f7fe f940 	bl	8006b7c <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008902:	2b00      	cmp	r3, #0
 8008904:	d00e      	beq.n	8008924 <tcp_receive+0x478>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800890a:	2b00      	cmp	r3, #0
 800890c:	d10a      	bne.n	8008924 <tcp_receive+0x478>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008912:	2b00      	cmp	r3, #0
 8008914:	d106      	bne.n	8008924 <tcp_receive+0x478>
 8008916:	4b14      	ldr	r3, [pc, #80]	@ (8008968 <tcp_receive+0x4bc>)
 8008918:	f240 42dc 	movw	r2, #1244	@ 0x4dc
 800891c:	4916      	ldr	r1, [pc, #88]	@ (8008978 <tcp_receive+0x4cc>)
 800891e:	4814      	ldr	r0, [pc, #80]	@ (8008970 <tcp_receive+0x4c4>)
 8008920:	f004 ff44 	bl	800d7ac <iprintf>
    while (pcb->unsent != NULL &&
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008928:	2b00      	cmp	r3, #0
 800892a:	d037      	beq.n	800899c <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800892c:	4b13      	ldr	r3, [pc, #76]	@ (800897c <tcp_receive+0x4d0>)
 800892e:	681c      	ldr	r4, [r3, #0]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	4618      	mov	r0, r3
 800893a:	f7fb fd3b 	bl	80043b4 <lwip_htonl>
 800893e:	4605      	mov	r5, r0
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008944:	891b      	ldrh	r3, [r3, #8]
 8008946:	461e      	mov	r6, r3
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800894c:	68db      	ldr	r3, [r3, #12]
 800894e:	899b      	ldrh	r3, [r3, #12]
 8008950:	b29b      	uxth	r3, r3
 8008952:	4618      	mov	r0, r3
 8008954:	f7fb fd21 	bl	800439a <lwip_htons>
 8008958:	4603      	mov	r3, r0
 800895a:	f003 0303 	and.w	r3, r3, #3
 800895e:	2b00      	cmp	r3, #0
 8008960:	d00e      	beq.n	8008980 <tcp_receive+0x4d4>
 8008962:	2301      	movs	r3, #1
 8008964:	e00d      	b.n	8008982 <tcp_receive+0x4d6>
 8008966:	bf00      	nop
 8008968:	0800f21c 	.word	0x0800f21c
 800896c:	0800f45c 	.word	0x0800f45c
 8008970:	0800f260 	.word	0x0800f260
 8008974:	20006c88 	.word	0x20006c88
 8008978:	0800f484 	.word	0x0800f484
 800897c:	20006c84 	.word	0x20006c84
 8008980:	2300      	movs	r3, #0
 8008982:	4433      	add	r3, r6
 8008984:	442b      	add	r3, r5
 8008986:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8008988:	2b00      	cmp	r3, #0
 800898a:	db07      	blt.n	800899c <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800898c:	4b8d      	ldr	r3, [pc, #564]	@ (8008bc4 <tcp_receive+0x718>)
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008994:	1ad3      	subs	r3, r2, r3
 8008996:	2b00      	cmp	r3, #0
 8008998:	f77f af74 	ble.w	8008884 <tcp_receive+0x3d8>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80089a2:	4b89      	ldr	r3, [pc, #548]	@ (8008bc8 <tcp_receive+0x71c>)
 80089a4:	881b      	ldrh	r3, [r3, #0]
 80089a6:	4413      	add	r3, r2
 80089a8:	b29a      	uxth	r2, r3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d052      	beq.n	8008a5e <tcp_receive+0x5b2>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80089bc:	4b81      	ldr	r3, [pc, #516]	@ (8008bc4 <tcp_receive+0x718>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	1ad3      	subs	r3, r2, r3
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	da4b      	bge.n	8008a5e <tcp_receive+0x5b2>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80089c6:	4b81      	ldr	r3, [pc, #516]	@ (8008bcc <tcp_receive+0x720>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	b29a      	uxth	r2, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	1ad3      	subs	r3, r2, r3
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	847b      	strh	r3, [r7, #34]	@ 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 80089d8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80089e0:	10db      	asrs	r3, r3, #3
 80089e2:	b21b      	sxth	r3, r3
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	1ad3      	subs	r3, r2, r3
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	847b      	strh	r3, [r7, #34]	@ 0x22
      pcb->sa += m;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80089f2:	b29a      	uxth	r2, r3
 80089f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80089f6:	4413      	add	r3, r2
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	b21a      	sxth	r2, r3
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8008a00:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	da03      	bge.n	8008a10 <tcp_receive+0x564>
        m = -m;
 8008a08:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008a0a:	425b      	negs	r3, r3
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	847b      	strh	r3, [r7, #34]	@ 0x22
      }
      m = m - (pcb->sv >> 2);
 8008a10:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008a18:	109b      	asrs	r3, r3, #2
 8008a1a:	b21b      	sxth	r3, r3
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	1ad3      	subs	r3, r2, r3
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	847b      	strh	r3, [r7, #34]	@ 0x22
      pcb->sv += m;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008a2a:	b29a      	uxth	r2, r3
 8008a2c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008a2e:	4413      	add	r3, r2
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	b21a      	sxth	r2, r3
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008a3e:	10db      	asrs	r3, r3, #3
 8008a40:	b21b      	sxth	r3, r3
 8008a42:	b29a      	uxth	r2, r3
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	4413      	add	r3, r2
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	b21a      	sxth	r2, r3
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008a5e:	4b5c      	ldr	r3, [pc, #368]	@ (8008bd0 <tcp_receive+0x724>)
 8008a60:	881b      	ldrh	r3, [r3, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	f000 84f1 	beq.w	800944a <tcp_receive+0xf9e>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	7d1b      	ldrb	r3, [r3, #20]
 8008a6c:	2b06      	cmp	r3, #6
 8008a6e:	f200 84ec 	bhi.w	800944a <tcp_receive+0xf9e>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008a76:	4b57      	ldr	r3, [pc, #348]	@ (8008bd4 <tcp_receive+0x728>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	1ad3      	subs	r3, r2, r3
 8008a7c:	3b01      	subs	r3, #1
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	f2c0 80b8 	blt.w	8008bf4 <tcp_receive+0x748>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008a88:	4b51      	ldr	r3, [pc, #324]	@ (8008bd0 <tcp_receive+0x724>)
 8008a8a:	881b      	ldrh	r3, [r3, #0]
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	4b51      	ldr	r3, [pc, #324]	@ (8008bd4 <tcp_receive+0x728>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	440b      	add	r3, r1
 8008a94:	1ad3      	subs	r3, r2, r3
 8008a96:	3301      	adds	r3, #1
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f300 80ab 	bgt.w	8008bf4 <tcp_receive+0x748>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8008a9e:	4b4e      	ldr	r3, [pc, #312]	@ (8008bd8 <tcp_receive+0x72c>)
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008aa8:	4b4a      	ldr	r3, [pc, #296]	@ (8008bd4 <tcp_receive+0x728>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	627b      	str	r3, [r7, #36]	@ 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008ab0:	4b49      	ldr	r3, [pc, #292]	@ (8008bd8 <tcp_receive+0x72c>)
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d106      	bne.n	8008ac6 <tcp_receive+0x61a>
 8008ab8:	4b48      	ldr	r3, [pc, #288]	@ (8008bdc <tcp_receive+0x730>)
 8008aba:	f240 523c 	movw	r2, #1340	@ 0x53c
 8008abe:	4948      	ldr	r1, [pc, #288]	@ (8008be0 <tcp_receive+0x734>)
 8008ac0:	4848      	ldr	r0, [pc, #288]	@ (8008be4 <tcp_receive+0x738>)
 8008ac2:	f004 fe73 	bl	800d7ac <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8008ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ac8:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8008acc:	4293      	cmp	r3, r2
 8008ace:	dd06      	ble.n	8008ade <tcp_receive+0x632>
 8008ad0:	4b42      	ldr	r3, [pc, #264]	@ (8008bdc <tcp_receive+0x730>)
 8008ad2:	f240 523d 	movw	r2, #1341	@ 0x53d
 8008ad6:	4944      	ldr	r1, [pc, #272]	@ (8008be8 <tcp_receive+0x73c>)
 8008ad8:	4842      	ldr	r0, [pc, #264]	@ (8008be4 <tcp_receive+0x738>)
 8008ada:	f004 fe67 	bl	800d7ac <iprintf>
      if (inseg.p->len < off) {
 8008ade:	4b3e      	ldr	r3, [pc, #248]	@ (8008bd8 <tcp_receive+0x72c>)
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	895b      	ldrh	r3, [r3, #10]
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	dd3e      	ble.n	8008b6a <tcp_receive+0x6be>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008aec:	4b3a      	ldr	r3, [pc, #232]	@ (8008bd8 <tcp_receive+0x72c>)
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	891b      	ldrh	r3, [r3, #8]
 8008af2:	461a      	mov	r2, r3
 8008af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af6:	4293      	cmp	r3, r2
 8008af8:	dd06      	ble.n	8008b08 <tcp_receive+0x65c>
 8008afa:	4b38      	ldr	r3, [pc, #224]	@ (8008bdc <tcp_receive+0x730>)
 8008afc:	f240 523f 	movw	r2, #1343	@ 0x53f
 8008b00:	493a      	ldr	r1, [pc, #232]	@ (8008bec <tcp_receive+0x740>)
 8008b02:	4838      	ldr	r0, [pc, #224]	@ (8008be4 <tcp_receive+0x738>)
 8008b04:	f004 fe52 	bl	800d7ac <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008b08:	4b33      	ldr	r3, [pc, #204]	@ (8008bd8 <tcp_receive+0x72c>)
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	891a      	ldrh	r2, [r3, #8]
 8008b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	1ad3      	subs	r3, r2, r3
 8008b14:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 8008b16:	e00e      	b.n	8008b36 <tcp_receive+0x68a>
          off -= p->len;
 8008b18:	69bb      	ldr	r3, [r7, #24]
 8008b1a:	895b      	ldrh	r3, [r3, #10]
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b20:	1a9b      	subs	r3, r3, r2
 8008b22:	627b      	str	r3, [r7, #36]	@ 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8008b24:	69bb      	ldr	r3, [r7, #24]
 8008b26:	8a3a      	ldrh	r2, [r7, #16]
 8008b28:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 8008b2a:	69bb      	ldr	r3, [r7, #24]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8008b30:	69bb      	ldr	r3, [r7, #24]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 8008b36:	69bb      	ldr	r3, [r7, #24]
 8008b38:	895b      	ldrh	r3, [r3, #10]
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	dcea      	bgt.n	8008b18 <tcp_receive+0x66c>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8008b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	425b      	negs	r3, r3
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	b21b      	sxth	r3, r3
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	69b8      	ldr	r0, [r7, #24]
 8008b50:	f7fc fd10 	bl	8005574 <pbuf_header>
 8008b54:	4603      	mov	r3, r0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d01c      	beq.n	8008b94 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8008b5a:	4b20      	ldr	r3, [pc, #128]	@ (8008bdc <tcp_receive+0x730>)
 8008b5c:	f240 524c 	movw	r2, #1356	@ 0x54c
 8008b60:	4923      	ldr	r1, [pc, #140]	@ (8008bf0 <tcp_receive+0x744>)
 8008b62:	4820      	ldr	r0, [pc, #128]	@ (8008be4 <tcp_receive+0x738>)
 8008b64:	f004 fe22 	bl	800d7ac <iprintf>
 8008b68:	e014      	b.n	8008b94 <tcp_receive+0x6e8>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8008b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8008bd8 <tcp_receive+0x72c>)
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b70:	b292      	uxth	r2, r2
 8008b72:	4252      	negs	r2, r2
 8008b74:	b292      	uxth	r2, r2
 8008b76:	b212      	sxth	r2, r2
 8008b78:	4611      	mov	r1, r2
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f7fc fcfa 	bl	8005574 <pbuf_header>
 8008b80:	4603      	mov	r3, r0
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d006      	beq.n	8008b94 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8008b86:	4b15      	ldr	r3, [pc, #84]	@ (8008bdc <tcp_receive+0x730>)
 8008b88:	f240 5251 	movw	r2, #1361	@ 0x551
 8008b8c:	4918      	ldr	r1, [pc, #96]	@ (8008bf0 <tcp_receive+0x744>)
 8008b8e:	4815      	ldr	r0, [pc, #84]	@ (8008be4 <tcp_receive+0x738>)
 8008b90:	f004 fe0c 	bl	800d7ac <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8008b94:	4b10      	ldr	r3, [pc, #64]	@ (8008bd8 <tcp_receive+0x72c>)
 8008b96:	891a      	ldrh	r2, [r3, #8]
 8008b98:	4b0e      	ldr	r3, [pc, #56]	@ (8008bd4 <tcp_receive+0x728>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	b299      	uxth	r1, r3
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	1acb      	subs	r3, r1, r3
 8008ba6:	b29b      	uxth	r3, r3
 8008ba8:	4413      	add	r3, r2
 8008baa:	b29a      	uxth	r2, r3
 8008bac:	4b0a      	ldr	r3, [pc, #40]	@ (8008bd8 <tcp_receive+0x72c>)
 8008bae:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bb4:	4a07      	ldr	r2, [pc, #28]	@ (8008bd4 <tcp_receive+0x728>)
 8008bb6:	6013      	str	r3, [r2, #0]
 8008bb8:	4b07      	ldr	r3, [pc, #28]	@ (8008bd8 <tcp_receive+0x72c>)
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	4a05      	ldr	r2, [pc, #20]	@ (8008bd4 <tcp_receive+0x728>)
 8008bbe:	6812      	ldr	r2, [r2, #0]
 8008bc0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008bc2:	e025      	b.n	8008c10 <tcp_receive+0x764>
 8008bc4:	20006c84 	.word	0x20006c84
 8008bc8:	20006c88 	.word	0x20006c88
 8008bcc:	20006c48 	.word	0x20006c48
 8008bd0:	20006c8a 	.word	0x20006c8a
 8008bd4:	20006c80 	.word	0x20006c80
 8008bd8:	20006c60 	.word	0x20006c60
 8008bdc:	0800f21c 	.word	0x0800f21c
 8008be0:	0800f4a4 	.word	0x0800f4a4
 8008be4:	0800f260 	.word	0x0800f260
 8008be8:	0800f4b4 	.word	0x0800f4b4
 8008bec:	0800f4c4 	.word	0x0800f4c4
 8008bf0:	0800f4d4 	.word	0x0800f4d4
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8008bf4:	4b87      	ldr	r3, [pc, #540]	@ (8008e14 <tcp_receive+0x968>)
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bfc:	1ad3      	subs	r3, r2, r3
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	da06      	bge.n	8008c10 <tcp_receive+0x764>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	7e9b      	ldrb	r3, [r3, #26]
 8008c06:	f043 0302 	orr.w	r3, r3, #2
 8008c0a:	b2da      	uxtb	r2, r3
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008c10:	4b80      	ldr	r3, [pc, #512]	@ (8008e14 <tcp_receive+0x968>)
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c18:	1ad3      	subs	r3, r2, r3
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	f2c0 8410 	blt.w	8009440 <tcp_receive+0xf94>
 8008c20:	4b7c      	ldr	r3, [pc, #496]	@ (8008e14 <tcp_receive+0x968>)
 8008c22:	681a      	ldr	r2, [r3, #0]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c28:	6879      	ldr	r1, [r7, #4]
 8008c2a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8008c2c:	440b      	add	r3, r1
 8008c2e:	1ad3      	subs	r3, r2, r3
 8008c30:	3301      	adds	r3, #1
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	f300 8404 	bgt.w	8009440 <tcp_receive+0xf94>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008c3c:	4b75      	ldr	r3, [pc, #468]	@ (8008e14 <tcp_receive+0x968>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	f040 8287 	bne.w	8009154 <tcp_receive+0xca8>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8008c46:	4b74      	ldr	r3, [pc, #464]	@ (8008e18 <tcp_receive+0x96c>)
 8008c48:	891c      	ldrh	r4, [r3, #8]
 8008c4a:	4b73      	ldr	r3, [pc, #460]	@ (8008e18 <tcp_receive+0x96c>)
 8008c4c:	68db      	ldr	r3, [r3, #12]
 8008c4e:	899b      	ldrh	r3, [r3, #12]
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7fb fba1 	bl	800439a <lwip_htons>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	f003 0303 	and.w	r3, r3, #3
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d001      	beq.n	8008c66 <tcp_receive+0x7ba>
 8008c62:	2301      	movs	r3, #1
 8008c64:	e000      	b.n	8008c68 <tcp_receive+0x7bc>
 8008c66:	2300      	movs	r3, #0
 8008c68:	4423      	add	r3, r4
 8008c6a:	b29a      	uxth	r2, r3
 8008c6c:	4b6b      	ldr	r3, [pc, #428]	@ (8008e1c <tcp_receive+0x970>)
 8008c6e:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008c74:	4b69      	ldr	r3, [pc, #420]	@ (8008e1c <tcp_receive+0x970>)
 8008c76:	881b      	ldrh	r3, [r3, #0]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d26e      	bcs.n	8008d5a <tcp_receive+0x8ae>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008c7c:	4b66      	ldr	r3, [pc, #408]	@ (8008e18 <tcp_receive+0x96c>)
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	899b      	ldrh	r3, [r3, #12]
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	4618      	mov	r0, r3
 8008c86:	f7fb fb88 	bl	800439a <lwip_htons>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	f003 0301 	and.w	r3, r3, #1
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d01b      	beq.n	8008ccc <tcp_receive+0x820>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8008c94:	4b60      	ldr	r3, [pc, #384]	@ (8008e18 <tcp_receive+0x96c>)
 8008c96:	68db      	ldr	r3, [r3, #12]
 8008c98:	899b      	ldrh	r3, [r3, #12]
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008ca0:	b29c      	uxth	r4, r3
 8008ca2:	4b5d      	ldr	r3, [pc, #372]	@ (8008e18 <tcp_receive+0x96c>)
 8008ca4:	68db      	ldr	r3, [r3, #12]
 8008ca6:	899b      	ldrh	r3, [r3, #12]
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	4618      	mov	r0, r3
 8008cac:	f7fb fb75 	bl	800439a <lwip_htons>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f7fb fb6e 	bl	800439a <lwip_htons>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	4b55      	ldr	r3, [pc, #340]	@ (8008e18 <tcp_receive+0x96c>)
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	4322      	orrs	r2, r4
 8008cc8:	b292      	uxth	r2, r2
 8008cca:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008cd0:	4b51      	ldr	r3, [pc, #324]	@ (8008e18 <tcp_receive+0x96c>)
 8008cd2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008cd4:	4b50      	ldr	r3, [pc, #320]	@ (8008e18 <tcp_receive+0x96c>)
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	899b      	ldrh	r3, [r3, #12]
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f7fb fb5c 	bl	800439a <lwip_htons>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	f003 0302 	and.w	r3, r3, #2
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d005      	beq.n	8008cf8 <tcp_receive+0x84c>
            inseg.len -= 1;
 8008cec:	4b4a      	ldr	r3, [pc, #296]	@ (8008e18 <tcp_receive+0x96c>)
 8008cee:	891b      	ldrh	r3, [r3, #8]
 8008cf0:	3b01      	subs	r3, #1
 8008cf2:	b29a      	uxth	r2, r3
 8008cf4:	4b48      	ldr	r3, [pc, #288]	@ (8008e18 <tcp_receive+0x96c>)
 8008cf6:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8008cf8:	4b47      	ldr	r3, [pc, #284]	@ (8008e18 <tcp_receive+0x96c>)
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	4a46      	ldr	r2, [pc, #280]	@ (8008e18 <tcp_receive+0x96c>)
 8008cfe:	8912      	ldrh	r2, [r2, #8]
 8008d00:	4611      	mov	r1, r2
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7fc fae6 	bl	80052d4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8008d08:	4b43      	ldr	r3, [pc, #268]	@ (8008e18 <tcp_receive+0x96c>)
 8008d0a:	891c      	ldrh	r4, [r3, #8]
 8008d0c:	4b42      	ldr	r3, [pc, #264]	@ (8008e18 <tcp_receive+0x96c>)
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	899b      	ldrh	r3, [r3, #12]
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	4618      	mov	r0, r3
 8008d16:	f7fb fb40 	bl	800439a <lwip_htons>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	f003 0303 	and.w	r3, r3, #3
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d001      	beq.n	8008d28 <tcp_receive+0x87c>
 8008d24:	2301      	movs	r3, #1
 8008d26:	e000      	b.n	8008d2a <tcp_receive+0x87e>
 8008d28:	2300      	movs	r3, #0
 8008d2a:	4423      	add	r3, r4
 8008d2c:	b29a      	uxth	r2, r3
 8008d2e:	4b3b      	ldr	r3, [pc, #236]	@ (8008e1c <tcp_receive+0x970>)
 8008d30:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008d32:	4b3a      	ldr	r3, [pc, #232]	@ (8008e1c <tcp_receive+0x970>)
 8008d34:	881b      	ldrh	r3, [r3, #0]
 8008d36:	461a      	mov	r2, r3
 8008d38:	4b36      	ldr	r3, [pc, #216]	@ (8008e14 <tcp_receive+0x968>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	441a      	add	r2, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d42:	6879      	ldr	r1, [r7, #4]
 8008d44:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8008d46:	440b      	add	r3, r1
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d006      	beq.n	8008d5a <tcp_receive+0x8ae>
 8008d4c:	4b34      	ldr	r3, [pc, #208]	@ (8008e20 <tcp_receive+0x974>)
 8008d4e:	f240 527e 	movw	r2, #1406	@ 0x57e
 8008d52:	4934      	ldr	r1, [pc, #208]	@ (8008e24 <tcp_receive+0x978>)
 8008d54:	4834      	ldr	r0, [pc, #208]	@ (8008e28 <tcp_receive+0x97c>)
 8008d56:	f004 fd29 	bl	800d7ac <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	f000 80e1 	beq.w	8008f26 <tcp_receive+0xa7a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008d64:	4b2c      	ldr	r3, [pc, #176]	@ (8008e18 <tcp_receive+0x96c>)
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	899b      	ldrh	r3, [r3, #12]
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f7fb fb14 	bl	800439a <lwip_htons>
 8008d72:	4603      	mov	r3, r0
 8008d74:	f003 0301 	and.w	r3, r3, #1
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d010      	beq.n	8008d9e <tcp_receive+0x8f2>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8008d7c:	e00a      	b.n	8008d94 <tcp_receive+0x8e8>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d82:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	671a      	str	r2, [r3, #112]	@ 0x70
              tcp_seg_free(old_ooseq);
 8008d8e:	68b8      	ldr	r0, [r7, #8]
 8008d90:	f7fd fef4 	bl	8006b7c <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d1f0      	bne.n	8008d7e <tcp_receive+0x8d2>
 8008d9c:	e0c3      	b.n	8008f26 <tcp_receive+0xa7a>
            }
          } else {
            next = pcb->ooseq;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8008da4:	e04f      	b.n	8008e46 <tcp_receive+0x99a>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008da8:	68db      	ldr	r3, [r3, #12]
 8008daa:	899b      	ldrh	r3, [r3, #12]
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7fb faf3 	bl	800439a <lwip_htons>
 8008db4:	4603      	mov	r3, r0
 8008db6:	f003 0301 	and.w	r3, r3, #1
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d03b      	beq.n	8008e36 <tcp_receive+0x98a>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8008dbe:	4b16      	ldr	r3, [pc, #88]	@ (8008e18 <tcp_receive+0x96c>)
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	899b      	ldrh	r3, [r3, #12]
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7fb fae7 	bl	800439a <lwip_htons>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d12f      	bne.n	8008e36 <tcp_receive+0x98a>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008dd6:	4b10      	ldr	r3, [pc, #64]	@ (8008e18 <tcp_receive+0x96c>)
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	899b      	ldrh	r3, [r3, #12]
 8008ddc:	b29c      	uxth	r4, r3
 8008dde:	2001      	movs	r0, #1
 8008de0:	f7fb fadb 	bl	800439a <lwip_htons>
 8008de4:	4603      	mov	r3, r0
 8008de6:	461a      	mov	r2, r3
 8008de8:	4b0b      	ldr	r3, [pc, #44]	@ (8008e18 <tcp_receive+0x96c>)
 8008dea:	68db      	ldr	r3, [r3, #12]
 8008dec:	4322      	orrs	r2, r4
 8008dee:	b292      	uxth	r2, r2
 8008df0:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8008df2:	4b09      	ldr	r3, [pc, #36]	@ (8008e18 <tcp_receive+0x96c>)
 8008df4:	891c      	ldrh	r4, [r3, #8]
 8008df6:	4b08      	ldr	r3, [pc, #32]	@ (8008e18 <tcp_receive+0x96c>)
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	899b      	ldrh	r3, [r3, #12]
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7fb facb 	bl	800439a <lwip_htons>
 8008e04:	4603      	mov	r3, r0
 8008e06:	f003 0303 	and.w	r3, r3, #3
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d00e      	beq.n	8008e2c <tcp_receive+0x980>
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e00d      	b.n	8008e2e <tcp_receive+0x982>
 8008e12:	bf00      	nop
 8008e14:	20006c80 	.word	0x20006c80
 8008e18:	20006c60 	.word	0x20006c60
 8008e1c:	20006c8a 	.word	0x20006c8a
 8008e20:	0800f21c 	.word	0x0800f21c
 8008e24:	0800f4e8 	.word	0x0800f4e8
 8008e28:	0800f260 	.word	0x0800f260
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	4423      	add	r3, r4
 8008e30:	b29a      	uxth	r2, r3
 8008e32:	4b95      	ldr	r3, [pc, #596]	@ (8009088 <tcp_receive+0xbdc>)
 8008e34:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 8008e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e38:	62bb      	str	r3, [r7, #40]	@ 0x28
              next = next->next;
 8008e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
              tcp_seg_free(prev);
 8008e40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e42:	f7fd fe9b 	bl	8006b7c <tcp_seg_free>
            while (next &&
 8008e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d00e      	beq.n	8008e6a <tcp_receive+0x9be>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8008e4c:	4b8e      	ldr	r3, [pc, #568]	@ (8009088 <tcp_receive+0xbdc>)
 8008e4e:	881b      	ldrh	r3, [r3, #0]
 8008e50:	461a      	mov	r2, r3
 8008e52:	4b8e      	ldr	r3, [pc, #568]	@ (800908c <tcp_receive+0xbe0>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	441a      	add	r2, r3
 8008e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e60:	8909      	ldrh	r1, [r1, #8]
 8008e62:	440b      	add	r3, r1
 8008e64:	1ad3      	subs	r3, r2, r3
            while (next &&
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	da9d      	bge.n	8008da6 <tcp_receive+0x8fa>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8008e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d057      	beq.n	8008f20 <tcp_receive+0xa74>
                TCP_SEQ_GT(seqno + tcplen,
 8008e70:	4b85      	ldr	r3, [pc, #532]	@ (8009088 <tcp_receive+0xbdc>)
 8008e72:	881b      	ldrh	r3, [r3, #0]
 8008e74:	461a      	mov	r2, r3
 8008e76:	4b85      	ldr	r3, [pc, #532]	@ (800908c <tcp_receive+0xbe0>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	441a      	add	r2, r3
 8008e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	1ad3      	subs	r3, r2, r3
            if (next &&
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	dd4b      	ble.n	8008f20 <tcp_receive+0xa74>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8008e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	b29a      	uxth	r2, r3
 8008e90:	4b7e      	ldr	r3, [pc, #504]	@ (800908c <tcp_receive+0xbe0>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	1ad3      	subs	r3, r2, r3
 8008e98:	b29a      	uxth	r2, r3
 8008e9a:	4b7d      	ldr	r3, [pc, #500]	@ (8009090 <tcp_receive+0xbe4>)
 8008e9c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008e9e:	4b7c      	ldr	r3, [pc, #496]	@ (8009090 <tcp_receive+0xbe4>)
 8008ea0:	68db      	ldr	r3, [r3, #12]
 8008ea2:	899b      	ldrh	r3, [r3, #12]
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7fb fa77 	bl	800439a <lwip_htons>
 8008eac:	4603      	mov	r3, r0
 8008eae:	f003 0302 	and.w	r3, r3, #2
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d005      	beq.n	8008ec2 <tcp_receive+0xa16>
                inseg.len -= 1;
 8008eb6:	4b76      	ldr	r3, [pc, #472]	@ (8009090 <tcp_receive+0xbe4>)
 8008eb8:	891b      	ldrh	r3, [r3, #8]
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	b29a      	uxth	r2, r3
 8008ebe:	4b74      	ldr	r3, [pc, #464]	@ (8009090 <tcp_receive+0xbe4>)
 8008ec0:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8008ec2:	4b73      	ldr	r3, [pc, #460]	@ (8009090 <tcp_receive+0xbe4>)
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	4a72      	ldr	r2, [pc, #456]	@ (8009090 <tcp_receive+0xbe4>)
 8008ec8:	8912      	ldrh	r2, [r2, #8]
 8008eca:	4611      	mov	r1, r2
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f7fc fa01 	bl	80052d4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8008ed2:	4b6f      	ldr	r3, [pc, #444]	@ (8009090 <tcp_receive+0xbe4>)
 8008ed4:	891c      	ldrh	r4, [r3, #8]
 8008ed6:	4b6e      	ldr	r3, [pc, #440]	@ (8009090 <tcp_receive+0xbe4>)
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	899b      	ldrh	r3, [r3, #12]
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7fb fa5b 	bl	800439a <lwip_htons>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	f003 0303 	and.w	r3, r3, #3
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d001      	beq.n	8008ef2 <tcp_receive+0xa46>
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e000      	b.n	8008ef4 <tcp_receive+0xa48>
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	4423      	add	r3, r4
 8008ef6:	b29a      	uxth	r2, r3
 8008ef8:	4b63      	ldr	r3, [pc, #396]	@ (8009088 <tcp_receive+0xbdc>)
 8008efa:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8008efc:	4b62      	ldr	r3, [pc, #392]	@ (8009088 <tcp_receive+0xbdc>)
 8008efe:	881b      	ldrh	r3, [r3, #0]
 8008f00:	461a      	mov	r2, r3
 8008f02:	4b62      	ldr	r3, [pc, #392]	@ (800908c <tcp_receive+0xbe0>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	441a      	add	r2, r3
 8008f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f0a:	68db      	ldr	r3, [r3, #12]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d006      	beq.n	8008f20 <tcp_receive+0xa74>
 8008f12:	4b60      	ldr	r3, [pc, #384]	@ (8009094 <tcp_receive+0xbe8>)
 8008f14:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 8008f18:	495f      	ldr	r1, [pc, #380]	@ (8009098 <tcp_receive+0xbec>)
 8008f1a:	4860      	ldr	r0, [pc, #384]	@ (800909c <tcp_receive+0xbf0>)
 8008f1c:	f004 fc46 	bl	800d7ac <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f24:	671a      	str	r2, [r3, #112]	@ 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8008f26:	4b58      	ldr	r3, [pc, #352]	@ (8009088 <tcp_receive+0xbdc>)
 8008f28:	881b      	ldrh	r3, [r3, #0]
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	4b57      	ldr	r3, [pc, #348]	@ (800908c <tcp_receive+0xbe0>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	441a      	add	r2, r3
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008f3a:	4b53      	ldr	r3, [pc, #332]	@ (8009088 <tcp_receive+0xbdc>)
 8008f3c:	881b      	ldrh	r3, [r3, #0]
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d206      	bcs.n	8008f50 <tcp_receive+0xaa4>
 8008f42:	4b54      	ldr	r3, [pc, #336]	@ (8009094 <tcp_receive+0xbe8>)
 8008f44:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8008f48:	4955      	ldr	r1, [pc, #340]	@ (80090a0 <tcp_receive+0xbf4>)
 8008f4a:	4854      	ldr	r0, [pc, #336]	@ (800909c <tcp_receive+0xbf0>)
 8008f4c:	f004 fc2e 	bl	800d7ac <iprintf>
        pcb->rcv_wnd -= tcplen;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008f54:	4b4c      	ldr	r3, [pc, #304]	@ (8009088 <tcp_receive+0xbdc>)
 8008f56:	881b      	ldrh	r3, [r3, #0]
 8008f58:	1ad3      	subs	r3, r2, r3
 8008f5a:	b29a      	uxth	r2, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f7fd f979 	bl	8006258 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8008f66:	4b4a      	ldr	r3, [pc, #296]	@ (8009090 <tcp_receive+0xbe4>)
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	891b      	ldrh	r3, [r3, #8]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d006      	beq.n	8008f7e <tcp_receive+0xad2>
          recv_data = inseg.p;
 8008f70:	4b47      	ldr	r3, [pc, #284]	@ (8009090 <tcp_receive+0xbe4>)
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	4a4b      	ldr	r2, [pc, #300]	@ (80090a4 <tcp_receive+0xbf8>)
 8008f76:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8008f78:	4b45      	ldr	r3, [pc, #276]	@ (8009090 <tcp_receive+0xbe4>)
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008f7e:	4b44      	ldr	r3, [pc, #272]	@ (8009090 <tcp_receive+0xbe4>)
 8008f80:	68db      	ldr	r3, [r3, #12]
 8008f82:	899b      	ldrh	r3, [r3, #12]
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7fb fa07 	bl	800439a <lwip_htons>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	f003 0301 	and.w	r3, r3, #1
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	f000 80b4 	beq.w	8009100 <tcp_receive+0xc54>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8008f98:	4b43      	ldr	r3, [pc, #268]	@ (80090a8 <tcp_receive+0xbfc>)
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	f043 0320 	orr.w	r3, r3, #32
 8008fa0:	b2da      	uxtb	r2, r3
 8008fa2:	4b41      	ldr	r3, [pc, #260]	@ (80090a8 <tcp_receive+0xbfc>)
 8008fa4:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8008fa6:	e0ab      	b.n	8009100 <tcp_receive+0xc54>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fac:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fb2:	68db      	ldr	r3, [r3, #12]
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	4a35      	ldr	r2, [pc, #212]	@ (800908c <tcp_receive+0xbe0>)
 8008fb8:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	891b      	ldrh	r3, [r3, #8]
 8008fbe:	461c      	mov	r4, r3
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	68db      	ldr	r3, [r3, #12]
 8008fc4:	899b      	ldrh	r3, [r3, #12]
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f7fb f9e6 	bl	800439a <lwip_htons>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	f003 0303 	and.w	r3, r3, #3
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d001      	beq.n	8008fdc <tcp_receive+0xb30>
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e000      	b.n	8008fde <tcp_receive+0xb32>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	191a      	adds	r2, r3, r4
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fe4:	441a      	add	r2, r3
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fee:	461c      	mov	r4, r3
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	891b      	ldrh	r3, [r3, #8]
 8008ff4:	461d      	mov	r5, r3
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	899b      	ldrh	r3, [r3, #12]
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7fb f9cb 	bl	800439a <lwip_htons>
 8009004:	4603      	mov	r3, r0
 8009006:	f003 0303 	and.w	r3, r3, #3
 800900a:	2b00      	cmp	r3, #0
 800900c:	d001      	beq.n	8009012 <tcp_receive+0xb66>
 800900e:	2301      	movs	r3, #1
 8009010:	e000      	b.n	8009014 <tcp_receive+0xb68>
 8009012:	2300      	movs	r3, #0
 8009014:	442b      	add	r3, r5
 8009016:	429c      	cmp	r4, r3
 8009018:	d206      	bcs.n	8009028 <tcp_receive+0xb7c>
 800901a:	4b1e      	ldr	r3, [pc, #120]	@ (8009094 <tcp_receive+0xbe8>)
 800901c:	f240 52dd 	movw	r2, #1501	@ 0x5dd
 8009020:	4922      	ldr	r1, [pc, #136]	@ (80090ac <tcp_receive+0xc00>)
 8009022:	481e      	ldr	r0, [pc, #120]	@ (800909c <tcp_receive+0xbf0>)
 8009024:	f004 fbc2 	bl	800d7ac <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	891b      	ldrh	r3, [r3, #8]
 800902c:	461c      	mov	r4, r3
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	68db      	ldr	r3, [r3, #12]
 8009032:	899b      	ldrh	r3, [r3, #12]
 8009034:	b29b      	uxth	r3, r3
 8009036:	4618      	mov	r0, r3
 8009038:	f7fb f9af 	bl	800439a <lwip_htons>
 800903c:	4603      	mov	r3, r0
 800903e:	f003 0303 	and.w	r3, r3, #3
 8009042:	2b00      	cmp	r3, #0
 8009044:	d001      	beq.n	800904a <tcp_receive+0xb9e>
 8009046:	2301      	movs	r3, #1
 8009048:	e000      	b.n	800904c <tcp_receive+0xba0>
 800904a:	2300      	movs	r3, #0
 800904c:	1919      	adds	r1, r3, r4
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009052:	b28b      	uxth	r3, r1
 8009054:	1ad3      	subs	r3, r2, r3
 8009056:	b29a      	uxth	r2, r3
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f7fd f8fb 	bl	8006258 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	891b      	ldrh	r3, [r3, #8]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d028      	beq.n	80090be <tcp_receive+0xc12>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800906c:	4b0d      	ldr	r3, [pc, #52]	@ (80090a4 <tcp_receive+0xbf8>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d01d      	beq.n	80090b0 <tcp_receive+0xc04>
              pbuf_cat(recv_data, cseg->p);
 8009074:	4b0b      	ldr	r3, [pc, #44]	@ (80090a4 <tcp_receive+0xbf8>)
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	4619      	mov	r1, r3
 800907e:	4610      	mov	r0, r2
 8009080:	f7fc fb68 	bl	8005754 <pbuf_cat>
 8009084:	e018      	b.n	80090b8 <tcp_receive+0xc0c>
 8009086:	bf00      	nop
 8009088:	20006c8a 	.word	0x20006c8a
 800908c:	20006c80 	.word	0x20006c80
 8009090:	20006c60 	.word	0x20006c60
 8009094:	0800f21c 	.word	0x0800f21c
 8009098:	0800f520 	.word	0x0800f520
 800909c:	0800f260 	.word	0x0800f260
 80090a0:	0800f55c 	.word	0x0800f55c
 80090a4:	20006c90 	.word	0x20006c90
 80090a8:	20006c8d 	.word	0x20006c8d
 80090ac:	0800f57c 	.word	0x0800f57c
            } else {
              recv_data = cseg->p;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	4a71      	ldr	r2, [pc, #452]	@ (800927c <tcp_receive+0xdd0>)
 80090b6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2200      	movs	r2, #0
 80090bc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	899b      	ldrh	r3, [r3, #12]
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7fb f967 	bl	800439a <lwip_htons>
 80090cc:	4603      	mov	r3, r0
 80090ce:	f003 0301 	and.w	r3, r3, #1
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d00d      	beq.n	80090f2 <tcp_receive+0xc46>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80090d6:	4b6a      	ldr	r3, [pc, #424]	@ (8009280 <tcp_receive+0xdd4>)
 80090d8:	781b      	ldrb	r3, [r3, #0]
 80090da:	f043 0320 	orr.w	r3, r3, #32
 80090de:	b2da      	uxtb	r2, r3
 80090e0:	4b67      	ldr	r3, [pc, #412]	@ (8009280 <tcp_receive+0xdd4>)
 80090e2:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	7d1b      	ldrb	r3, [r3, #20]
 80090e8:	2b04      	cmp	r3, #4
 80090ea:	d102      	bne.n	80090f2 <tcp_receive+0xc46>
              pcb->state = CLOSE_WAIT;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2207      	movs	r2, #7
 80090f0:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	671a      	str	r2, [r3, #112]	@ 0x70
          tcp_seg_free(cseg);
 80090fa:	68f8      	ldr	r0, [r7, #12]
 80090fc:	f7fd fd3e 	bl	8006b7c <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009104:	2b00      	cmp	r3, #0
 8009106:	d008      	beq.n	800911a <tcp_receive+0xc6e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800910c:	68db      	ldr	r3, [r3, #12]
 800910e:	685a      	ldr	r2, [r3, #4]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8009114:	429a      	cmp	r2, r3
 8009116:	f43f af47 	beq.w	8008fa8 <tcp_receive+0xafc>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	7e9b      	ldrb	r3, [r3, #26]
 800911e:	f003 0301 	and.w	r3, r3, #1
 8009122:	2b00      	cmp	r3, #0
 8009124:	d00e      	beq.n	8009144 <tcp_receive+0xc98>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	7e9b      	ldrb	r3, [r3, #26]
 800912a:	f023 0301 	bic.w	r3, r3, #1
 800912e:	b2da      	uxtb	r2, r3
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	769a      	strb	r2, [r3, #26]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	7e9b      	ldrb	r3, [r3, #26]
 8009138:	f043 0302 	orr.w	r3, r3, #2
 800913c:	b2da      	uxtb	r2, r3
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009142:	e181      	b.n	8009448 <tcp_receive+0xf9c>
        tcp_ack(pcb);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	7e9b      	ldrb	r3, [r3, #26]
 8009148:	f043 0301 	orr.w	r3, r3, #1
 800914c:	b2da      	uxtb	r2, r3
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009152:	e179      	b.n	8009448 <tcp_receive+0xf9c>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f001 f8c1 	bl	800a2dc <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800915e:	2b00      	cmp	r3, #0
 8009160:	d106      	bne.n	8009170 <tcp_receive+0xcc4>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009162:	4848      	ldr	r0, [pc, #288]	@ (8009284 <tcp_receive+0xdd8>)
 8009164:	f7fd fd22 	bl	8006bac <tcp_seg_copy>
 8009168:	4602      	mov	r2, r0
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	671a      	str	r2, [r3, #112]	@ 0x70
      if (pcb->rcv_nxt == seqno) {
 800916e:	e16b      	b.n	8009448 <tcp_receive+0xf9c>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 8009170:	2300      	movs	r3, #0
 8009172:	62bb      	str	r3, [r7, #40]	@ 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009178:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800917a:	e150      	b.n	800941e <tcp_receive+0xf72>
            if (seqno == next->tcphdr->seqno) {
 800917c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	685a      	ldr	r2, [r3, #4]
 8009182:	4b41      	ldr	r3, [pc, #260]	@ (8009288 <tcp_receive+0xddc>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	429a      	cmp	r2, r3
 8009188:	d11d      	bne.n	80091c6 <tcp_receive+0xd1a>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800918a:	4b3e      	ldr	r3, [pc, #248]	@ (8009284 <tcp_receive+0xdd8>)
 800918c:	891a      	ldrh	r2, [r3, #8]
 800918e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009190:	891b      	ldrh	r3, [r3, #8]
 8009192:	429a      	cmp	r2, r3
 8009194:	f240 8148 	bls.w	8009428 <tcp_receive+0xf7c>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 8009198:	483a      	ldr	r0, [pc, #232]	@ (8009284 <tcp_receive+0xdd8>)
 800919a:	f7fd fd07 	bl	8006bac <tcp_seg_copy>
 800919e:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	f000 8142 	beq.w	800942c <tcp_receive+0xf80>
                  if (prev != NULL) {
 80091a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d003      	beq.n	80091b6 <tcp_receive+0xd0a>
                    prev->next = cseg;
 80091ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091b0:	68fa      	ldr	r2, [r7, #12]
 80091b2:	601a      	str	r2, [r3, #0]
 80091b4:	e002      	b.n	80091bc <tcp_receive+0xd10>
                  } else {
                    pcb->ooseq = cseg;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	671a      	str	r2, [r3, #112]	@ 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 80091bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091be:	68f8      	ldr	r0, [r7, #12]
 80091c0:	f7ff f8fe 	bl	80083c0 <tcp_oos_insert_segment>
                }
                break;
 80091c4:	e132      	b.n	800942c <tcp_receive+0xf80>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80091c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d117      	bne.n	80091fc <tcp_receive+0xd50>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80091cc:	4b2e      	ldr	r3, [pc, #184]	@ (8009288 <tcp_receive+0xddc>)
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	1ad3      	subs	r3, r2, r3
 80091d8:	2b00      	cmp	r3, #0
 80091da:	da57      	bge.n	800928c <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 80091dc:	4829      	ldr	r0, [pc, #164]	@ (8009284 <tcp_receive+0xdd8>)
 80091de:	f7fd fce5 	bl	8006bac <tcp_seg_copy>
 80091e2:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	f000 8122 	beq.w	8009430 <tcp_receive+0xf84>
                    pcb->ooseq = cseg;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	68fa      	ldr	r2, [r7, #12]
 80091f0:	671a      	str	r2, [r3, #112]	@ 0x70
                    tcp_oos_insert_segment(cseg, next);
 80091f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091f4:	68f8      	ldr	r0, [r7, #12]
 80091f6:	f7ff f8e3 	bl	80083c0 <tcp_oos_insert_segment>
                  }
                  break;
 80091fa:	e119      	b.n	8009430 <tcp_receive+0xf84>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 80091fc:	4b22      	ldr	r3, [pc, #136]	@ (8009288 <tcp_receive+0xddc>)
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009202:	68db      	ldr	r3, [r3, #12]
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	1ad3      	subs	r3, r2, r3
 8009208:	3b01      	subs	r3, #1
 800920a:	2b00      	cmp	r3, #0
 800920c:	db3e      	blt.n	800928c <tcp_receive+0xde0>
 800920e:	4b1e      	ldr	r3, [pc, #120]	@ (8009288 <tcp_receive+0xddc>)
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009214:	68db      	ldr	r3, [r3, #12]
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	1ad3      	subs	r3, r2, r3
 800921a:	3301      	adds	r3, #1
 800921c:	2b00      	cmp	r3, #0
 800921e:	dc35      	bgt.n	800928c <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 8009220:	4818      	ldr	r0, [pc, #96]	@ (8009284 <tcp_receive+0xdd8>)
 8009222:	f7fd fcc3 	bl	8006bac <tcp_seg_copy>
 8009226:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2b00      	cmp	r3, #0
 800922c:	f000 8102 	beq.w	8009434 <tcp_receive+0xf88>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009232:	68db      	ldr	r3, [r3, #12]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009238:	8912      	ldrh	r2, [r2, #8]
 800923a:	441a      	add	r2, r3
 800923c:	4b12      	ldr	r3, [pc, #72]	@ (8009288 <tcp_receive+0xddc>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	1ad3      	subs	r3, r2, r3
 8009242:	2b00      	cmp	r3, #0
 8009244:	dd12      	ble.n	800926c <tcp_receive+0xdc0>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009246:	4b10      	ldr	r3, [pc, #64]	@ (8009288 <tcp_receive+0xddc>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	b29a      	uxth	r2, r3
 800924c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800924e:	68db      	ldr	r3, [r3, #12]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	b29b      	uxth	r3, r3
 8009254:	1ad3      	subs	r3, r2, r3
 8009256:	b29a      	uxth	r2, r3
 8009258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800925a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800925c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800925e:	685a      	ldr	r2, [r3, #4]
 8009260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009262:	891b      	ldrh	r3, [r3, #8]
 8009264:	4619      	mov	r1, r3
 8009266:	4610      	mov	r0, r2
 8009268:	f7fc f834 	bl	80052d4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800926c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800926e:	68fa      	ldr	r2, [r7, #12]
 8009270:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8009272:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009274:	68f8      	ldr	r0, [r7, #12]
 8009276:	f7ff f8a3 	bl	80083c0 <tcp_oos_insert_segment>
                  }
                  break;
 800927a:	e0db      	b.n	8009434 <tcp_receive+0xf88>
 800927c:	20006c90 	.word	0x20006c90
 8009280:	20006c8d 	.word	0x20006c8d
 8009284:	20006c60 	.word	0x20006c60
 8009288:	20006c80 	.word	0x20006c80
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800928c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	f040 80bf 	bne.w	8009414 <tcp_receive+0xf68>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8009296:	4b7c      	ldr	r3, [pc, #496]	@ (8009488 <tcp_receive+0xfdc>)
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800929c:	68db      	ldr	r3, [r3, #12]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	f340 80b6 	ble.w	8009414 <tcp_receive+0xf68>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80092a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	899b      	ldrh	r3, [r3, #12]
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	4618      	mov	r0, r3
 80092b2:	f7fb f872 	bl	800439a <lwip_htons>
 80092b6:	4603      	mov	r3, r0
 80092b8:	f003 0301 	and.w	r3, r3, #1
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f040 80bb 	bne.w	8009438 <tcp_receive+0xf8c>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80092c2:	4872      	ldr	r0, [pc, #456]	@ (800948c <tcp_receive+0xfe0>)
 80092c4:	f7fd fc72 	bl	8006bac <tcp_seg_copy>
 80092c8:	4602      	mov	r2, r0
 80092ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092cc:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80092ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	f000 80b2 	beq.w	800943c <tcp_receive+0xf90>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80092d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092da:	68db      	ldr	r3, [r3, #12]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092e0:	8912      	ldrh	r2, [r2, #8]
 80092e2:	441a      	add	r2, r3
 80092e4:	4b68      	ldr	r3, [pc, #416]	@ (8009488 <tcp_receive+0xfdc>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	1ad3      	subs	r3, r2, r3
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	dd12      	ble.n	8009314 <tcp_receive+0xe68>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80092ee:	4b66      	ldr	r3, [pc, #408]	@ (8009488 <tcp_receive+0xfdc>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	b29a      	uxth	r2, r3
 80092f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	1ad3      	subs	r3, r2, r3
 80092fe:	b29a      	uxth	r2, r3
 8009300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009302:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8009304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009306:	685a      	ldr	r2, [r3, #4]
 8009308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800930a:	891b      	ldrh	r3, [r3, #8]
 800930c:	4619      	mov	r1, r3
 800930e:	4610      	mov	r0, r2
 8009310:	f7fb ffe0 	bl	80052d4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8009314:	4b5e      	ldr	r3, [pc, #376]	@ (8009490 <tcp_receive+0xfe4>)
 8009316:	881b      	ldrh	r3, [r3, #0]
 8009318:	461a      	mov	r2, r3
 800931a:	4b5b      	ldr	r3, [pc, #364]	@ (8009488 <tcp_receive+0xfdc>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	441a      	add	r2, r3
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009324:	6879      	ldr	r1, [r7, #4]
 8009326:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009328:	440b      	add	r3, r1
 800932a:	1ad3      	subs	r3, r2, r3
 800932c:	2b00      	cmp	r3, #0
 800932e:	f340 8085 	ble.w	800943c <tcp_receive+0xf90>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	68db      	ldr	r3, [r3, #12]
 8009338:	899b      	ldrh	r3, [r3, #12]
 800933a:	b29b      	uxth	r3, r3
 800933c:	4618      	mov	r0, r3
 800933e:	f7fb f82c 	bl	800439a <lwip_htons>
 8009342:	4603      	mov	r3, r0
 8009344:	f003 0301 	and.w	r3, r3, #1
 8009348:	2b00      	cmp	r3, #0
 800934a:	d01e      	beq.n	800938a <tcp_receive+0xede>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800934c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	68db      	ldr	r3, [r3, #12]
 8009352:	899b      	ldrh	r3, [r3, #12]
 8009354:	b29b      	uxth	r3, r3
 8009356:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800935a:	b29c      	uxth	r4, r3
 800935c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	68db      	ldr	r3, [r3, #12]
 8009362:	899b      	ldrh	r3, [r3, #12]
 8009364:	b29b      	uxth	r3, r3
 8009366:	4618      	mov	r0, r3
 8009368:	f7fb f817 	bl	800439a <lwip_htons>
 800936c:	4603      	mov	r3, r0
 800936e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8009372:	b29b      	uxth	r3, r3
 8009374:	4618      	mov	r0, r3
 8009376:	f7fb f810 	bl	800439a <lwip_htons>
 800937a:	4603      	mov	r3, r0
 800937c:	461a      	mov	r2, r3
 800937e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	68db      	ldr	r3, [r3, #12]
 8009384:	4322      	orrs	r2, r4
 8009386:	b292      	uxth	r2, r2
 8009388:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800938e:	b29a      	uxth	r2, r3
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009394:	4413      	add	r3, r2
 8009396:	b299      	uxth	r1, r3
 8009398:	4b3b      	ldr	r3, [pc, #236]	@ (8009488 <tcp_receive+0xfdc>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	b29a      	uxth	r2, r3
 800939e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	1a8a      	subs	r2, r1, r2
 80093a4:	b292      	uxth	r2, r2
 80093a6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80093a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	685a      	ldr	r2, [r3, #4]
 80093ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	891b      	ldrh	r3, [r3, #8]
 80093b4:	4619      	mov	r1, r3
 80093b6:	4610      	mov	r0, r2
 80093b8:	f7fb ff8c 	bl	80052d4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80093bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	891c      	ldrh	r4, [r3, #8]
 80093c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	68db      	ldr	r3, [r3, #12]
 80093c8:	899b      	ldrh	r3, [r3, #12]
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	4618      	mov	r0, r3
 80093ce:	f7fa ffe4 	bl	800439a <lwip_htons>
 80093d2:	4603      	mov	r3, r0
 80093d4:	f003 0303 	and.w	r3, r3, #3
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d001      	beq.n	80093e0 <tcp_receive+0xf34>
 80093dc:	2301      	movs	r3, #1
 80093de:	e000      	b.n	80093e2 <tcp_receive+0xf36>
 80093e0:	2300      	movs	r3, #0
 80093e2:	4423      	add	r3, r4
 80093e4:	b29a      	uxth	r2, r3
 80093e6:	4b2a      	ldr	r3, [pc, #168]	@ (8009490 <tcp_receive+0xfe4>)
 80093e8:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80093ea:	4b29      	ldr	r3, [pc, #164]	@ (8009490 <tcp_receive+0xfe4>)
 80093ec:	881b      	ldrh	r3, [r3, #0]
 80093ee:	461a      	mov	r2, r3
 80093f0:	4b25      	ldr	r3, [pc, #148]	@ (8009488 <tcp_receive+0xfdc>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	441a      	add	r2, r3
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093fa:	6879      	ldr	r1, [r7, #4]
 80093fc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80093fe:	440b      	add	r3, r1
 8009400:	429a      	cmp	r2, r3
 8009402:	d01b      	beq.n	800943c <tcp_receive+0xf90>
 8009404:	4b23      	ldr	r3, [pc, #140]	@ (8009494 <tcp_receive+0xfe8>)
 8009406:	f240 627a 	movw	r2, #1658	@ 0x67a
 800940a:	4923      	ldr	r1, [pc, #140]	@ (8009498 <tcp_receive+0xfec>)
 800940c:	4823      	ldr	r0, [pc, #140]	@ (800949c <tcp_receive+0xff0>)
 800940e:	f004 f9cd 	bl	800d7ac <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8009412:	e013      	b.n	800943c <tcp_receive+0xf90>
              }
            }
            prev = next;
 8009414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009416:	62bb      	str	r3, [r7, #40]	@ 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800941e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009420:	2b00      	cmp	r3, #0
 8009422:	f47f aeab 	bne.w	800917c <tcp_receive+0xcd0>
      if (pcb->rcv_nxt == seqno) {
 8009426:	e00f      	b.n	8009448 <tcp_receive+0xf9c>
                break;
 8009428:	bf00      	nop
 800942a:	e00d      	b.n	8009448 <tcp_receive+0xf9c>
                break;
 800942c:	bf00      	nop
 800942e:	e00b      	b.n	8009448 <tcp_receive+0xf9c>
                  break;
 8009430:	bf00      	nop
 8009432:	e009      	b.n	8009448 <tcp_receive+0xf9c>
                  break;
 8009434:	bf00      	nop
 8009436:	e007      	b.n	8009448 <tcp_receive+0xf9c>
                  break;
 8009438:	bf00      	nop
 800943a:	e005      	b.n	8009448 <tcp_receive+0xf9c>
                break;
 800943c:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 800943e:	e003      	b.n	8009448 <tcp_receive+0xf9c>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f000 ff4b 	bl	800a2dc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009446:	e01a      	b.n	800947e <tcp_receive+0xfd2>
 8009448:	e019      	b.n	800947e <tcp_receive+0xfd2>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800944a:	4b0f      	ldr	r3, [pc, #60]	@ (8009488 <tcp_receive+0xfdc>)
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009452:	1ad3      	subs	r3, r2, r3
 8009454:	2b00      	cmp	r3, #0
 8009456:	db0a      	blt.n	800946e <tcp_receive+0xfc2>
 8009458:	4b0b      	ldr	r3, [pc, #44]	@ (8009488 <tcp_receive+0xfdc>)
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009460:	6879      	ldr	r1, [r7, #4]
 8009462:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009464:	440b      	add	r3, r1
 8009466:	1ad3      	subs	r3, r2, r3
 8009468:	3301      	adds	r3, #1
 800946a:	2b00      	cmp	r3, #0
 800946c:	dd07      	ble.n	800947e <tcp_receive+0xfd2>
      tcp_ack_now(pcb);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	7e9b      	ldrb	r3, [r3, #26]
 8009472:	f043 0302 	orr.w	r3, r3, #2
 8009476:	b2da      	uxtb	r2, r3
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	769a      	strb	r2, [r3, #26]
    }
  }
}
 800947c:	e7ff      	b.n	800947e <tcp_receive+0xfd2>
 800947e:	bf00      	nop
 8009480:	3734      	adds	r7, #52	@ 0x34
 8009482:	46bd      	mov	sp, r7
 8009484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009486:	bf00      	nop
 8009488:	20006c80 	.word	0x20006c80
 800948c:	20006c60 	.word	0x20006c60
 8009490:	20006c8a 	.word	0x20006c8a
 8009494:	0800f21c 	.word	0x0800f21c
 8009498:	0800f4e8 	.word	0x0800f4e8
 800949c:	0800f260 	.word	0x0800f260

080094a0 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b083      	sub	sp, #12
 80094a4:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 80094a6:	4b17      	ldr	r3, [pc, #92]	@ (8009504 <tcp_getoptbyte+0x64>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d005      	beq.n	80094ba <tcp_getoptbyte+0x1a>
 80094ae:	4b16      	ldr	r3, [pc, #88]	@ (8009508 <tcp_getoptbyte+0x68>)
 80094b0:	881a      	ldrh	r2, [r3, #0]
 80094b2:	4b16      	ldr	r3, [pc, #88]	@ (800950c <tcp_getoptbyte+0x6c>)
 80094b4:	881b      	ldrh	r3, [r3, #0]
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d20e      	bcs.n	80094d8 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 80094ba:	4b15      	ldr	r3, [pc, #84]	@ (8009510 <tcp_getoptbyte+0x70>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	3314      	adds	r3, #20
 80094c0:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 80094c2:	4b11      	ldr	r3, [pc, #68]	@ (8009508 <tcp_getoptbyte+0x68>)
 80094c4:	881b      	ldrh	r3, [r3, #0]
 80094c6:	1c5a      	adds	r2, r3, #1
 80094c8:	b291      	uxth	r1, r2
 80094ca:	4a0f      	ldr	r2, [pc, #60]	@ (8009508 <tcp_getoptbyte+0x68>)
 80094cc:	8011      	strh	r1, [r2, #0]
 80094ce:	461a      	mov	r2, r3
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	4413      	add	r3, r2
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	e010      	b.n	80094fa <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 80094d8:	4b0b      	ldr	r3, [pc, #44]	@ (8009508 <tcp_getoptbyte+0x68>)
 80094da:	881b      	ldrh	r3, [r3, #0]
 80094dc:	1c5a      	adds	r2, r3, #1
 80094de:	b291      	uxth	r1, r2
 80094e0:	4a09      	ldr	r2, [pc, #36]	@ (8009508 <tcp_getoptbyte+0x68>)
 80094e2:	8011      	strh	r1, [r2, #0]
 80094e4:	b2da      	uxtb	r2, r3
 80094e6:	4b09      	ldr	r3, [pc, #36]	@ (800950c <tcp_getoptbyte+0x6c>)
 80094e8:	881b      	ldrh	r3, [r3, #0]
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	1ad3      	subs	r3, r2, r3
 80094ee:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 80094f0:	4b04      	ldr	r3, [pc, #16]	@ (8009504 <tcp_getoptbyte+0x64>)
 80094f2:	681a      	ldr	r2, [r3, #0]
 80094f4:	79fb      	ldrb	r3, [r7, #7]
 80094f6:	4413      	add	r3, r2
 80094f8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	370c      	adds	r7, #12
 80094fe:	46bd      	mov	sp, r7
 8009500:	bc80      	pop	{r7}
 8009502:	4770      	bx	lr
 8009504:	20006c78 	.word	0x20006c78
 8009508:	20006c7c 	.word	0x20006c7c
 800950c:	20006c76 	.word	0x20006c76
 8009510:	20006c70 	.word	0x20006c70

08009514 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800951c:	4b2e      	ldr	r3, [pc, #184]	@ (80095d8 <tcp_parseopt+0xc4>)
 800951e:	881b      	ldrh	r3, [r3, #0]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d056      	beq.n	80095d2 <tcp_parseopt+0xbe>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009524:	4b2d      	ldr	r3, [pc, #180]	@ (80095dc <tcp_parseopt+0xc8>)
 8009526:	2200      	movs	r2, #0
 8009528:	801a      	strh	r2, [r3, #0]
 800952a:	e046      	b.n	80095ba <tcp_parseopt+0xa6>
      u8_t opt = tcp_getoptbyte();
 800952c:	f7ff ffb8 	bl	80094a0 <tcp_getoptbyte>
 8009530:	4603      	mov	r3, r0
 8009532:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8009534:	7bfb      	ldrb	r3, [r7, #15]
 8009536:	2b02      	cmp	r3, #2
 8009538:	d006      	beq.n	8009548 <tcp_parseopt+0x34>
 800953a:	2b02      	cmp	r3, #2
 800953c:	dc2a      	bgt.n	8009594 <tcp_parseopt+0x80>
 800953e:	2b00      	cmp	r3, #0
 8009540:	d042      	beq.n	80095c8 <tcp_parseopt+0xb4>
 8009542:	2b01      	cmp	r3, #1
 8009544:	d038      	beq.n	80095b8 <tcp_parseopt+0xa4>
 8009546:	e025      	b.n	8009594 <tcp_parseopt+0x80>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009548:	f7ff ffaa 	bl	80094a0 <tcp_getoptbyte>
 800954c:	4603      	mov	r3, r0
 800954e:	2b04      	cmp	r3, #4
 8009550:	d13c      	bne.n	80095cc <tcp_parseopt+0xb8>
 8009552:	4b22      	ldr	r3, [pc, #136]	@ (80095dc <tcp_parseopt+0xc8>)
 8009554:	881b      	ldrh	r3, [r3, #0]
 8009556:	3301      	adds	r3, #1
 8009558:	4a1f      	ldr	r2, [pc, #124]	@ (80095d8 <tcp_parseopt+0xc4>)
 800955a:	8812      	ldrh	r2, [r2, #0]
 800955c:	4293      	cmp	r3, r2
 800955e:	da35      	bge.n	80095cc <tcp_parseopt+0xb8>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8009560:	f7ff ff9e 	bl	80094a0 <tcp_getoptbyte>
 8009564:	4603      	mov	r3, r0
 8009566:	021b      	lsls	r3, r3, #8
 8009568:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 800956a:	f7ff ff99 	bl	80094a0 <tcp_getoptbyte>
 800956e:	4603      	mov	r3, r0
 8009570:	461a      	mov	r2, r3
 8009572:	89bb      	ldrh	r3, [r7, #12]
 8009574:	4313      	orrs	r3, r2
 8009576:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009578:	89bb      	ldrh	r3, [r7, #12]
 800957a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800957e:	d804      	bhi.n	800958a <tcp_parseopt+0x76>
 8009580:	89bb      	ldrh	r3, [r7, #12]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d001      	beq.n	800958a <tcp_parseopt+0x76>
 8009586:	89ba      	ldrh	r2, [r7, #12]
 8009588:	e001      	b.n	800958e <tcp_parseopt+0x7a>
 800958a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	865a      	strh	r2, [r3, #50]	@ 0x32
        break;
 8009592:	e012      	b.n	80095ba <tcp_parseopt+0xa6>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8009594:	f7ff ff84 	bl	80094a0 <tcp_getoptbyte>
 8009598:	4603      	mov	r3, r0
 800959a:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 800959c:	7afb      	ldrb	r3, [r7, #11]
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d916      	bls.n	80095d0 <tcp_parseopt+0xbc>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 80095a2:	7afb      	ldrb	r3, [r7, #11]
 80095a4:	b29a      	uxth	r2, r3
 80095a6:	4b0d      	ldr	r3, [pc, #52]	@ (80095dc <tcp_parseopt+0xc8>)
 80095a8:	881b      	ldrh	r3, [r3, #0]
 80095aa:	4413      	add	r3, r2
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	3b02      	subs	r3, #2
 80095b0:	b29a      	uxth	r2, r3
 80095b2:	4b0a      	ldr	r3, [pc, #40]	@ (80095dc <tcp_parseopt+0xc8>)
 80095b4:	801a      	strh	r2, [r3, #0]
 80095b6:	e000      	b.n	80095ba <tcp_parseopt+0xa6>
        break;
 80095b8:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80095ba:	4b08      	ldr	r3, [pc, #32]	@ (80095dc <tcp_parseopt+0xc8>)
 80095bc:	881a      	ldrh	r2, [r3, #0]
 80095be:	4b06      	ldr	r3, [pc, #24]	@ (80095d8 <tcp_parseopt+0xc4>)
 80095c0:	881b      	ldrh	r3, [r3, #0]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d3b2      	bcc.n	800952c <tcp_parseopt+0x18>
 80095c6:	e004      	b.n	80095d2 <tcp_parseopt+0xbe>
        return;
 80095c8:	bf00      	nop
 80095ca:	e002      	b.n	80095d2 <tcp_parseopt+0xbe>
          return;
 80095cc:	bf00      	nop
 80095ce:	e000      	b.n	80095d2 <tcp_parseopt+0xbe>
          return;
 80095d0:	bf00      	nop
      }
    }
  }
}
 80095d2:	3710      	adds	r7, #16
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}
 80095d8:	20006c74 	.word	0x20006c74
 80095dc:	20006c7c 	.word	0x20006c7c

080095e0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80095e0:	b480      	push	{r7}
 80095e2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80095e4:	4b05      	ldr	r3, [pc, #20]	@ (80095fc <tcp_trigger_input_pcb_close+0x1c>)
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	f043 0310 	orr.w	r3, r3, #16
 80095ec:	b2da      	uxtb	r2, r3
 80095ee:	4b03      	ldr	r3, [pc, #12]	@ (80095fc <tcp_trigger_input_pcb_close+0x1c>)
 80095f0:	701a      	strb	r2, [r3, #0]
}
 80095f2:	bf00      	nop
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bc80      	pop	{r7}
 80095f8:	4770      	bx	lr
 80095fa:	bf00      	nop
 80095fc:	20006c8d 	.word	0x20006c8d

08009600 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b086      	sub	sp, #24
 8009604:	af00      	add	r7, sp, #0
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	607b      	str	r3, [r7, #4]
 800960a:	460b      	mov	r3, r1
 800960c:	817b      	strh	r3, [r7, #10]
 800960e:	4613      	mov	r3, r2
 8009610:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8009612:	897a      	ldrh	r2, [r7, #10]
 8009614:	893b      	ldrh	r3, [r7, #8]
 8009616:	4413      	add	r3, r2
 8009618:	b29b      	uxth	r3, r3
 800961a:	3314      	adds	r3, #20
 800961c:	b29b      	uxth	r3, r3
 800961e:	2200      	movs	r2, #0
 8009620:	4619      	mov	r1, r3
 8009622:	2001      	movs	r0, #1
 8009624:	f7fb fc52 	bl	8004ecc <pbuf_alloc>
 8009628:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d056      	beq.n	80096de <tcp_output_alloc_header+0xde>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8009630:	897b      	ldrh	r3, [r7, #10]
 8009632:	3313      	adds	r3, #19
 8009634:	697a      	ldr	r2, [r7, #20]
 8009636:	8952      	ldrh	r2, [r2, #10]
 8009638:	4293      	cmp	r3, r2
 800963a:	db05      	blt.n	8009648 <tcp_output_alloc_header+0x48>
 800963c:	4b2a      	ldr	r3, [pc, #168]	@ (80096e8 <tcp_output_alloc_header+0xe8>)
 800963e:	2272      	movs	r2, #114	@ 0x72
 8009640:	492a      	ldr	r1, [pc, #168]	@ (80096ec <tcp_output_alloc_header+0xec>)
 8009642:	482b      	ldr	r0, [pc, #172]	@ (80096f0 <tcp_output_alloc_header+0xf0>)
 8009644:	f004 f8b2 	bl	800d7ac <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	8adb      	ldrh	r3, [r3, #22]
 8009652:	4618      	mov	r0, r3
 8009654:	f7fa fea1 	bl	800439a <lwip_htons>
 8009658:	4603      	mov	r3, r0
 800965a:	461a      	mov	r2, r3
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	8b1b      	ldrh	r3, [r3, #24]
 8009664:	4618      	mov	r0, r3
 8009666:	f7fa fe98 	bl	800439a <lwip_htons>
 800966a:	4603      	mov	r3, r0
 800966c:	461a      	mov	r2, r3
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800967c:	4618      	mov	r0, r3
 800967e:	f7fa fe99 	bl	80043b4 <lwip_htonl>
 8009682:	4602      	mov	r2, r0
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8009688:	897b      	ldrh	r3, [r7, #10]
 800968a:	089b      	lsrs	r3, r3, #2
 800968c:	b29b      	uxth	r3, r3
 800968e:	3305      	adds	r3, #5
 8009690:	b29b      	uxth	r3, r3
 8009692:	031b      	lsls	r3, r3, #12
 8009694:	b29b      	uxth	r3, r3
 8009696:	f043 0310 	orr.w	r3, r3, #16
 800969a:	b29b      	uxth	r3, r3
 800969c:	4618      	mov	r0, r3
 800969e:	f7fa fe7c 	bl	800439a <lwip_htons>
 80096a2:	4603      	mov	r3, r0
 80096a4:	461a      	mov	r2, r3
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7fa fe73 	bl	800439a <lwip_htons>
 80096b4:	4603      	mov	r3, r0
 80096b6:	461a      	mov	r2, r3
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	2200      	movs	r2, #0
 80096c0:	741a      	strb	r2, [r3, #16]
 80096c2:	2200      	movs	r2, #0
 80096c4:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	2200      	movs	r2, #0
 80096ca:	749a      	strb	r2, [r3, #18]
 80096cc:	2200      	movs	r2, #0
 80096ce:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096d4:	68fa      	ldr	r2, [r7, #12]
 80096d6:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80096d8:	441a      	add	r2, r3
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 80096de:	697b      	ldr	r3, [r7, #20]
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3718      	adds	r7, #24
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	0800f5a4 	.word	0x0800f5a4
 80096ec:	0800f5d8 	.word	0x0800f5d8
 80096f0:	0800f608 	.word	0x0800f608

080096f4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80096f4:	b590      	push	{r4, r7, lr}
 80096f6:	b085      	sub	sp, #20
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009700:	2b00      	cmp	r3, #0
 8009702:	d02d      	beq.n	8009760 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009708:	60fb      	str	r3, [r7, #12]
 800970a:	e002      	b.n	8009712 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d1f8      	bne.n	800970c <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	68db      	ldr	r3, [r3, #12]
 800971e:	899b      	ldrh	r3, [r3, #12]
 8009720:	b29b      	uxth	r3, r3
 8009722:	4618      	mov	r0, r3
 8009724:	f7fa fe39 	bl	800439a <lwip_htons>
 8009728:	4603      	mov	r3, r0
 800972a:	f003 0307 	and.w	r3, r3, #7
 800972e:	2b00      	cmp	r3, #0
 8009730:	d116      	bne.n	8009760 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	68db      	ldr	r3, [r3, #12]
 8009736:	899b      	ldrh	r3, [r3, #12]
 8009738:	b29c      	uxth	r4, r3
 800973a:	2001      	movs	r0, #1
 800973c:	f7fa fe2d 	bl	800439a <lwip_htons>
 8009740:	4603      	mov	r3, r0
 8009742:	461a      	mov	r2, r3
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	68db      	ldr	r3, [r3, #12]
 8009748:	4322      	orrs	r2, r4
 800974a:	b292      	uxth	r2, r2
 800974c:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	7e9b      	ldrb	r3, [r3, #26]
 8009752:	f043 0320 	orr.w	r3, r3, #32
 8009756:	b2da      	uxtb	r2, r3
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 800975c:	2300      	movs	r3, #0
 800975e:	e004      	b.n	800976a <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8009760:	2101      	movs	r1, #1
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 fcbe 	bl	800a0e4 <tcp_enqueue_flags>
 8009768:	4603      	mov	r3, r0
}
 800976a:	4618      	mov	r0, r3
 800976c:	3714      	adds	r7, #20
 800976e:	46bd      	mov	sp, r7
 8009770:	bd90      	pop	{r4, r7, pc}
	...

08009774 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8009774:	b590      	push	{r4, r7, lr}
 8009776:	b087      	sub	sp, #28
 8009778:	af00      	add	r7, sp, #0
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	60b9      	str	r1, [r7, #8]
 800977e:	603b      	str	r3, [r7, #0]
 8009780:	4613      	mov	r3, r2
 8009782:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009784:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009788:	009b      	lsls	r3, r3, #2
 800978a:	b2db      	uxtb	r3, r3
 800978c:	f003 0304 	and.w	r3, r3, #4
 8009790:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8009792:	2003      	movs	r0, #3
 8009794:	f7fb f9aa 	bl	8004aec <memp_malloc>
 8009798:	6138      	str	r0, [r7, #16]
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d104      	bne.n	80097aa <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80097a0:	68b8      	ldr	r0, [r7, #8]
 80097a2:	f7fb ff0b 	bl	80055bc <pbuf_free>
    return NULL;
 80097a6:	2300      	movs	r3, #0
 80097a8:	e060      	b.n	800986c <tcp_create_segment+0xf8>
  }
  seg->flags = optflags;
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80097b0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	2200      	movs	r2, #0
 80097b6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	68ba      	ldr	r2, [r7, #8]
 80097bc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	891a      	ldrh	r2, [r3, #8]
 80097c2:	7dfb      	ldrb	r3, [r7, #23]
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d205      	bcs.n	80097d6 <tcp_create_segment+0x62>
 80097ca:	4b2a      	ldr	r3, [pc, #168]	@ (8009874 <tcp_create_segment+0x100>)
 80097cc:	22ba      	movs	r2, #186	@ 0xba
 80097ce:	492a      	ldr	r1, [pc, #168]	@ (8009878 <tcp_create_segment+0x104>)
 80097d0:	482a      	ldr	r0, [pc, #168]	@ (800987c <tcp_create_segment+0x108>)
 80097d2:	f003 ffeb 	bl	800d7ac <iprintf>
  seg->len = p->tot_len - optlen;
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	891a      	ldrh	r2, [r3, #8]
 80097da:	7dfb      	ldrb	r3, [r7, #23]
 80097dc:	b29b      	uxth	r3, r3
 80097de:	1ad3      	subs	r3, r2, r3
 80097e0:	b29a      	uxth	r2, r3
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 80097e6:	2114      	movs	r1, #20
 80097e8:	68b8      	ldr	r0, [r7, #8]
 80097ea:	f7fb fec3 	bl	8005574 <pbuf_header>
 80097ee:	4603      	mov	r3, r0
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d004      	beq.n	80097fe <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80097f4:	6938      	ldr	r0, [r7, #16]
 80097f6:	f7fd f9c1 	bl	8006b7c <tcp_seg_free>
    return NULL;
 80097fa:	2300      	movs	r3, #0
 80097fc:	e036      	b.n	800986c <tcp_create_segment+0xf8>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	685a      	ldr	r2, [r3, #4]
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	8ada      	ldrh	r2, [r3, #22]
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	68dc      	ldr	r4, [r3, #12]
 8009810:	4610      	mov	r0, r2
 8009812:	f7fa fdc2 	bl	800439a <lwip_htons>
 8009816:	4603      	mov	r3, r0
 8009818:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	8b1a      	ldrh	r2, [r3, #24]
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	68dc      	ldr	r4, [r3, #12]
 8009822:	4610      	mov	r0, r2
 8009824:	f7fa fdb9 	bl	800439a <lwip_htons>
 8009828:	4603      	mov	r3, r0
 800982a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	68dc      	ldr	r4, [r3, #12]
 8009830:	6838      	ldr	r0, [r7, #0]
 8009832:	f7fa fdbf 	bl	80043b4 <lwip_htonl>
 8009836:	4603      	mov	r3, r0
 8009838:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800983a:	7dfb      	ldrb	r3, [r7, #23]
 800983c:	089b      	lsrs	r3, r3, #2
 800983e:	b2db      	uxtb	r3, r3
 8009840:	3305      	adds	r3, #5
 8009842:	b29b      	uxth	r3, r3
 8009844:	031b      	lsls	r3, r3, #12
 8009846:	b29a      	uxth	r2, r3
 8009848:	79fb      	ldrb	r3, [r7, #7]
 800984a:	b29b      	uxth	r3, r3
 800984c:	4313      	orrs	r3, r2
 800984e:	b29a      	uxth	r2, r3
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	68dc      	ldr	r4, [r3, #12]
 8009854:	4610      	mov	r0, r2
 8009856:	f7fa fda0 	bl	800439a <lwip_htons>
 800985a:	4603      	mov	r3, r0
 800985c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	68db      	ldr	r3, [r3, #12]
 8009862:	2200      	movs	r2, #0
 8009864:	749a      	strb	r2, [r3, #18]
 8009866:	2200      	movs	r2, #0
 8009868:	74da      	strb	r2, [r3, #19]
  return seg;
 800986a:	693b      	ldr	r3, [r7, #16]
}
 800986c:	4618      	mov	r0, r3
 800986e:	371c      	adds	r7, #28
 8009870:	46bd      	mov	sp, r7
 8009872:	bd90      	pop	{r4, r7, pc}
 8009874:	0800f5a4 	.word	0x0800f5a4
 8009878:	0800f630 	.word	0x0800f630
 800987c:	0800f608 	.word	0x0800f608

08009880 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b086      	sub	sp, #24
 8009884:	af00      	add	r7, sp, #0
 8009886:	607b      	str	r3, [r7, #4]
 8009888:	4603      	mov	r3, r0
 800988a:	73fb      	strb	r3, [r7, #15]
 800988c:	460b      	mov	r3, r1
 800988e:	81bb      	strh	r3, [r7, #12]
 8009890:	4613      	mov	r3, r2
 8009892:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8009894:	89bb      	ldrh	r3, [r7, #12]
 8009896:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8009898:	89ba      	ldrh	r2, [r7, #12]
 800989a:	897b      	ldrh	r3, [r7, #10]
 800989c:	429a      	cmp	r2, r3
 800989e:	d221      	bcs.n	80098e4 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80098a0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80098a4:	f003 0302 	and.w	r3, r3, #2
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d111      	bne.n	80098d0 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 80098ac:	6a3b      	ldr	r3, [r7, #32]
 80098ae:	7e9b      	ldrb	r3, [r3, #26]
 80098b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d115      	bne.n	80098e4 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 80098b8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d007      	beq.n	80098d0 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 80098c0:	6a3b      	ldr	r3, [r7, #32]
 80098c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
         (!first_seg ||
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d103      	bne.n	80098d0 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 80098c8:	6a3b      	ldr	r3, [r7, #32]
 80098ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
          pcb->unsent != NULL ||
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d009      	beq.n	80098e4 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80098d0:	89bb      	ldrh	r3, [r7, #12]
 80098d2:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 80098d6:	f023 0203 	bic.w	r2, r3, #3
 80098da:	897b      	ldrh	r3, [r7, #10]
 80098dc:	4293      	cmp	r3, r2
 80098de:	bf28      	it	cs
 80098e0:	4613      	movcs	r3, r2
 80098e2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80098e4:	8af9      	ldrh	r1, [r7, #22]
 80098e6:	7bfb      	ldrb	r3, [r7, #15]
 80098e8:	2200      	movs	r2, #0
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7fb faee 	bl	8004ecc <pbuf_alloc>
 80098f0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d101      	bne.n	80098fc <tcp_pbuf_prealloc+0x7c>
    return NULL;
 80098f8:	2300      	movs	r3, #0
 80098fa:	e019      	b.n	8009930 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d006      	beq.n	8009912 <tcp_pbuf_prealloc+0x92>
 8009904:	4b0c      	ldr	r3, [pc, #48]	@ (8009938 <tcp_pbuf_prealloc+0xb8>)
 8009906:	f44f 7288 	mov.w	r2, #272	@ 0x110
 800990a:	490c      	ldr	r1, [pc, #48]	@ (800993c <tcp_pbuf_prealloc+0xbc>)
 800990c:	480c      	ldr	r0, [pc, #48]	@ (8009940 <tcp_pbuf_prealloc+0xc0>)
 800990e:	f003 ff4d 	bl	800d7ac <iprintf>
  *oversize = p->len - length;
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	895a      	ldrh	r2, [r3, #10]
 8009916:	89bb      	ldrh	r3, [r7, #12]
 8009918:	1ad3      	subs	r3, r2, r3
 800991a:	b29a      	uxth	r2, r3
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	89ba      	ldrh	r2, [r7, #12]
 8009924:	811a      	strh	r2, [r3, #8]
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	891a      	ldrh	r2, [r3, #8]
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	815a      	strh	r2, [r3, #10]
  return p;
 800992e:	693b      	ldr	r3, [r7, #16]
}
 8009930:	4618      	mov	r0, r3
 8009932:	3718      	adds	r7, #24
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}
 8009938:	0800f5a4 	.word	0x0800f5a4
 800993c:	0800f648 	.word	0x0800f648
 8009940:	0800f608 	.word	0x0800f608

08009944 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	460b      	mov	r3, r1
 800994e:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	7d1b      	ldrb	r3, [r3, #20]
 8009954:	2b04      	cmp	r3, #4
 8009956:	d00e      	beq.n	8009976 <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800995c:	2b07      	cmp	r3, #7
 800995e:	d00a      	beq.n	8009976 <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8009964:	2b02      	cmp	r3, #2
 8009966:	d006      	beq.n	8009976 <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800996c:	2b03      	cmp	r3, #3
 800996e:	d002      	beq.n	8009976 <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8009970:	f06f 030a 	mvn.w	r3, #10
 8009974:	e04f      	b.n	8009a16 <tcp_write_checks+0xd2>
  } else if (len == 0) {
 8009976:	887b      	ldrh	r3, [r7, #2]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d101      	bne.n	8009980 <tcp_write_checks+0x3c>
    return ERR_OK;
 800997c:	2300      	movs	r3, #0
 800997e:	e04a      	b.n	8009a16 <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009986:	887a      	ldrh	r2, [r7, #2]
 8009988:	429a      	cmp	r2, r3
 800998a:	d909      	bls.n	80099a0 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	7e9b      	ldrb	r3, [r3, #26]
 8009990:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009994:	b2da      	uxtb	r2, r3
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800999a:	f04f 33ff 	mov.w	r3, #4294967295
 800999e:	e03a      	b.n	8009a16 <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80099a6:	2b08      	cmp	r3, #8
 80099a8:	d806      	bhi.n	80099b8 <tcp_write_checks+0x74>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80099b0:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d909      	bls.n	80099cc <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	7e9b      	ldrb	r3, [r3, #26]
 80099bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80099c0:	b2da      	uxtb	r2, r3
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 80099c6:	f04f 33ff 	mov.w	r3, #4294967295
 80099ca:	e024      	b.n	8009a16 <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d00f      	beq.n	80099f6 <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d11a      	bne.n	8009a14 <tcp_write_checks+0xd0>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d116      	bne.n	8009a14 <tcp_write_checks+0xd0>
 80099e6:	4b0e      	ldr	r3, [pc, #56]	@ (8009a20 <tcp_write_checks+0xdc>)
 80099e8:	f240 1255 	movw	r2, #341	@ 0x155
 80099ec:	490d      	ldr	r1, [pc, #52]	@ (8009a24 <tcp_write_checks+0xe0>)
 80099ee:	480e      	ldr	r0, [pc, #56]	@ (8009a28 <tcp_write_checks+0xe4>)
 80099f0:	f003 fedc 	bl	800d7ac <iprintf>
 80099f4:	e00e      	b.n	8009a14 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d103      	bne.n	8009a06 <tcp_write_checks+0xc2>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d006      	beq.n	8009a14 <tcp_write_checks+0xd0>
 8009a06:	4b06      	ldr	r3, [pc, #24]	@ (8009a20 <tcp_write_checks+0xdc>)
 8009a08:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8009a0c:	4907      	ldr	r1, [pc, #28]	@ (8009a2c <tcp_write_checks+0xe8>)
 8009a0e:	4806      	ldr	r0, [pc, #24]	@ (8009a28 <tcp_write_checks+0xe4>)
 8009a10:	f003 fecc 	bl	800d7ac <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8009a14:	2300      	movs	r3, #0
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3708      	adds	r7, #8
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	0800f5a4 	.word	0x0800f5a4
 8009a24:	0800f65c 	.word	0x0800f65c
 8009a28:	0800f608 	.word	0x0800f608
 8009a2c:	0800f698 	.word	0x0800f698

08009a30 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8009a30:	b590      	push	{r4, r7, lr}
 8009a32:	b09b      	sub	sp, #108	@ 0x6c
 8009a34:	af04      	add	r7, sp, #16
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	60b9      	str	r1, [r7, #8]
 8009a3a:	4611      	mov	r1, r2
 8009a3c:	461a      	mov	r2, r3
 8009a3e:	460b      	mov	r3, r1
 8009a40:	80fb      	strh	r3, [r7, #6]
 8009a42:	4613      	mov	r3, r2
 8009a44:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8009a46:	2300      	movs	r3, #0
 8009a48:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	653b      	str	r3, [r7, #80]	@ 0x50
 8009a4e:	2300      	movs	r3, #0
 8009a50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a52:	2300      	movs	r3, #0
 8009a54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a56:	2300      	movs	r3, #0
 8009a58:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 8009a60:	2300      	movs	r3, #0
 8009a62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  u8_t optflags = 0;
 8009a66:	2300      	movs	r3, #0
 8009a68:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8009a70:	2300      	movs	r3, #0
 8009a72:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8009a74:	2300      	movs	r3, #0
 8009a76:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a7e:	085b      	lsrs	r3, r3, #1
 8009a80:	b29a      	uxth	r2, r3
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009a86:	4293      	cmp	r3, r2
 8009a88:	bf28      	it	cs
 8009a8a:	4613      	movcs	r3, r2
 8009a8c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8009a8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d102      	bne.n	8009a9a <tcp_write+0x6a>
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009a98:	e000      	b.n	8009a9c <tcp_write+0x6c>
 8009a9a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009a9c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d109      	bne.n	8009ab8 <tcp_write+0x88>
 8009aa4:	4b92      	ldr	r3, [pc, #584]	@ (8009cf0 <tcp_write+0x2c0>)
 8009aa6:	f240 1291 	movw	r2, #401	@ 0x191
 8009aaa:	4992      	ldr	r1, [pc, #584]	@ (8009cf4 <tcp_write+0x2c4>)
 8009aac:	4892      	ldr	r0, [pc, #584]	@ (8009cf8 <tcp_write+0x2c8>)
 8009aae:	f003 fe7d 	bl	800d7ac <iprintf>
 8009ab2:	f06f 030f 	mvn.w	r3, #15
 8009ab6:	e30a      	b.n	800a0ce <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8009ab8:	88fb      	ldrh	r3, [r7, #6]
 8009aba:	4619      	mov	r1, r3
 8009abc:	68f8      	ldr	r0, [r7, #12]
 8009abe:	f7ff ff41 	bl	8009944 <tcp_write_checks>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8009ac8:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d002      	beq.n	8009ad6 <tcp_write+0xa6>
    return err;
 8009ad0:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8009ad4:	e2fb      	b.n	800a0ce <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009adc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	f000 80f4 	beq.w	8009cd2 <tcp_write+0x2a2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009aee:	653b      	str	r3, [r7, #80]	@ 0x50
 8009af0:	e002      	b.n	8009af8 <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 8009af2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009af8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d1f8      	bne.n	8009af2 <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8009b00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b02:	7a9b      	ldrb	r3, [r3, #10]
 8009b04:	009b      	lsls	r3, r3, #2
 8009b06:	b29b      	uxth	r3, r3
 8009b08:	f003 0304 	and.w	r3, r3, #4
 8009b0c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8009b0e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009b10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b12:	891b      	ldrh	r3, [r3, #8]
 8009b14:	4619      	mov	r1, r3
 8009b16:	8c3b      	ldrh	r3, [r7, #32]
 8009b18:	440b      	add	r3, r1
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	da06      	bge.n	8009b2c <tcp_write+0xfc>
 8009b1e:	4b74      	ldr	r3, [pc, #464]	@ (8009cf0 <tcp_write+0x2c0>)
 8009b20:	f240 12c7 	movw	r2, #455	@ 0x1c7
 8009b24:	4975      	ldr	r1, [pc, #468]	@ (8009cfc <tcp_write+0x2cc>)
 8009b26:	4874      	ldr	r0, [pc, #464]	@ (8009cf8 <tcp_write+0x2c8>)
 8009b28:	f003 fe40 	bl	800d7ac <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8009b2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b2e:	891a      	ldrh	r2, [r3, #8]
 8009b30:	8c3b      	ldrh	r3, [r7, #32]
 8009b32:	4413      	add	r3, r2
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009b38:	1ad3      	subs	r3, r2, r3
 8009b3a:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8009b42:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8009b44:	8a7b      	ldrh	r3, [r7, #18]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d026      	beq.n	8009b98 <tcp_write+0x168>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8009b4a:	8a7b      	ldrh	r3, [r7, #18]
 8009b4c:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d206      	bcs.n	8009b60 <tcp_write+0x130>
 8009b52:	4b67      	ldr	r3, [pc, #412]	@ (8009cf0 <tcp_write+0x2c0>)
 8009b54:	f240 12d9 	movw	r2, #473	@ 0x1d9
 8009b58:	4969      	ldr	r1, [pc, #420]	@ (8009d00 <tcp_write+0x2d0>)
 8009b5a:	4867      	ldr	r0, [pc, #412]	@ (8009cf8 <tcp_write+0x2c8>)
 8009b5c:	f003 fe26 	bl	800d7ac <iprintf>
      seg = last_unsent;
 8009b60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b62:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8009b64:	8a7b      	ldrh	r3, [r7, #18]
 8009b66:	88fa      	ldrh	r2, [r7, #6]
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	bf28      	it	cs
 8009b6c:	4613      	movcs	r3, r2
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009b72:	4293      	cmp	r3, r2
 8009b74:	bf28      	it	cs
 8009b76:	4613      	movcs	r3, r2
 8009b78:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8009b7a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009b7e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009b80:	4413      	add	r3, r2
 8009b82:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8009b86:	8a7a      	ldrh	r2, [r7, #18]
 8009b88:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009b8a:	1ad3      	subs	r3, r2, r3
 8009b8c:	b29b      	uxth	r3, r3
 8009b8e:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8009b90:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009b92:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009b94:	1ad3      	subs	r3, r2, r3
 8009b96:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8009b98:	8a7b      	ldrh	r3, [r7, #18]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d00b      	beq.n	8009bb6 <tcp_write+0x186>
 8009b9e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009ba2:	88fb      	ldrh	r3, [r7, #6]
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d006      	beq.n	8009bb6 <tcp_write+0x186>
 8009ba8:	4b51      	ldr	r3, [pc, #324]	@ (8009cf0 <tcp_write+0x2c0>)
 8009baa:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8009bae:	4955      	ldr	r1, [pc, #340]	@ (8009d04 <tcp_write+0x2d4>)
 8009bb0:	4851      	ldr	r0, [pc, #324]	@ (8009cf8 <tcp_write+0x2c8>)
 8009bb2:	f003 fdfb 	bl	800d7ac <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8009bb6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009bba:	88fb      	ldrh	r3, [r7, #6]
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	f080 8169 	bcs.w	8009e94 <tcp_write+0x464>
 8009bc2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	f000 8165 	beq.w	8009e94 <tcp_write+0x464>
 8009bca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009bcc:	891b      	ldrh	r3, [r3, #8]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	f000 8160 	beq.w	8009e94 <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8009bd4:	88fa      	ldrh	r2, [r7, #6]
 8009bd6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009bda:	1ad2      	subs	r2, r2, r3
 8009bdc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009bde:	4293      	cmp	r3, r2
 8009be0:	bfa8      	it	ge
 8009be2:	4613      	movge	r3, r2
 8009be4:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8009be6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009be8:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8009bea:	797b      	ldrb	r3, [r7, #5]
 8009bec:	f003 0301 	and.w	r3, r3, #1
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d027      	beq.n	8009c44 <tcp_write+0x214>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8009bf4:	f107 0012 	add.w	r0, r7, #18
 8009bf8:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009bfa:	8bf9      	ldrh	r1, [r7, #30]
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	9302      	str	r3, [sp, #8]
 8009c00:	797b      	ldrb	r3, [r7, #5]
 8009c02:	9301      	str	r3, [sp, #4]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	9300      	str	r3, [sp, #0]
 8009c08:	4603      	mov	r3, r0
 8009c0a:	2004      	movs	r0, #4
 8009c0c:	f7ff fe38 	bl	8009880 <tcp_pbuf_prealloc>
 8009c10:	6578      	str	r0, [r7, #84]	@ 0x54
 8009c12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	f000 8228 	beq.w	800a06a <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8009c1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c1c:	6858      	ldr	r0, [r3, #4]
 8009c1e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009c22:	68ba      	ldr	r2, [r7, #8]
 8009c24:	4413      	add	r3, r2
 8009c26:	8bfa      	ldrh	r2, [r7, #30]
 8009c28:	4619      	mov	r1, r3
 8009c2a:	f003 fe9a 	bl	800d962 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8009c2e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8009c30:	f7fb fd58 	bl	80056e4 <pbuf_clen>
 8009c34:	4603      	mov	r3, r0
 8009c36:	461a      	mov	r2, r3
 8009c38:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009c3c:	4413      	add	r3, r2
 8009c3e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8009c42:	e03f      	b.n	8009cc4 <tcp_write+0x294>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8009c44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c4a:	e002      	b.n	8009c52 <tcp_write+0x222>
 8009c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d1f8      	bne.n	8009c4c <tcp_write+0x21c>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8009c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c5c:	7b1b      	ldrb	r3, [r3, #12]
 8009c5e:	2b01      	cmp	r3, #1
 8009c60:	d115      	bne.n	8009c8e <tcp_write+0x25e>
 8009c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c68:	8952      	ldrh	r2, [r2, #10]
 8009c6a:	4413      	add	r3, r2
 8009c6c:	68ba      	ldr	r2, [r7, #8]
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d10d      	bne.n	8009c8e <tcp_write+0x25e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8009c72:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d006      	beq.n	8009c88 <tcp_write+0x258>
 8009c7a:	4b1d      	ldr	r3, [pc, #116]	@ (8009cf0 <tcp_write+0x2c0>)
 8009c7c:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 8009c80:	4921      	ldr	r1, [pc, #132]	@ (8009d08 <tcp_write+0x2d8>)
 8009c82:	481d      	ldr	r0, [pc, #116]	@ (8009cf8 <tcp_write+0x2c8>)
 8009c84:	f003 fd92 	bl	800d7ac <iprintf>
          extendlen = seglen;
 8009c88:	8bfb      	ldrh	r3, [r7, #30]
 8009c8a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8009c8c:	e01a      	b.n	8009cc4 <tcp_write+0x294>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8009c8e:	8bfb      	ldrh	r3, [r7, #30]
 8009c90:	2201      	movs	r2, #1
 8009c92:	4619      	mov	r1, r3
 8009c94:	2004      	movs	r0, #4
 8009c96:	f7fb f919 	bl	8004ecc <pbuf_alloc>
 8009c9a:	6578      	str	r0, [r7, #84]	@ 0x54
 8009c9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	f000 81e5 	beq.w	800a06e <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 8009ca4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009ca8:	68ba      	ldr	r2, [r7, #8]
 8009caa:	441a      	add	r2, r3
 8009cac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009cae:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8009cb0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8009cb2:	f7fb fd17 	bl	80056e4 <pbuf_clen>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	461a      	mov	r2, r3
 8009cba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009cbe:	4413      	add	r3, r2
 8009cc0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8009cc4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009cc8:	8bfb      	ldrh	r3, [r7, #30]
 8009cca:	4413      	add	r3, r2
 8009ccc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8009cd0:	e0e0      	b.n	8009e94 <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	f000 80db 	beq.w	8009e94 <tcp_write+0x464>
 8009cde:	4b04      	ldr	r3, [pc, #16]	@ (8009cf0 <tcp_write+0x2c0>)
 8009ce0:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8009ce4:	4909      	ldr	r1, [pc, #36]	@ (8009d0c <tcp_write+0x2dc>)
 8009ce6:	4804      	ldr	r0, [pc, #16]	@ (8009cf8 <tcp_write+0x2c8>)
 8009ce8:	f003 fd60 	bl	800d7ac <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8009cec:	e0d2      	b.n	8009e94 <tcp_write+0x464>
 8009cee:	bf00      	nop
 8009cf0:	0800f5a4 	.word	0x0800f5a4
 8009cf4:	0800f6cc 	.word	0x0800f6cc
 8009cf8:	0800f608 	.word	0x0800f608
 8009cfc:	0800f700 	.word	0x0800f700
 8009d00:	0800f718 	.word	0x0800f718
 8009d04:	0800f738 	.word	0x0800f738
 8009d08:	0800f758 	.word	0x0800f758
 8009d0c:	0800f784 	.word	0x0800f784
    struct pbuf *p;
    u16_t left = len - pos;
 8009d10:	88fa      	ldrh	r2, [r7, #6]
 8009d12:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009d16:	1ad3      	subs	r3, r2, r3
 8009d18:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8009d1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009d22:	1ad3      	subs	r3, r2, r3
 8009d24:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8009d26:	8b7a      	ldrh	r2, [r7, #26]
 8009d28:	8bbb      	ldrh	r3, [r7, #28]
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	bf28      	it	cs
 8009d2e:	4613      	movcs	r3, r2
 8009d30:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8009d32:	797b      	ldrb	r3, [r7, #5]
 8009d34:	f003 0301 	and.w	r3, r3, #1
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d036      	beq.n	8009daa <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8009d3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d40:	b29a      	uxth	r2, r3
 8009d42:	8b3b      	ldrh	r3, [r7, #24]
 8009d44:	4413      	add	r3, r2
 8009d46:	b299      	uxth	r1, r3
 8009d48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	bf0c      	ite	eq
 8009d4e:	2301      	moveq	r3, #1
 8009d50:	2300      	movne	r3, #0
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	f107 0012 	add.w	r0, r7, #18
 8009d58:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009d5a:	9302      	str	r3, [sp, #8]
 8009d5c:	797b      	ldrb	r3, [r7, #5]
 8009d5e:	9301      	str	r3, [sp, #4]
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	9300      	str	r3, [sp, #0]
 8009d64:	4603      	mov	r3, r0
 8009d66:	2000      	movs	r0, #0
 8009d68:	f7ff fd8a 	bl	8009880 <tcp_pbuf_prealloc>
 8009d6c:	6338      	str	r0, [r7, #48]	@ 0x30
 8009d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	f000 817e 	beq.w	800a072 <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8009d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d78:	895b      	ldrh	r3, [r3, #10]
 8009d7a:	8b3a      	ldrh	r2, [r7, #24]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d906      	bls.n	8009d8e <tcp_write+0x35e>
 8009d80:	4b8f      	ldr	r3, [pc, #572]	@ (8009fc0 <tcp_write+0x590>)
 8009d82:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8009d86:	498f      	ldr	r1, [pc, #572]	@ (8009fc4 <tcp_write+0x594>)
 8009d88:	488f      	ldr	r0, [pc, #572]	@ (8009fc8 <tcp_write+0x598>)
 8009d8a:	f003 fd0f 	bl	800d7ac <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 8009d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d90:	685a      	ldr	r2, [r3, #4]
 8009d92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d96:	18d0      	adds	r0, r2, r3
 8009d98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009d9c:	68ba      	ldr	r2, [r7, #8]
 8009d9e:	4413      	add	r3, r2
 8009da0:	8b3a      	ldrh	r2, [r7, #24]
 8009da2:	4619      	mov	r1, r3
 8009da4:	f003 fddd 	bl	800d962 <memcpy>
 8009da8:	e02e      	b.n	8009e08 <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8009daa:	8a7b      	ldrh	r3, [r7, #18]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d006      	beq.n	8009dbe <tcp_write+0x38e>
 8009db0:	4b83      	ldr	r3, [pc, #524]	@ (8009fc0 <tcp_write+0x590>)
 8009db2:	f240 224b 	movw	r2, #587	@ 0x24b
 8009db6:	4985      	ldr	r1, [pc, #532]	@ (8009fcc <tcp_write+0x59c>)
 8009db8:	4883      	ldr	r0, [pc, #524]	@ (8009fc8 <tcp_write+0x598>)
 8009dba:	f003 fcf7 	bl	800d7ac <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8009dbe:	8b3b      	ldrh	r3, [r7, #24]
 8009dc0:	2201      	movs	r2, #1
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	2000      	movs	r0, #0
 8009dc6:	f7fb f881 	bl	8004ecc <pbuf_alloc>
 8009dca:	6178      	str	r0, [r7, #20]
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	f000 8151 	beq.w	800a076 <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 8009dd4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009dd8:	68ba      	ldr	r2, [r7, #8]
 8009dda:	441a      	add	r2, r3
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009de0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	2200      	movs	r2, #0
 8009de8:	4619      	mov	r1, r3
 8009dea:	2000      	movs	r0, #0
 8009dec:	f7fb f86e 	bl	8004ecc <pbuf_alloc>
 8009df0:	6338      	str	r0, [r7, #48]	@ 0x30
 8009df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d103      	bne.n	8009e00 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8009df8:	6978      	ldr	r0, [r7, #20]
 8009dfa:	f7fb fbdf 	bl	80055bc <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8009dfe:	e13d      	b.n	800a07c <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8009e00:	6979      	ldr	r1, [r7, #20]
 8009e02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009e04:	f7fb fca6 	bl	8005754 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8009e08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009e0a:	f7fb fc6b 	bl	80056e4 <pbuf_clen>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	461a      	mov	r2, r3
 8009e12:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009e16:	4413      	add	r3, r2
 8009e18:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8009e1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009e20:	2b09      	cmp	r3, #9
 8009e22:	d805      	bhi.n	8009e30 <tcp_write+0x400>
 8009e24:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009e28:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d903      	bls.n	8009e38 <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8009e30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009e32:	f7fb fbc3 	bl	80055bc <pbuf_free>
      goto memerr;
 8009e36:	e121      	b.n	800a07c <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009e3c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009e40:	441a      	add	r2, r3
 8009e42:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009e46:	9300      	str	r3, [sp, #0]
 8009e48:	4613      	mov	r3, r2
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009e4e:	68f8      	ldr	r0, [r7, #12]
 8009e50:	f7ff fc90 	bl	8009774 <tcp_create_segment>
 8009e54:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8009e56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	f000 810e 	beq.w	800a07a <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8009e5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d102      	bne.n	8009e6a <tcp_write+0x43a>
      queue = seg;
 8009e64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e66:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e68:	e00c      	b.n	8009e84 <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8009e6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d106      	bne.n	8009e7e <tcp_write+0x44e>
 8009e70:	4b53      	ldr	r3, [pc, #332]	@ (8009fc0 <tcp_write+0x590>)
 8009e72:	f240 2285 	movw	r2, #645	@ 0x285
 8009e76:	4956      	ldr	r1, [pc, #344]	@ (8009fd0 <tcp_write+0x5a0>)
 8009e78:	4853      	ldr	r0, [pc, #332]	@ (8009fc8 <tcp_write+0x598>)
 8009e7a:	f003 fc97 	bl	800d7ac <iprintf>
      prev_seg->next = seg;
 8009e7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009e82:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8009e84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e86:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8009e88:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009e8c:	8b3b      	ldrh	r3, [r7, #24]
 8009e8e:	4413      	add	r3, r2
 8009e90:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8009e94:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009e98:	88fb      	ldrh	r3, [r7, #6]
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	f4ff af38 	bcc.w	8009d10 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8009ea0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d02c      	beq.n	8009f00 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8009ea6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009eac:	e01e      	b.n	8009eec <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 8009eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eb0:	891a      	ldrh	r2, [r3, #8]
 8009eb2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009eb4:	4413      	add	r3, r2
 8009eb6:	b29a      	uxth	r2, r3
 8009eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eba:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8009ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d110      	bne.n	8009ee6 <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8009ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009eca:	8952      	ldrh	r2, [r2, #10]
 8009ecc:	4413      	add	r3, r2
 8009ece:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8009ed0:	68b9      	ldr	r1, [r7, #8]
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f003 fd45 	bl	800d962 <memcpy>
        p->len += oversize_used;
 8009ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eda:	895a      	ldrh	r2, [r3, #10]
 8009edc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009ede:	4413      	add	r3, r2
 8009ee0:	b29a      	uxth	r2, r3
 8009ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ee4:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8009ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d1dd      	bne.n	8009eae <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 8009ef2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ef4:	891a      	ldrh	r2, [r3, #8]
 8009ef6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009ef8:	4413      	add	r3, r2
 8009efa:	b29a      	uxth	r2, r3
 8009efc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009efe:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8009f00:	8a7a      	ldrh	r2, [r7, #18]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8009f08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d018      	beq.n	8009f40 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8009f0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d106      	bne.n	8009f22 <tcp_write+0x4f2>
 8009f14:	4b2a      	ldr	r3, [pc, #168]	@ (8009fc0 <tcp_write+0x590>)
 8009f16:	f240 22ba 	movw	r2, #698	@ 0x2ba
 8009f1a:	492e      	ldr	r1, [pc, #184]	@ (8009fd4 <tcp_write+0x5a4>)
 8009f1c:	482a      	ldr	r0, [pc, #168]	@ (8009fc8 <tcp_write+0x598>)
 8009f1e:	f003 fc45 	bl	800d7ac <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8009f22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f7fb fc13 	bl	8005754 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8009f2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f30:	891a      	ldrh	r2, [r3, #8]
 8009f32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f34:	891b      	ldrh	r3, [r3, #8]
 8009f36:	4413      	add	r3, r2
 8009f38:	b29a      	uxth	r2, r3
 8009f3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f3c:	811a      	strh	r2, [r3, #8]
 8009f3e:	e037      	b.n	8009fb0 <tcp_write+0x580>
  } else if (extendlen > 0) {
 8009f40:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d034      	beq.n	8009fb0 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8009f46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d003      	beq.n	8009f54 <tcp_write+0x524>
 8009f4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d106      	bne.n	8009f62 <tcp_write+0x532>
 8009f54:	4b1a      	ldr	r3, [pc, #104]	@ (8009fc0 <tcp_write+0x590>)
 8009f56:	f44f 7230 	mov.w	r2, #704	@ 0x2c0
 8009f5a:	491f      	ldr	r1, [pc, #124]	@ (8009fd8 <tcp_write+0x5a8>)
 8009f5c:	481a      	ldr	r0, [pc, #104]	@ (8009fc8 <tcp_write+0x598>)
 8009f5e:	f003 fc25 	bl	800d7ac <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8009f62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009f68:	e009      	b.n	8009f7e <tcp_write+0x54e>
      p->tot_len += extendlen;
 8009f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f6c:	891a      	ldrh	r2, [r3, #8]
 8009f6e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8009f70:	4413      	add	r3, r2
 8009f72:	b29a      	uxth	r2, r3
 8009f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f76:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8009f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d1f1      	bne.n	8009f6a <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 8009f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f88:	891a      	ldrh	r2, [r3, #8]
 8009f8a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8009f8c:	4413      	add	r3, r2
 8009f8e:	b29a      	uxth	r2, r3
 8009f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f92:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8009f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f96:	895a      	ldrh	r2, [r3, #10]
 8009f98:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8009f9a:	4413      	add	r3, r2
 8009f9c:	b29a      	uxth	r2, r3
 8009f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fa0:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8009fa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fa4:	891a      	ldrh	r2, [r3, #8]
 8009fa6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8009fa8:	4413      	add	r3, r2
 8009faa:	b29a      	uxth	r2, r3
 8009fac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fae:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8009fb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d112      	bne.n	8009fdc <tcp_write+0x5ac>
    pcb->unsent = queue;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009fba:	669a      	str	r2, [r3, #104]	@ 0x68
 8009fbc:	e011      	b.n	8009fe2 <tcp_write+0x5b2>
 8009fbe:	bf00      	nop
 8009fc0:	0800f5a4 	.word	0x0800f5a4
 8009fc4:	0800f7b4 	.word	0x0800f7b4
 8009fc8:	0800f608 	.word	0x0800f608
 8009fcc:	0800f7f4 	.word	0x0800f7f4
 8009fd0:	0800f804 	.word	0x0800f804
 8009fd4:	0800f818 	.word	0x0800f818
 8009fd8:	0800f850 	.word	0x0800f850
  } else {
    last_unsent->next = queue;
 8009fdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009fe0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009fe6:	88fb      	ldrh	r3, [r7, #6]
 8009fe8:	441a      	add	r2, r3
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_buf -= len;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8009ff4:	88fb      	ldrh	r3, [r7, #6]
 8009ff6:	1ad3      	subs	r3, r2, r3
 8009ff8:	b29a      	uxth	r2, r3
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  pcb->snd_queuelen = queuelen;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800a006:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a010:	2b00      	cmp	r3, #0
 800a012:	d00e      	beq.n	800a032 <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d10a      	bne.n	800a032 <tcp_write+0x602>
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a020:	2b00      	cmp	r3, #0
 800a022:	d106      	bne.n	800a032 <tcp_write+0x602>
 800a024:	4b2c      	ldr	r3, [pc, #176]	@ (800a0d8 <tcp_write+0x6a8>)
 800a026:	f44f 723b 	mov.w	r2, #748	@ 0x2ec
 800a02a:	492c      	ldr	r1, [pc, #176]	@ (800a0dc <tcp_write+0x6ac>)
 800a02c:	482c      	ldr	r0, [pc, #176]	@ (800a0e0 <tcp_write+0x6b0>)
 800a02e:	f003 fbbd 	bl	800d7ac <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 800a032:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a034:	2b00      	cmp	r3, #0
 800a036:	d016      	beq.n	800a066 <tcp_write+0x636>
 800a038:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a03a:	68db      	ldr	r3, [r3, #12]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d012      	beq.n	800a066 <tcp_write+0x636>
 800a040:	797b      	ldrb	r3, [r7, #5]
 800a042:	f003 0302 	and.w	r3, r3, #2
 800a046:	2b00      	cmp	r3, #0
 800a048:	d10d      	bne.n	800a066 <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800a04a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a04c:	68db      	ldr	r3, [r3, #12]
 800a04e:	899b      	ldrh	r3, [r3, #12]
 800a050:	b29c      	uxth	r4, r3
 800a052:	2008      	movs	r0, #8
 800a054:	f7fa f9a1 	bl	800439a <lwip_htons>
 800a058:	4603      	mov	r3, r0
 800a05a:	461a      	mov	r2, r3
 800a05c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a05e:	68db      	ldr	r3, [r3, #12]
 800a060:	4322      	orrs	r2, r4
 800a062:	b292      	uxth	r2, r2
 800a064:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800a066:	2300      	movs	r3, #0
 800a068:	e031      	b.n	800a0ce <tcp_write+0x69e>
          goto memerr;
 800a06a:	bf00      	nop
 800a06c:	e006      	b.n	800a07c <tcp_write+0x64c>
            goto memerr;
 800a06e:	bf00      	nop
 800a070:	e004      	b.n	800a07c <tcp_write+0x64c>
        goto memerr;
 800a072:	bf00      	nop
 800a074:	e002      	b.n	800a07c <tcp_write+0x64c>
        goto memerr;
 800a076:	bf00      	nop
 800a078:	e000      	b.n	800a07c <tcp_write+0x64c>
      goto memerr;
 800a07a:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	7e9b      	ldrb	r3, [r3, #26]
 800a080:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a084:	b2da      	uxtb	r2, r3
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800a08a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d002      	beq.n	800a096 <tcp_write+0x666>
    pbuf_free(concat_p);
 800a090:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800a092:	f7fb fa93 	bl	80055bc <pbuf_free>
  }
  if (queue != NULL) {
 800a096:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d002      	beq.n	800a0a2 <tcp_write+0x672>
    tcp_segs_free(queue);
 800a09c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800a09e:	f7fc fd58 	bl	8006b52 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d00e      	beq.n	800a0ca <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d10a      	bne.n	800a0ca <tcp_write+0x69a>
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d106      	bne.n	800a0ca <tcp_write+0x69a>
 800a0bc:	4b06      	ldr	r3, [pc, #24]	@ (800a0d8 <tcp_write+0x6a8>)
 800a0be:	f240 3201 	movw	r2, #769	@ 0x301
 800a0c2:	4906      	ldr	r1, [pc, #24]	@ (800a0dc <tcp_write+0x6ac>)
 800a0c4:	4806      	ldr	r0, [pc, #24]	@ (800a0e0 <tcp_write+0x6b0>)
 800a0c6:	f003 fb71 	bl	800d7ac <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800a0ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	375c      	adds	r7, #92	@ 0x5c
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd90      	pop	{r4, r7, pc}
 800a0d6:	bf00      	nop
 800a0d8:	0800f5a4 	.word	0x0800f5a4
 800a0dc:	0800f888 	.word	0x0800f888
 800a0e0:	0800f608 	.word	0x0800f608

0800a0e4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b08a      	sub	sp, #40	@ 0x28
 800a0e8:	af02      	add	r7, sp, #8
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a0f8:	78fb      	ldrb	r3, [r7, #3]
 800a0fa:	f003 0303 	and.w	r3, r3, #3
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d106      	bne.n	800a110 <tcp_enqueue_flags+0x2c>
 800a102:	4b6f      	ldr	r3, [pc, #444]	@ (800a2c0 <tcp_enqueue_flags+0x1dc>)
 800a104:	f240 321a 	movw	r2, #794	@ 0x31a
 800a108:	496e      	ldr	r1, [pc, #440]	@ (800a2c4 <tcp_enqueue_flags+0x1e0>)
 800a10a:	486f      	ldr	r0, [pc, #444]	@ (800a2c8 <tcp_enqueue_flags+0x1e4>)
 800a10c:	f003 fb4e 	bl	800d7ac <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a116:	2b08      	cmp	r3, #8
 800a118:	d806      	bhi.n	800a128 <tcp_enqueue_flags+0x44>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a120:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 800a124:	4293      	cmp	r3, r2
 800a126:	d90e      	bls.n	800a146 <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 800a128:	78fb      	ldrb	r3, [r7, #3]
 800a12a:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d109      	bne.n	800a146 <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	7e9b      	ldrb	r3, [r3, #26]
 800a136:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a13a:	b2da      	uxtb	r2, r3
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800a140:	f04f 33ff 	mov.w	r3, #4294967295
 800a144:	e0b7      	b.n	800a2b6 <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 800a146:	78fb      	ldrb	r3, [r7, #3]
 800a148:	f003 0302 	and.w	r3, r3, #2
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d001      	beq.n	800a154 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 800a150:	2301      	movs	r3, #1
 800a152:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a154:	7ffb      	ldrb	r3, [r7, #31]
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	f003 0304 	and.w	r3, r3, #4
 800a15e:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a160:	7dfb      	ldrb	r3, [r7, #23]
 800a162:	b29b      	uxth	r3, r3
 800a164:	2200      	movs	r2, #0
 800a166:	4619      	mov	r1, r3
 800a168:	2000      	movs	r0, #0
 800a16a:	f7fa feaf 	bl	8004ecc <pbuf_alloc>
 800a16e:	6138      	str	r0, [r7, #16]
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d109      	bne.n	800a18a <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	7e9b      	ldrb	r3, [r3, #26]
 800a17a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a17e:	b2da      	uxtb	r2, r3
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a184:	f04f 33ff 	mov.w	r3, #4294967295
 800a188:	e095      	b.n	800a2b6 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	895a      	ldrh	r2, [r3, #10]
 800a18e:	7dfb      	ldrb	r3, [r7, #23]
 800a190:	b29b      	uxth	r3, r3
 800a192:	429a      	cmp	r2, r3
 800a194:	d206      	bcs.n	800a1a4 <tcp_enqueue_flags+0xc0>
 800a196:	4b4a      	ldr	r3, [pc, #296]	@ (800a2c0 <tcp_enqueue_flags+0x1dc>)
 800a198:	f44f 7250 	mov.w	r2, #832	@ 0x340
 800a19c:	494b      	ldr	r1, [pc, #300]	@ (800a2cc <tcp_enqueue_flags+0x1e8>)
 800a19e:	484a      	ldr	r0, [pc, #296]	@ (800a2c8 <tcp_enqueue_flags+0x1e4>)
 800a1a0:	f003 fb04 	bl	800d7ac <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800a1a8:	78fa      	ldrb	r2, [r7, #3]
 800a1aa:	7ffb      	ldrb	r3, [r7, #31]
 800a1ac:	9300      	str	r3, [sp, #0]
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	6939      	ldr	r1, [r7, #16]
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f7ff fade 	bl	8009774 <tcp_create_segment>
 800a1b8:	60f8      	str	r0, [r7, #12]
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d109      	bne.n	800a1d4 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	7e9b      	ldrb	r3, [r3, #26]
 800a1c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a1c8:	b2da      	uxtb	r2, r3
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a1ce:	f04f 33ff 	mov.w	r3, #4294967295
 800a1d2:	e070      	b.n	800a2b6 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	68db      	ldr	r3, [r3, #12]
 800a1d8:	f003 0303 	and.w	r3, r3, #3
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d006      	beq.n	800a1ee <tcp_enqueue_flags+0x10a>
 800a1e0:	4b37      	ldr	r3, [pc, #220]	@ (800a2c0 <tcp_enqueue_flags+0x1dc>)
 800a1e2:	f240 3249 	movw	r2, #841	@ 0x349
 800a1e6:	493a      	ldr	r1, [pc, #232]	@ (800a2d0 <tcp_enqueue_flags+0x1ec>)
 800a1e8:	4837      	ldr	r0, [pc, #220]	@ (800a2c8 <tcp_enqueue_flags+0x1e4>)
 800a1ea:	f003 fadf 	bl	800d7ac <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	891b      	ldrh	r3, [r3, #8]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d006      	beq.n	800a204 <tcp_enqueue_flags+0x120>
 800a1f6:	4b32      	ldr	r3, [pc, #200]	@ (800a2c0 <tcp_enqueue_flags+0x1dc>)
 800a1f8:	f240 324a 	movw	r2, #842	@ 0x34a
 800a1fc:	4935      	ldr	r1, [pc, #212]	@ (800a2d4 <tcp_enqueue_flags+0x1f0>)
 800a1fe:	4832      	ldr	r0, [pc, #200]	@ (800a2c8 <tcp_enqueue_flags+0x1e4>)
 800a200:	f003 fad4 	bl	800d7ac <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d103      	bne.n	800a214 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	68fa      	ldr	r2, [r7, #12]
 800a210:	669a      	str	r2, [r3, #104]	@ 0x68
 800a212:	e00d      	b.n	800a230 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a218:	61bb      	str	r3, [r7, #24]
 800a21a:	e002      	b.n	800a222 <tcp_enqueue_flags+0x13e>
 800a21c:	69bb      	ldr	r3, [r7, #24]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	61bb      	str	r3, [r7, #24]
 800a222:	69bb      	ldr	r3, [r7, #24]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d1f8      	bne.n	800a21c <tcp_enqueue_flags+0x138>
    useg->next = seg;
 800a22a:	69bb      	ldr	r3, [r7, #24]
 800a22c:	68fa      	ldr	r2, [r7, #12]
 800a22e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2200      	movs	r2, #0
 800a234:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800a238:	78fb      	ldrb	r3, [r7, #3]
 800a23a:	f003 0302 	and.w	r3, r3, #2
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d104      	bne.n	800a24c <tcp_enqueue_flags+0x168>
 800a242:	78fb      	ldrb	r3, [r7, #3]
 800a244:	f003 0301 	and.w	r3, r3, #1
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d004      	beq.n	800a256 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a250:	1c5a      	adds	r2, r3, #1
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	659a      	str	r2, [r3, #88]	@ 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800a256:	78fb      	ldrb	r3, [r7, #3]
 800a258:	f003 0301 	and.w	r3, r3, #1
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d006      	beq.n	800a26e <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	7e9b      	ldrb	r3, [r3, #26]
 800a264:	f043 0320 	orr.w	r3, r3, #32
 800a268:	b2da      	uxtb	r2, r3
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	685b      	ldr	r3, [r3, #4]
 800a272:	4618      	mov	r0, r3
 800a274:	f7fb fa36 	bl	80056e4 <pbuf_clen>
 800a278:	4603      	mov	r3, r0
 800a27a:	461a      	mov	r2, r3
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a282:	4413      	add	r3, r2
 800a284:	b29a      	uxth	r2, r3
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a292:	2b00      	cmp	r3, #0
 800a294:	d00e      	beq.n	800a2b4 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d10a      	bne.n	800a2b4 <tcp_enqueue_flags+0x1d0>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d106      	bne.n	800a2b4 <tcp_enqueue_flags+0x1d0>
 800a2a6:	4b06      	ldr	r3, [pc, #24]	@ (800a2c0 <tcp_enqueue_flags+0x1dc>)
 800a2a8:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800a2ac:	490a      	ldr	r1, [pc, #40]	@ (800a2d8 <tcp_enqueue_flags+0x1f4>)
 800a2ae:	4806      	ldr	r0, [pc, #24]	@ (800a2c8 <tcp_enqueue_flags+0x1e4>)
 800a2b0:	f003 fa7c 	bl	800d7ac <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800a2b4:	2300      	movs	r3, #0
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3720      	adds	r7, #32
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	0800f5a4 	.word	0x0800f5a4
 800a2c4:	0800f8a8 	.word	0x0800f8a8
 800a2c8:	0800f608 	.word	0x0800f608
 800a2cc:	0800f900 	.word	0x0800f900
 800a2d0:	0800f93c 	.word	0x0800f93c
 800a2d4:	0800f954 	.word	0x0800f954
 800a2d8:	0800f980 	.word	0x0800f980

0800a2dc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800a2dc:	b590      	push	{r4, r7, lr}
 800a2de:	b08b      	sub	sp, #44	@ 0x2c
 800a2e0:	af04      	add	r7, sp, #16
 800a2e2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800a2e8:	7dbb      	ldrb	r3, [r7, #22]
 800a2ea:	b29c      	uxth	r4, r3
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f7fa f85f 	bl	80043b4 <lwip_htonl>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	4621      	mov	r1, r4
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f7ff f97f 	bl	8009600 <tcp_output_alloc_header>
 800a302:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d109      	bne.n	800a31e <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	7e9b      	ldrb	r3, [r3, #26]
 800a30e:	f043 0303 	orr.w	r3, r3, #3
 800a312:	b2da      	uxtb	r2, r3
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800a318:	f06f 0301 	mvn.w	r3, #1
 800a31c:	e036      	b.n	800a38c <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	3304      	adds	r3, #4
 800a322:	4618      	mov	r0, r3
 800a324:	f002 f81c 	bl	800c360 <ip4_route>
 800a328:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d102      	bne.n	800a336 <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 800a330:	23fc      	movs	r3, #252	@ 0xfc
 800a332:	75fb      	strb	r3, [r7, #23]
 800a334:	e012      	b.n	800a35c <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800a336:	6879      	ldr	r1, [r7, #4]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	1d18      	adds	r0, r3, #4
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	7a9c      	ldrb	r4, [r3, #10]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	7a5b      	ldrb	r3, [r3, #9]
 800a344:	68fa      	ldr	r2, [r7, #12]
 800a346:	9202      	str	r2, [sp, #8]
 800a348:	2206      	movs	r2, #6
 800a34a:	9201      	str	r2, [sp, #4]
 800a34c:	9300      	str	r3, [sp, #0]
 800a34e:	4623      	mov	r3, r4
 800a350:	4602      	mov	r2, r0
 800a352:	6938      	ldr	r0, [r7, #16]
 800a354:	f002 f9ac 	bl	800c6b0 <ip4_output_if>
 800a358:	4603      	mov	r3, r0
 800a35a:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800a35c:	6938      	ldr	r0, [r7, #16]
 800a35e:	f7fb f92d 	bl	80055bc <pbuf_free>

  if (err != ERR_OK) {
 800a362:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d007      	beq.n	800a37a <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	7e9b      	ldrb	r3, [r3, #26]
 800a36e:	f043 0303 	orr.w	r3, r3, #3
 800a372:	b2da      	uxtb	r2, r3
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	769a      	strb	r2, [r3, #26]
 800a378:	e006      	b.n	800a388 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	7e9b      	ldrb	r3, [r3, #26]
 800a37e:	f023 0303 	bic.w	r3, r3, #3
 800a382:	b2da      	uxtb	r2, r3
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	769a      	strb	r2, [r3, #26]
  }

  return err;
 800a388:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	371c      	adds	r7, #28
 800a390:	46bd      	mov	sp, r7
 800a392:	bd90      	pop	{r4, r7, pc}

0800a394 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800a394:	b5b0      	push	{r4, r5, r7, lr}
 800a396:	b08a      	sub	sp, #40	@ 0x28
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	7d1b      	ldrb	r3, [r3, #20]
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d106      	bne.n	800a3b2 <tcp_output+0x1e>
 800a3a4:	4b99      	ldr	r3, [pc, #612]	@ (800a60c <tcp_output+0x278>)
 800a3a6:	f44f 727b 	mov.w	r2, #1004	@ 0x3ec
 800a3aa:	4999      	ldr	r1, [pc, #612]	@ (800a610 <tcp_output+0x27c>)
 800a3ac:	4899      	ldr	r0, [pc, #612]	@ (800a614 <tcp_output+0x280>)
 800a3ae:	f003 f9fd 	bl	800d7ac <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800a3b2:	4b99      	ldr	r3, [pc, #612]	@ (800a618 <tcp_output+0x284>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	687a      	ldr	r2, [r7, #4]
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d101      	bne.n	800a3c0 <tcp_output+0x2c>
    return ERR_OK;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	e1cb      	b.n	800a758 <tcp_output+0x3c4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	bf28      	it	cs
 800a3d0:	4613      	movcs	r3, r2
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a3da:	627b      	str	r3, [r7, #36]	@ 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	7e9b      	ldrb	r3, [r3, #26]
 800a3e0:	f003 0302 	and.w	r3, r3, #2
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d017      	beq.n	800a418 <tcp_output+0x84>
 800a3e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d00f      	beq.n	800a40e <tcp_output+0x7a>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800a3ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f0:	68db      	ldr	r3, [r3, #12]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f7f9 ffdd 	bl	80043b4 <lwip_htonl>
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a400:	1ad3      	subs	r3, r2, r3
 800a402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a404:	8912      	ldrh	r2, [r2, #8]
 800a406:	4413      	add	r3, r2
     (seg == NULL ||
 800a408:	69ba      	ldr	r2, [r7, #24]
 800a40a:	429a      	cmp	r2, r3
 800a40c:	d204      	bcs.n	800a418 <tcp_output+0x84>
     return tcp_send_empty_ack(pcb);
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f7ff ff64 	bl	800a2dc <tcp_send_empty_ack>
 800a414:	4603      	mov	r3, r0
 800a416:	e19f      	b.n	800a758 <tcp_output+0x3c4>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a41c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800a41e:	6a3b      	ldr	r3, [r7, #32]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d007      	beq.n	800a434 <tcp_output+0xa0>
    for (; useg->next != NULL; useg = useg->next);
 800a424:	e002      	b.n	800a42c <tcp_output+0x98>
 800a426:	6a3b      	ldr	r3, [r7, #32]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	623b      	str	r3, [r7, #32]
 800a42c:	6a3b      	ldr	r3, [r7, #32]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d1f8      	bne.n	800a426 <tcp_output+0x92>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	3304      	adds	r3, #4
 800a438:	4618      	mov	r0, r3
 800a43a:	f001 ff91 	bl	800c360 <ip4_route>
 800a43e:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d102      	bne.n	800a44c <tcp_output+0xb8>
    return ERR_RTE;
 800a446:	f06f 0303 	mvn.w	r3, #3
 800a44a:	e185      	b.n	800a758 <tcp_output+0x3c4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d003      	beq.n	800a45a <tcp_output+0xc6>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d111      	bne.n	800a47e <tcp_output+0xea>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d002      	beq.n	800a466 <tcp_output+0xd2>
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	3304      	adds	r3, #4
 800a464:	e000      	b.n	800a468 <tcp_output+0xd4>
 800a466:	2300      	movs	r3, #0
 800a468:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d102      	bne.n	800a476 <tcp_output+0xe2>
      return ERR_RTE;
 800a470:	f06f 0303 	mvn.w	r3, #3
 800a474:	e170      	b.n	800a758 <tcp_output+0x3c4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 800a47e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a480:	2b00      	cmp	r3, #0
 800a482:	f000 813f 	beq.w	800a704 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800a486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a488:	68db      	ldr	r3, [r3, #12]
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	4618      	mov	r0, r3
 800a48e:	f7f9 ff91 	bl	80043b4 <lwip_htonl>
 800a492:	4602      	mov	r2, r0
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a498:	1ad3      	subs	r3, r2, r3
 800a49a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a49c:	8912      	ldrh	r2, [r2, #8]
 800a49e:	4413      	add	r3, r2
  if (seg != NULL &&
 800a4a0:	69ba      	ldr	r2, [r7, #24]
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	f080 812e 	bcs.w	800a704 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800a4a8:	69bb      	ldr	r3, [r7, #24]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	f000 812a 	beq.w	800a704 <tcp_output+0x370>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	69bb      	ldr	r3, [r7, #24]
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	f040 8122 	bne.w	800a704 <tcp_output+0x370>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	f040 811d 	bne.w	800a704 <tcp_output+0x370>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	f040 812c 	bne.w	800a72e <tcp_output+0x39a>
      pcb->persist_cnt = 0;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
      pcb->persist_backoff = 1;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
    }
    goto output_done;
 800a4e6:	e122      	b.n	800a72e <tcp_output+0x39a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800a4e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ea:	68db      	ldr	r3, [r3, #12]
 800a4ec:	899b      	ldrh	r3, [r3, #12]
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f7f9 ff52 	bl	800439a <lwip_htons>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	f003 0304 	and.w	r3, r3, #4
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d006      	beq.n	800a50e <tcp_output+0x17a>
 800a500:	4b42      	ldr	r3, [pc, #264]	@ (800a60c <tcp_output+0x278>)
 800a502:	f240 4245 	movw	r2, #1093	@ 0x445
 800a506:	4945      	ldr	r1, [pc, #276]	@ (800a61c <tcp_output+0x288>)
 800a508:	4842      	ldr	r0, [pc, #264]	@ (800a614 <tcp_output+0x280>)
 800a50a:	f003 f94f 	bl	800d7ac <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a512:	2b00      	cmp	r3, #0
 800a514:	d01f      	beq.n	800a556 <tcp_output+0x1c2>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	7e9b      	ldrb	r3, [r3, #26]
 800a51a:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d119      	bne.n	800a556 <tcp_output+0x1c2>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a526:	2b00      	cmp	r3, #0
 800a528:	d00b      	beq.n	800a542 <tcp_output+0x1ae>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d110      	bne.n	800a556 <tcp_output+0x1c2>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a538:	891a      	ldrh	r2, [r3, #8]
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a53e:	429a      	cmp	r2, r3
 800a540:	d209      	bcs.n	800a556 <tcp_output+0x1c2>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d004      	beq.n	800a556 <tcp_output+0x1c2>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a552:	2b08      	cmp	r3, #8
 800a554:	d901      	bls.n	800a55a <tcp_output+0x1c6>
 800a556:	2301      	movs	r3, #1
 800a558:	e000      	b.n	800a55c <tcp_output+0x1c8>
 800a55a:	2300      	movs	r3, #0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d106      	bne.n	800a56e <tcp_output+0x1da>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	7e9b      	ldrb	r3, [r3, #26]
 800a564:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a568:	2b00      	cmp	r3, #0
 800a56a:	f000 80e2 	beq.w	800a732 <tcp_output+0x39e>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	7d1b      	ldrb	r3, [r3, #20]
 800a572:	2b02      	cmp	r3, #2
 800a574:	d00d      	beq.n	800a592 <tcp_output+0x1fe>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800a576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a578:	68db      	ldr	r3, [r3, #12]
 800a57a:	899b      	ldrh	r3, [r3, #12]
 800a57c:	b29c      	uxth	r4, r3
 800a57e:	2010      	movs	r0, #16
 800a580:	f7f9 ff0b 	bl	800439a <lwip_htons>
 800a584:	4603      	mov	r3, r0
 800a586:	461a      	mov	r2, r3
 800a588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a58a:	68db      	ldr	r3, [r3, #12]
 800a58c:	4322      	orrs	r2, r4
 800a58e:	b292      	uxth	r2, r2
 800a590:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 800a592:	697a      	ldr	r2, [r7, #20]
 800a594:	6879      	ldr	r1, [r7, #4]
 800a596:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a598:	f000 f8e2 	bl	800a760 <tcp_output_segment>
 800a59c:	4603      	mov	r3, r0
 800a59e:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800a5a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d009      	beq.n	800a5bc <tcp_output+0x228>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	7e9b      	ldrb	r3, [r3, #26]
 800a5ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a5b0:	b2da      	uxtb	r2, r3
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	769a      	strb	r2, [r3, #26]
      return err;
 800a5b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5ba:	e0cd      	b.n	800a758 <tcp_output+0x3c4>
    }
    pcb->unsent = seg->next;
 800a5bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	669a      	str	r2, [r3, #104]	@ 0x68
    if (pcb->state != SYN_SENT) {
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	7d1b      	ldrb	r3, [r3, #20]
 800a5c8:	2b02      	cmp	r3, #2
 800a5ca:	d006      	beq.n	800a5da <tcp_output+0x246>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	7e9b      	ldrb	r3, [r3, #26]
 800a5d0:	f023 0303 	bic.w	r3, r3, #3
 800a5d4:	b2da      	uxtb	r2, r3
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5dc:	68db      	ldr	r3, [r3, #12]
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f7f9 fee7 	bl	80043b4 <lwip_htonl>
 800a5e6:	4604      	mov	r4, r0
 800a5e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ea:	891b      	ldrh	r3, [r3, #8]
 800a5ec:	461d      	mov	r5, r3
 800a5ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5f0:	68db      	ldr	r3, [r3, #12]
 800a5f2:	899b      	ldrh	r3, [r3, #12]
 800a5f4:	b29b      	uxth	r3, r3
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f7f9 fecf 	bl	800439a <lwip_htons>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	f003 0303 	and.w	r3, r3, #3
 800a602:	2b00      	cmp	r3, #0
 800a604:	d00c      	beq.n	800a620 <tcp_output+0x28c>
 800a606:	2301      	movs	r3, #1
 800a608:	e00b      	b.n	800a622 <tcp_output+0x28e>
 800a60a:	bf00      	nop
 800a60c:	0800f5a4 	.word	0x0800f5a4
 800a610:	0800f9a8 	.word	0x0800f9a8
 800a614:	0800f608 	.word	0x0800f608
 800a618:	20006c94 	.word	0x20006c94
 800a61c:	0800f9d0 	.word	0x0800f9d0
 800a620:	2300      	movs	r3, #0
 800a622:	442b      	add	r3, r5
 800a624:	4423      	add	r3, r4
 800a626:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	1ad3      	subs	r3, r2, r3
 800a630:	2b00      	cmp	r3, #0
 800a632:	da02      	bge.n	800a63a <tcp_output+0x2a6>
      pcb->snd_nxt = snd_nxt;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	68ba      	ldr	r2, [r7, #8]
 800a638:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800a63a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a63c:	891b      	ldrh	r3, [r3, #8]
 800a63e:	461c      	mov	r4, r3
 800a640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a642:	68db      	ldr	r3, [r3, #12]
 800a644:	899b      	ldrh	r3, [r3, #12]
 800a646:	b29b      	uxth	r3, r3
 800a648:	4618      	mov	r0, r3
 800a64a:	f7f9 fea6 	bl	800439a <lwip_htons>
 800a64e:	4603      	mov	r3, r0
 800a650:	f003 0303 	and.w	r3, r3, #3
 800a654:	2b00      	cmp	r3, #0
 800a656:	d001      	beq.n	800a65c <tcp_output+0x2c8>
 800a658:	2301      	movs	r3, #1
 800a65a:	e000      	b.n	800a65e <tcp_output+0x2ca>
 800a65c:	2300      	movs	r3, #0
 800a65e:	4423      	add	r3, r4
 800a660:	2b00      	cmp	r3, #0
 800a662:	d049      	beq.n	800a6f8 <tcp_output+0x364>
      seg->next = NULL;
 800a664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a666:	2200      	movs	r2, #0
 800a668:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d105      	bne.n	800a67e <tcp_output+0x2ea>
        pcb->unacked = seg;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a676:	66da      	str	r2, [r3, #108]	@ 0x6c
        useg = seg;
 800a678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a67a:	623b      	str	r3, [r7, #32]
 800a67c:	e03f      	b.n	800a6fe <tcp_output+0x36a>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800a67e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a680:	68db      	ldr	r3, [r3, #12]
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	4618      	mov	r0, r3
 800a686:	f7f9 fe95 	bl	80043b4 <lwip_htonl>
 800a68a:	4604      	mov	r4, r0
 800a68c:	6a3b      	ldr	r3, [r7, #32]
 800a68e:	68db      	ldr	r3, [r3, #12]
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	4618      	mov	r0, r3
 800a694:	f7f9 fe8e 	bl	80043b4 <lwip_htonl>
 800a698:	4603      	mov	r3, r0
 800a69a:	1ae3      	subs	r3, r4, r3
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	da24      	bge.n	800a6ea <tcp_output+0x356>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	336c      	adds	r3, #108	@ 0x6c
 800a6a4:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a6a6:	e002      	b.n	800a6ae <tcp_output+0x31a>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 800a6a8:	69fb      	ldr	r3, [r7, #28]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a6ae:	69fb      	ldr	r3, [r7, #28]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d011      	beq.n	800a6da <tcp_output+0x346>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a6b6:	69fb      	ldr	r3, [r7, #28]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	68db      	ldr	r3, [r3, #12]
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f7f9 fe78 	bl	80043b4 <lwip_htonl>
 800a6c4:	4604      	mov	r4, r0
 800a6c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6c8:	68db      	ldr	r3, [r3, #12]
 800a6ca:	685b      	ldr	r3, [r3, #4]
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f7f9 fe71 	bl	80043b4 <lwip_htonl>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	dbe6      	blt.n	800a6a8 <tcp_output+0x314>
          }
          seg->next = (*cur_seg);
 800a6da:	69fb      	ldr	r3, [r7, #28]
 800a6dc:	681a      	ldr	r2, [r3, #0]
 800a6de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6e0:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800a6e2:	69fb      	ldr	r3, [r7, #28]
 800a6e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6e6:	601a      	str	r2, [r3, #0]
 800a6e8:	e009      	b.n	800a6fe <tcp_output+0x36a>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800a6ea:	6a3b      	ldr	r3, [r7, #32]
 800a6ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6ee:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800a6f0:	6a3b      	ldr	r3, [r7, #32]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	623b      	str	r3, [r7, #32]
 800a6f6:	e002      	b.n	800a6fe <tcp_output+0x36a>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800a6f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a6fa:	f7fc fa3f 	bl	8006b7c <tcp_seg_free>
    }
    seg = pcb->unsent;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a702:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800a704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a706:	2b00      	cmp	r3, #0
 800a708:	d015      	beq.n	800a736 <tcp_output+0x3a2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800a70a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a70c:	68db      	ldr	r3, [r3, #12]
 800a70e:	685b      	ldr	r3, [r3, #4]
 800a710:	4618      	mov	r0, r3
 800a712:	f7f9 fe4f 	bl	80043b4 <lwip_htonl>
 800a716:	4602      	mov	r2, r0
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a71c:	1ad3      	subs	r3, r2, r3
 800a71e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a720:	8912      	ldrh	r2, [r2, #8]
 800a722:	4413      	add	r3, r2
  while (seg != NULL &&
 800a724:	69ba      	ldr	r2, [r7, #24]
 800a726:	429a      	cmp	r2, r3
 800a728:	f4bf aede 	bcs.w	800a4e8 <tcp_output+0x154>
  }
output_done:
 800a72c:	e003      	b.n	800a736 <tcp_output+0x3a2>
    goto output_done;
 800a72e:	bf00      	nop
 800a730:	e002      	b.n	800a738 <tcp_output+0x3a4>
      break;
 800a732:	bf00      	nop
 800a734:	e000      	b.n	800a738 <tcp_output+0x3a4>
output_done:
 800a736:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d103      	bne.n	800a748 <tcp_output+0x3b4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2200      	movs	r2, #0
 800a744:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	7e9b      	ldrb	r3, [r3, #26]
 800a74c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a750:	b2da      	uxtb	r2, r3
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 800a756:	2300      	movs	r3, #0
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3728      	adds	r7, #40	@ 0x28
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bdb0      	pop	{r4, r5, r7, pc}

0800a760 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800a760:	b5b0      	push	{r4, r5, r7, lr}
 800a762:	b08c      	sub	sp, #48	@ 0x30
 800a764:	af04      	add	r7, sp, #16
 800a766:	60f8      	str	r0, [r7, #12]
 800a768:	60b9      	str	r1, [r7, #8]
 800a76a:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	89db      	ldrh	r3, [r3, #14]
 800a772:	2b01      	cmp	r3, #1
 800a774:	d001      	beq.n	800a77a <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800a776:	2300      	movs	r3, #0
 800a778:	e08a      	b.n	800a890 <tcp_output_segment+0x130>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	68dc      	ldr	r4, [r3, #12]
 800a782:	4610      	mov	r0, r2
 800a784:	f7f9 fe16 	bl	80043b4 <lwip_htonl>
 800a788:	4603      	mov	r3, r0
 800a78a:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	68dc      	ldr	r4, [r3, #12]
 800a794:	4610      	mov	r0, r2
 800a796:	f7f9 fe00 	bl	800439a <lwip_htons>
 800a79a:	4603      	mov	r3, r0
 800a79c:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7a2:	68ba      	ldr	r2, [r7, #8]
 800a7a4:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800a7a6:	441a      	add	r2, r3
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	68db      	ldr	r3, [r3, #12]
 800a7b0:	3314      	adds	r3, #20
 800a7b2:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	7a9b      	ldrb	r3, [r3, #10]
 800a7b8:	f003 0301 	and.w	r3, r3, #1
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d014      	beq.n	800a7ea <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	3304      	adds	r3, #4
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800a7ca:	f7fc fc7f 	bl	80070cc <tcp_eff_send_mss_impl>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800a7d2:	8b7b      	ldrh	r3, [r7, #26]
 800a7d4:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f7f9 fdeb 	bl	80043b4 <lwip_htonl>
 800a7de:	4602      	mov	r2, r0
 800a7e0:	69fb      	ldr	r3, [r7, #28]
 800a7e2:	601a      	str	r2, [r3, #0]
    opts += 1;
 800a7e4:	69fb      	ldr	r3, [r7, #28]
 800a7e6:	3304      	adds	r3, #4
 800a7e8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	da02      	bge.n	800a7fa <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d10c      	bne.n	800a81c <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 800a802:	4b25      	ldr	r3, [pc, #148]	@ (800a898 <tcp_output_segment+0x138>)
 800a804:	681a      	ldr	r2, [r3, #0]
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	68db      	ldr	r3, [r3, #12]
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	4618      	mov	r0, r3
 800a812:	f7f9 fdcf 	bl	80043b4 <lwip_htonl>
 800a816:	4602      	mov	r2, r0
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	68da      	ldr	r2, [r3, #12]
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	1ad3      	subs	r3, r2, r3
 800a828:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	8959      	ldrh	r1, [r3, #10]
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	8b3a      	ldrh	r2, [r7, #24]
 800a836:	1a8a      	subs	r2, r1, r2
 800a838:	b292      	uxth	r2, r2
 800a83a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	685b      	ldr	r3, [r3, #4]
 800a840:	8919      	ldrh	r1, [r3, #8]
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	8b3a      	ldrh	r2, [r7, #24]
 800a848:	1a8a      	subs	r2, r1, r2
 800a84a:	b292      	uxth	r2, r2
 800a84c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	685b      	ldr	r3, [r3, #4]
 800a852:	68fa      	ldr	r2, [r7, #12]
 800a854:	68d2      	ldr	r2, [r2, #12]
 800a856:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	68db      	ldr	r3, [r3, #12]
 800a85c:	2200      	movs	r2, #0
 800a85e:	741a      	strb	r2, [r3, #16]
 800a860:	2200      	movs	r2, #0
 800a862:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	6858      	ldr	r0, [r3, #4]
 800a868:	68b9      	ldr	r1, [r7, #8]
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	1d1c      	adds	r4, r3, #4
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	7a9d      	ldrb	r5, [r3, #10]
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	7a5b      	ldrb	r3, [r3, #9]
 800a876:	687a      	ldr	r2, [r7, #4]
 800a878:	9202      	str	r2, [sp, #8]
 800a87a:	2206      	movs	r2, #6
 800a87c:	9201      	str	r2, [sp, #4]
 800a87e:	9300      	str	r3, [sp, #0]
 800a880:	462b      	mov	r3, r5
 800a882:	4622      	mov	r2, r4
 800a884:	f001 ff14 	bl	800c6b0 <ip4_output_if>
 800a888:	4603      	mov	r3, r0
 800a88a:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 800a88c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a890:	4618      	mov	r0, r3
 800a892:	3720      	adds	r7, #32
 800a894:	46bd      	mov	sp, r7
 800a896:	bdb0      	pop	{r4, r5, r7, pc}
 800a898:	20006c48 	.word	0x20006c48

0800a89c <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b08c      	sub	sp, #48	@ 0x30
 800a8a0:	af04      	add	r7, sp, #16
 800a8a2:	60f8      	str	r0, [r7, #12]
 800a8a4:	60b9      	str	r1, [r7, #8]
 800a8a6:	607a      	str	r2, [r7, #4]
 800a8a8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	2114      	movs	r1, #20
 800a8ae:	2001      	movs	r0, #1
 800a8b0:	f7fa fb0c 	bl	8004ecc <pbuf_alloc>
 800a8b4:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800a8b6:	69fb      	ldr	r3, [r7, #28]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d05b      	beq.n	800a974 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a8bc:	69fb      	ldr	r3, [r7, #28]
 800a8be:	895b      	ldrh	r3, [r3, #10]
 800a8c0:	2b13      	cmp	r3, #19
 800a8c2:	d806      	bhi.n	800a8d2 <tcp_rst+0x36>
 800a8c4:	4b2d      	ldr	r3, [pc, #180]	@ (800a97c <tcp_rst+0xe0>)
 800a8c6:	f240 524c 	movw	r2, #1356	@ 0x54c
 800a8ca:	492d      	ldr	r1, [pc, #180]	@ (800a980 <tcp_rst+0xe4>)
 800a8cc:	482d      	ldr	r0, [pc, #180]	@ (800a984 <tcp_rst+0xe8>)
 800a8ce:	f002 ff6d 	bl	800d7ac <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800a8d2:	69fb      	ldr	r3, [r7, #28]
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 800a8d8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f7f9 fd5d 	bl	800439a <lwip_htons>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	461a      	mov	r2, r3
 800a8e4:	69bb      	ldr	r3, [r7, #24]
 800a8e6:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800a8e8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f7f9 fd55 	bl	800439a <lwip_htons>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	69bb      	ldr	r3, [r7, #24]
 800a8f6:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800a8f8:	68f8      	ldr	r0, [r7, #12]
 800a8fa:	f7f9 fd5b 	bl	80043b4 <lwip_htonl>
 800a8fe:	4602      	mov	r2, r0
 800a900:	69bb      	ldr	r3, [r7, #24]
 800a902:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800a904:	68b8      	ldr	r0, [r7, #8]
 800a906:	f7f9 fd55 	bl	80043b4 <lwip_htonl>
 800a90a:	4602      	mov	r2, r0
 800a90c:	69bb      	ldr	r3, [r7, #24]
 800a90e:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800a910:	f245 0014 	movw	r0, #20500	@ 0x5014
 800a914:	f7f9 fd41 	bl	800439a <lwip_htons>
 800a918:	4603      	mov	r3, r0
 800a91a:	461a      	mov	r2, r3
 800a91c:	69bb      	ldr	r3, [r7, #24]
 800a91e:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800a920:	69bb      	ldr	r3, [r7, #24]
 800a922:	2200      	movs	r2, #0
 800a924:	f042 0208 	orr.w	r2, r2, #8
 800a928:	739a      	strb	r2, [r3, #14]
 800a92a:	2200      	movs	r2, #0
 800a92c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a930:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 800a932:	69bb      	ldr	r3, [r7, #24]
 800a934:	2200      	movs	r2, #0
 800a936:	741a      	strb	r2, [r3, #16]
 800a938:	2200      	movs	r2, #0
 800a93a:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 800a93c:	69bb      	ldr	r3, [r7, #24]
 800a93e:	2200      	movs	r2, #0
 800a940:	749a      	strb	r2, [r3, #18]
 800a942:	2200      	movs	r2, #0
 800a944:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800a946:	6838      	ldr	r0, [r7, #0]
 800a948:	f001 fd0a 	bl	800c360 <ip4_route>
 800a94c:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d00b      	beq.n	800a96c <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	9302      	str	r3, [sp, #8]
 800a958:	2306      	movs	r3, #6
 800a95a:	9301      	str	r3, [sp, #4]
 800a95c:	2300      	movs	r3, #0
 800a95e:	9300      	str	r3, [sp, #0]
 800a960:	23ff      	movs	r3, #255	@ 0xff
 800a962:	683a      	ldr	r2, [r7, #0]
 800a964:	6879      	ldr	r1, [r7, #4]
 800a966:	69f8      	ldr	r0, [r7, #28]
 800a968:	f001 fea2 	bl	800c6b0 <ip4_output_if>
  }
  pbuf_free(p);
 800a96c:	69f8      	ldr	r0, [r7, #28]
 800a96e:	f7fa fe25 	bl	80055bc <pbuf_free>
 800a972:	e000      	b.n	800a976 <tcp_rst+0xda>
    return;
 800a974:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800a976:	3720      	adds	r7, #32
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}
 800a97c:	0800f5a4 	.word	0x0800f5a4
 800a980:	0800f5d8 	.word	0x0800f5d8
 800a984:	0800f608 	.word	0x0800f608

0800a988 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b084      	sub	sp, #16
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a994:	2b00      	cmp	r3, #0
 800a996:	d029      	beq.n	800a9ec <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a99c:	60fb      	str	r3, [r7, #12]
 800a99e:	e002      	b.n	800a9a6 <tcp_rexmit_rto+0x1e>
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	60fb      	str	r3, [r7, #12]
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d1f8      	bne.n	800a9a0 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	669a      	str	r2, [r3, #104]	@ 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a9ca:	2bff      	cmp	r3, #255	@ 0xff
 800a9cc:	d007      	beq.n	800a9de <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	b2da      	uxtb	r2, r3
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f7ff fcd5 	bl	800a394 <tcp_output>
 800a9ea:	e000      	b.n	800a9ee <tcp_rexmit_rto+0x66>
    return;
 800a9ec:	bf00      	nop
}
 800a9ee:	3710      	adds	r7, #16
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}

0800a9f4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800a9f4:	b590      	push	{r4, r7, lr}
 800a9f6:	b085      	sub	sp, #20
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d043      	beq.n	800aa8c <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa08:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	681a      	ldr	r2, [r3, #0]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	66da      	str	r2, [r3, #108]	@ 0x6c

  cur_seg = &(pcb->unsent);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	3368      	adds	r3, #104	@ 0x68
 800aa16:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800aa18:	e002      	b.n	800aa20 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d011      	beq.n	800aa4c <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	68db      	ldr	r3, [r3, #12]
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	4618      	mov	r0, r3
 800aa32:	f7f9 fcbf 	bl	80043b4 <lwip_htonl>
 800aa36:	4604      	mov	r4, r0
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	68db      	ldr	r3, [r3, #12]
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f7f9 fcb8 	bl	80043b4 <lwip_htonl>
 800aa44:	4603      	mov	r3, r0
 800aa46:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	dbe6      	blt.n	800aa1a <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681a      	ldr	r2, [r3, #0]
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	68ba      	ldr	r2, [r7, #8]
 800aa58:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d103      	bne.n	800aa6a <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2200      	movs	r2, #0
 800aa66:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800aa70:	2bff      	cmp	r3, #255	@ 0xff
 800aa72:	d007      	beq.n	800aa84 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	b2da      	uxtb	r2, r3
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2200      	movs	r2, #0
 800aa88:	635a      	str	r2, [r3, #52]	@ 0x34
 800aa8a:	e000      	b.n	800aa8e <tcp_rexmit+0x9a>
    return;
 800aa8c:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800aa8e:	3714      	adds	r7, #20
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd90      	pop	{r4, r7, pc}

0800aa94 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b082      	sub	sp, #8
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d041      	beq.n	800ab28 <tcp_rexmit_fast+0x94>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	7e9b      	ldrb	r3, [r3, #26]
 800aaa8:	f003 0304 	and.w	r3, r3, #4
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d13b      	bne.n	800ab28 <tcp_rexmit_fast+0x94>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f7ff ff9f 	bl	800a9f4 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800aac2:	4293      	cmp	r3, r2
 800aac4:	bf28      	it	cs
 800aac6:	4613      	movcs	r3, r2
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	0fda      	lsrs	r2, r3, #31
 800aacc:	4413      	add	r3, r2
 800aace:	105b      	asrs	r3, r3, #1
 800aad0:	b29a      	uxth	r2, r3
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800aade:	461a      	mov	r2, r3
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800aae4:	005b      	lsls	r3, r3, #1
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d206      	bcs.n	800aaf8 <tcp_rexmit_fast+0x64>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800aaee:	005b      	lsls	r3, r3, #1
 800aaf0:	b29a      	uxth	r2, r3
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ab02:	4619      	mov	r1, r3
 800ab04:	0049      	lsls	r1, r1, #1
 800ab06:	440b      	add	r3, r1
 800ab08:	b29b      	uxth	r3, r3
 800ab0a:	4413      	add	r3, r2
 800ab0c:	b29a      	uxth	r2, r3
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->flags |= TF_INFR;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	7e9b      	ldrb	r3, [r3, #26]
 800ab18:	f043 0304 	orr.w	r3, r3, #4
 800ab1c:	b2da      	uxtb	r2, r3
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2200      	movs	r2, #0
 800ab26:	861a      	strh	r2, [r3, #48]	@ 0x30
  }
}
 800ab28:	bf00      	nop
 800ab2a:	3708      	adds	r7, #8
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}

0800ab30 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b08a      	sub	sp, #40	@ 0x28
 800ab34:	af04      	add	r7, sp, #16
 800ab36:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab3c:	3b01      	subs	r3, #1
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f7f9 fc38 	bl	80043b4 <lwip_htonl>
 800ab44:	4603      	mov	r3, r0
 800ab46:	2200      	movs	r2, #0
 800ab48:	2100      	movs	r1, #0
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f7fe fd58 	bl	8009600 <tcp_output_alloc_header>
 800ab50:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d102      	bne.n	800ab5e <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800ab58:	f04f 33ff 	mov.w	r3, #4294967295
 800ab5c:	e021      	b.n	800aba2 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	3304      	adds	r3, #4
 800ab62:	4618      	mov	r0, r3
 800ab64:	f001 fbfc 	bl	800c360 <ip4_route>
 800ab68:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d102      	bne.n	800ab76 <tcp_keepalive+0x46>
    err = ERR_RTE;
 800ab70:	23fc      	movs	r3, #252	@ 0xfc
 800ab72:	75fb      	strb	r3, [r7, #23]
 800ab74:	e010      	b.n	800ab98 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800ab76:	6879      	ldr	r1, [r7, #4]
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	1d1a      	adds	r2, r3, #4
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	7a98      	ldrb	r0, [r3, #10]
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	9302      	str	r3, [sp, #8]
 800ab84:	2306      	movs	r3, #6
 800ab86:	9301      	str	r3, [sp, #4]
 800ab88:	2300      	movs	r3, #0
 800ab8a:	9300      	str	r3, [sp, #0]
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	6938      	ldr	r0, [r7, #16]
 800ab90:	f001 fd8e 	bl	800c6b0 <ip4_output_if>
 800ab94:	4603      	mov	r3, r0
 800ab96:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800ab98:	6938      	ldr	r0, [r7, #16]
 800ab9a:	f7fa fd0f 	bl	80055bc <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ab9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3718      	adds	r7, #24
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}

0800abaa <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800abaa:	b590      	push	{r4, r7, lr}
 800abac:	b08f      	sub	sp, #60	@ 0x3c
 800abae:	af04      	add	r7, sp, #16
 800abb0:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800abb6:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 800abb8:	6a3b      	ldr	r3, [r7, #32]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d102      	bne.n	800abc4 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800abc2:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 800abc4:	6a3b      	ldr	r3, [r7, #32]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d101      	bne.n	800abce <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800abca:	2300      	movs	r3, #0
 800abcc:	e085      	b.n	800acda <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800abce:	6a3b      	ldr	r3, [r7, #32]
 800abd0:	68db      	ldr	r3, [r3, #12]
 800abd2:	899b      	ldrh	r3, [r3, #12]
 800abd4:	b29b      	uxth	r3, r3
 800abd6:	4618      	mov	r0, r3
 800abd8:	f7f9 fbdf 	bl	800439a <lwip_htons>
 800abdc:	4603      	mov	r3, r0
 800abde:	f003 0301 	and.w	r3, r3, #1
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d005      	beq.n	800abf2 <tcp_zero_window_probe+0x48>
 800abe6:	6a3b      	ldr	r3, [r7, #32]
 800abe8:	891b      	ldrh	r3, [r3, #8]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d101      	bne.n	800abf2 <tcp_zero_window_probe+0x48>
 800abee:	2301      	movs	r3, #1
 800abf0:	e000      	b.n	800abf4 <tcp_zero_window_probe+0x4a>
 800abf2:	2300      	movs	r3, #0
 800abf4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800abf6:	7ffb      	ldrb	r3, [r7, #31]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	bf0c      	ite	eq
 800abfc:	2301      	moveq	r3, #1
 800abfe:	2300      	movne	r3, #0
 800ac00:	b2db      	uxtb	r3, r3
 800ac02:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800ac04:	6a3b      	ldr	r3, [r7, #32]
 800ac06:	68db      	ldr	r3, [r3, #12]
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	8bba      	ldrh	r2, [r7, #28]
 800ac0c:	2100      	movs	r1, #0
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f7fe fcf6 	bl	8009600 <tcp_output_alloc_header>
 800ac14:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ac16:	69bb      	ldr	r3, [r7, #24]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d102      	bne.n	800ac22 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ac1c:	f04f 33ff 	mov.w	r3, #4294967295
 800ac20:	e05b      	b.n	800acda <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ac22:	69bb      	ldr	r3, [r7, #24]
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800ac28:	7ffb      	ldrb	r3, [r7, #31]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d00e      	beq.n	800ac4c <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	899b      	ldrh	r3, [r3, #12]
 800ac32:	b29b      	uxth	r3, r3
 800ac34:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ac38:	b29c      	uxth	r4, r3
 800ac3a:	2011      	movs	r0, #17
 800ac3c:	f7f9 fbad 	bl	800439a <lwip_htons>
 800ac40:	4603      	mov	r3, r0
 800ac42:	4323      	orrs	r3, r4
 800ac44:	b29a      	uxth	r2, r3
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	819a      	strh	r2, [r3, #12]
 800ac4a:	e010      	b.n	800ac6e <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800ac4c:	69bb      	ldr	r3, [r7, #24]
 800ac4e:	685b      	ldr	r3, [r3, #4]
 800ac50:	3314      	adds	r3, #20
 800ac52:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ac54:	6a3b      	ldr	r3, [r7, #32]
 800ac56:	6858      	ldr	r0, [r3, #4]
 800ac58:	6a3b      	ldr	r3, [r7, #32]
 800ac5a:	685b      	ldr	r3, [r3, #4]
 800ac5c:	891a      	ldrh	r2, [r3, #8]
 800ac5e:	6a3b      	ldr	r3, [r7, #32]
 800ac60:	891b      	ldrh	r3, [r3, #8]
 800ac62:	1ad3      	subs	r3, r2, r3
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	2201      	movs	r2, #1
 800ac68:	6939      	ldr	r1, [r7, #16]
 800ac6a:	f7fa fe95 	bl	8005998 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ac6e:	6a3b      	ldr	r3, [r7, #32]
 800ac70:	68db      	ldr	r3, [r3, #12]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	4618      	mov	r0, r3
 800ac76:	f7f9 fb9d 	bl	80043b4 <lwip_htonl>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	3301      	adds	r3, #1
 800ac7e:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	1ad3      	subs	r3, r2, r3
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	da02      	bge.n	800ac92 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	68fa      	ldr	r2, [r7, #12]
 800ac90:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	3304      	adds	r3, #4
 800ac96:	4618      	mov	r0, r3
 800ac98:	f001 fb62 	bl	800c360 <ip4_route>
 800ac9c:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d103      	bne.n	800acac <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 800aca4:	23fc      	movs	r3, #252	@ 0xfc
 800aca6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800acaa:	e011      	b.n	800acd0 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800acac:	6879      	ldr	r1, [r7, #4]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	1d1a      	adds	r2, r3, #4
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	7a98      	ldrb	r0, [r3, #10]
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	9302      	str	r3, [sp, #8]
 800acba:	2306      	movs	r3, #6
 800acbc:	9301      	str	r3, [sp, #4]
 800acbe:	2300      	movs	r3, #0
 800acc0:	9300      	str	r3, [sp, #0]
 800acc2:	4603      	mov	r3, r0
 800acc4:	69b8      	ldr	r0, [r7, #24]
 800acc6:	f001 fcf3 	bl	800c6b0 <ip4_output_if>
 800acca:	4603      	mov	r3, r0
 800accc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800acd0:	69b8      	ldr	r0, [r7, #24]
 800acd2:	f7fa fc73 	bl	80055bc <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800acd6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800acda:	4618      	mov	r0, r3
 800acdc:	372c      	adds	r7, #44	@ 0x2c
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd90      	pop	{r4, r7, pc}
	...

0800ace4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b082      	sub	sp, #8
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800acec:	f7fa fed4 	bl	8005a98 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800acf0:	4b0a      	ldr	r3, [pc, #40]	@ (800ad1c <tcpip_tcp_timer+0x38>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d103      	bne.n	800ad00 <tcpip_tcp_timer+0x1c>
 800acf8:	4b09      	ldr	r3, [pc, #36]	@ (800ad20 <tcpip_tcp_timer+0x3c>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d005      	beq.n	800ad0c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ad00:	2200      	movs	r2, #0
 800ad02:	4908      	ldr	r1, [pc, #32]	@ (800ad24 <tcpip_tcp_timer+0x40>)
 800ad04:	20fa      	movs	r0, #250	@ 0xfa
 800ad06:	f000 f86f 	bl	800ade8 <sys_timeout>
 800ad0a:	e003      	b.n	800ad14 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800ad0c:	4b06      	ldr	r3, [pc, #24]	@ (800ad28 <tcpip_tcp_timer+0x44>)
 800ad0e:	2200      	movs	r2, #0
 800ad10:	601a      	str	r2, [r3, #0]
  }
}
 800ad12:	bf00      	nop
 800ad14:	bf00      	nop
 800ad16:	3708      	adds	r7, #8
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}
 800ad1c:	20006c54 	.word	0x20006c54
 800ad20:	20006c58 	.word	0x20006c58
 800ad24:	0800ace5 	.word	0x0800ace5
 800ad28:	20006ca0 	.word	0x20006ca0

0800ad2c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ad30:	4b0a      	ldr	r3, [pc, #40]	@ (800ad5c <tcp_timer_needed+0x30>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d10f      	bne.n	800ad58 <tcp_timer_needed+0x2c>
 800ad38:	4b09      	ldr	r3, [pc, #36]	@ (800ad60 <tcp_timer_needed+0x34>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d103      	bne.n	800ad48 <tcp_timer_needed+0x1c>
 800ad40:	4b08      	ldr	r3, [pc, #32]	@ (800ad64 <tcp_timer_needed+0x38>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d007      	beq.n	800ad58 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800ad48:	4b04      	ldr	r3, [pc, #16]	@ (800ad5c <tcp_timer_needed+0x30>)
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ad4e:	2200      	movs	r2, #0
 800ad50:	4905      	ldr	r1, [pc, #20]	@ (800ad68 <tcp_timer_needed+0x3c>)
 800ad52:	20fa      	movs	r0, #250	@ 0xfa
 800ad54:	f000 f848 	bl	800ade8 <sys_timeout>
  }
}
 800ad58:	bf00      	nop
 800ad5a:	bd80      	pop	{r7, pc}
 800ad5c:	20006ca0 	.word	0x20006ca0
 800ad60:	20006c54 	.word	0x20006c54
 800ad64:	20006c58 	.word	0x20006c58
 800ad68:	0800ace5 	.word	0x0800ace5

0800ad6c <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b084      	sub	sp, #16
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	687a      	ldr	r2, [r7, #4]
 800ad84:	4903      	ldr	r1, [pc, #12]	@ (800ad94 <cyclic_timer+0x28>)
 800ad86:	4618      	mov	r0, r3
 800ad88:	f000 f82e 	bl	800ade8 <sys_timeout>
}
 800ad8c:	bf00      	nop
 800ad8e:	3710      	adds	r7, #16
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}
 800ad94:	0800ad6d 	.word	0x0800ad6d

0800ad98 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b082      	sub	sp, #8
 800ad9c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ad9e:	2301      	movs	r3, #1
 800ada0:	607b      	str	r3, [r7, #4]
 800ada2:	e00e      	b.n	800adc2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800ada4:	4a0d      	ldr	r2, [pc, #52]	@ (800addc <sys_timeouts_init+0x44>)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	00db      	lsls	r3, r3, #3
 800adb0:	4a0a      	ldr	r2, [pc, #40]	@ (800addc <sys_timeouts_init+0x44>)
 800adb2:	4413      	add	r3, r2
 800adb4:	461a      	mov	r2, r3
 800adb6:	490a      	ldr	r1, [pc, #40]	@ (800ade0 <sys_timeouts_init+0x48>)
 800adb8:	f000 f816 	bl	800ade8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	3301      	adds	r3, #1
 800adc0:	607b      	str	r3, [r7, #4]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2b02      	cmp	r3, #2
 800adc6:	d9ed      	bls.n	800ada4 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800adc8:	f7f9 fa5a 	bl	8004280 <sys_now>
 800adcc:	4603      	mov	r3, r0
 800adce:	4a05      	ldr	r2, [pc, #20]	@ (800ade4 <sys_timeouts_init+0x4c>)
 800add0:	6013      	str	r3, [r2, #0]
}
 800add2:	bf00      	nop
 800add4:	3708      	adds	r7, #8
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}
 800adda:	bf00      	nop
 800addc:	0801026c 	.word	0x0801026c
 800ade0:	0800ad6d 	.word	0x0800ad6d
 800ade4:	20006c9c 	.word	0x20006c9c

0800ade8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b088      	sub	sp, #32
 800adec:	af00      	add	r7, sp, #0
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	60b9      	str	r1, [r7, #8]
 800adf2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800adf4:	2006      	movs	r0, #6
 800adf6:	f7f9 fe79 	bl	8004aec <memp_malloc>
 800adfa:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d10a      	bne.n	800ae18 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	f040 8084 	bne.w	800af12 <sys_timeout+0x12a>
 800ae0a:	4b44      	ldr	r3, [pc, #272]	@ (800af1c <sys_timeout+0x134>)
 800ae0c:	22d4      	movs	r2, #212	@ 0xd4
 800ae0e:	4944      	ldr	r1, [pc, #272]	@ (800af20 <sys_timeout+0x138>)
 800ae10:	4844      	ldr	r0, [pc, #272]	@ (800af24 <sys_timeout+0x13c>)
 800ae12:	f002 fccb 	bl	800d7ac <iprintf>
    return;
 800ae16:	e07c      	b.n	800af12 <sys_timeout+0x12a>
  }

  now = sys_now();
 800ae18:	f7f9 fa32 	bl	8004280 <sys_now>
 800ae1c:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800ae1e:	4b42      	ldr	r3, [pc, #264]	@ (800af28 <sys_timeout+0x140>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d105      	bne.n	800ae32 <sys_timeout+0x4a>
    diff = 0;
 800ae26:	2300      	movs	r3, #0
 800ae28:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800ae2a:	4a40      	ldr	r2, [pc, #256]	@ (800af2c <sys_timeout+0x144>)
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	6013      	str	r3, [r2, #0]
 800ae30:	e004      	b.n	800ae3c <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800ae32:	4b3e      	ldr	r3, [pc, #248]	@ (800af2c <sys_timeout+0x144>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	693a      	ldr	r2, [r7, #16]
 800ae38:	1ad3      	subs	r3, r2, r3
 800ae3a:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	68ba      	ldr	r2, [r7, #8]
 800ae46:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	687a      	ldr	r2, [r7, #4]
 800ae4c:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800ae4e:	68fa      	ldr	r2, [r7, #12]
 800ae50:	69bb      	ldr	r3, [r7, #24]
 800ae52:	441a      	add	r2, r3
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800ae58:	4b33      	ldr	r3, [pc, #204]	@ (800af28 <sys_timeout+0x140>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d103      	bne.n	800ae68 <sys_timeout+0x80>
    next_timeout = timeout;
 800ae60:	4a31      	ldr	r2, [pc, #196]	@ (800af28 <sys_timeout+0x140>)
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	6013      	str	r3, [r2, #0]
    return;
 800ae66:	e055      	b.n	800af14 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800ae68:	4b2f      	ldr	r3, [pc, #188]	@ (800af28 <sys_timeout+0x140>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	68fa      	ldr	r2, [r7, #12]
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d20f      	bcs.n	800ae94 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800ae74:	4b2c      	ldr	r3, [pc, #176]	@ (800af28 <sys_timeout+0x140>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	6859      	ldr	r1, [r3, #4]
 800ae7a:	4b2b      	ldr	r3, [pc, #172]	@ (800af28 <sys_timeout+0x140>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	68fa      	ldr	r2, [r7, #12]
 800ae80:	1a8a      	subs	r2, r1, r2
 800ae82:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800ae84:	4b28      	ldr	r3, [pc, #160]	@ (800af28 <sys_timeout+0x140>)
 800ae86:	681a      	ldr	r2, [r3, #0]
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800ae8c:	4a26      	ldr	r2, [pc, #152]	@ (800af28 <sys_timeout+0x140>)
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	6013      	str	r3, [r2, #0]
 800ae92:	e03f      	b.n	800af14 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800ae94:	4b24      	ldr	r3, [pc, #144]	@ (800af28 <sys_timeout+0x140>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	61fb      	str	r3, [r7, #28]
 800ae9a:	e036      	b.n	800af0a <sys_timeout+0x122>
      timeout->time -= t->time;
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	685a      	ldr	r2, [r3, #4]
 800aea0:	69fb      	ldr	r3, [r7, #28]
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	1ad2      	subs	r2, r2, r3
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800aeaa:	69fb      	ldr	r3, [r7, #28]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d006      	beq.n	800aec0 <sys_timeout+0xd8>
 800aeb2:	69fb      	ldr	r3, [r7, #28]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	685a      	ldr	r2, [r3, #4]
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d921      	bls.n	800af04 <sys_timeout+0x11c>
        if (t->next != NULL) {
 800aec0:	69fb      	ldr	r3, [r7, #28]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d009      	beq.n	800aedc <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800aec8:	69fb      	ldr	r3, [r7, #28]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	6859      	ldr	r1, [r3, #4]
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	685a      	ldr	r2, [r3, #4]
 800aed2:	69fb      	ldr	r3, [r7, #28]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	1a8a      	subs	r2, r1, r2
 800aed8:	605a      	str	r2, [r3, #4]
 800aeda:	e00b      	b.n	800aef4 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	68fa      	ldr	r2, [r7, #12]
 800aee2:	429a      	cmp	r2, r3
 800aee4:	d206      	bcs.n	800aef4 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800aee6:	4b10      	ldr	r3, [pc, #64]	@ (800af28 <sys_timeout+0x140>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	685a      	ldr	r2, [r3, #4]
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	441a      	add	r2, r3
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800aef4:	69fb      	ldr	r3, [r7, #28]
 800aef6:	681a      	ldr	r2, [r3, #0]
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800aefc:	69fb      	ldr	r3, [r7, #28]
 800aefe:	697a      	ldr	r2, [r7, #20]
 800af00:	601a      	str	r2, [r3, #0]
        break;
 800af02:	e007      	b.n	800af14 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800af04:	69fb      	ldr	r3, [r7, #28]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	61fb      	str	r3, [r7, #28]
 800af0a:	69fb      	ldr	r3, [r7, #28]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d1c5      	bne.n	800ae9c <sys_timeout+0xb4>
 800af10:	e000      	b.n	800af14 <sys_timeout+0x12c>
    return;
 800af12:	bf00      	nop
      }
    }
  }
}
 800af14:	3720      	adds	r7, #32
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	0800f9e8 	.word	0x0800f9e8
 800af20:	0800fa1c 	.word	0x0800fa1c
 800af24:	0800fa5c 	.word	0x0800fa5c
 800af28:	20006c98 	.word	0x20006c98
 800af2c:	20006c9c 	.word	0x20006c9c

0800af30 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b086      	sub	sp, #24
 800af34:	af00      	add	r7, sp, #0
  if (next_timeout) {
 800af36:	4b24      	ldr	r3, [pc, #144]	@ (800afc8 <sys_check_timeouts+0x98>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d040      	beq.n	800afc0 <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800af3e:	f7f9 f99f 	bl	8004280 <sys_now>
 800af42:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800af44:	4b21      	ldr	r3, [pc, #132]	@ (800afcc <sys_check_timeouts+0x9c>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	68fa      	ldr	r2, [r7, #12]
 800af4a:	1ad3      	subs	r3, r2, r3
 800af4c:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 800af4e:	4b20      	ldr	r3, [pc, #128]	@ (800afd0 <sys_check_timeouts+0xa0>)
 800af50:	781b      	ldrb	r3, [r3, #0]
 800af52:	b2db      	uxtb	r3, r3
 800af54:	2b00      	cmp	r3, #0
 800af56:	d001      	beq.n	800af5c <sys_check_timeouts+0x2c>
 800af58:	f7f9 ff88 	bl	8004e6c <pbuf_free_ooseq>
      had_one = 0;
 800af5c:	2300      	movs	r3, #0
 800af5e:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 800af60:	4b19      	ldr	r3, [pc, #100]	@ (800afc8 <sys_check_timeouts+0x98>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d026      	beq.n	800afba <sys_check_timeouts+0x8a>
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	685b      	ldr	r3, [r3, #4]
 800af70:	697a      	ldr	r2, [r7, #20]
 800af72:	429a      	cmp	r2, r3
 800af74:	d321      	bcc.n	800afba <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 800af76:	2301      	movs	r3, #1
 800af78:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	685a      	ldr	r2, [r3, #4]
 800af7e:	4b13      	ldr	r3, [pc, #76]	@ (800afcc <sys_check_timeouts+0x9c>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	4413      	add	r3, r2
 800af84:	4a11      	ldr	r2, [pc, #68]	@ (800afcc <sys_check_timeouts+0x9c>)
 800af86:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	697a      	ldr	r2, [r7, #20]
 800af8e:	1ad3      	subs	r3, r2, r3
 800af90:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	4a0c      	ldr	r2, [pc, #48]	@ (800afc8 <sys_check_timeouts+0x98>)
 800af98:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	689b      	ldr	r3, [r3, #8]
 800af9e:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	68db      	ldr	r3, [r3, #12]
 800afa4:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800afa6:	68b9      	ldr	r1, [r7, #8]
 800afa8:	2006      	movs	r0, #6
 800afaa:	f7f9 fdeb 	bl	8004b84 <memp_free>
        if (handler != NULL) {
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d002      	beq.n	800afba <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6838      	ldr	r0, [r7, #0]
 800afb8:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800afba:	7cfb      	ldrb	r3, [r7, #19]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d1c6      	bne.n	800af4e <sys_check_timeouts+0x1e>
  }
}
 800afc0:	bf00      	nop
 800afc2:	3718      	adds	r7, #24
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}
 800afc8:	20006c98 	.word	0x20006c98
 800afcc:	20006c9c 	.word	0x20006c9c
 800afd0:	20006c45 	.word	0x20006c45

0800afd4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800afd4:	b480      	push	{r7}
 800afd6:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800afd8:	bf00      	nop
 800afda:	46bd      	mov	sp, r7
 800afdc:	bc80      	pop	{r7}
 800afde:	4770      	bx	lr

0800afe0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b085      	sub	sp, #20
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	60f8      	str	r0, [r7, #12]
 800afe8:	60b9      	str	r1, [r7, #8]
 800afea:	4613      	mov	r3, r2
 800afec:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800afee:	79fb      	ldrb	r3, [r7, #7]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d018      	beq.n	800b026 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d013      	beq.n	800b022 <udp_input_local_match+0x42>
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d00f      	beq.n	800b022 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b002:	4b13      	ldr	r3, [pc, #76]	@ (800b050 <udp_input_local_match+0x70>)
 800b004:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b00a:	d00a      	beq.n	800b022 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681a      	ldr	r2, [r3, #0]
 800b010:	4b0f      	ldr	r3, [pc, #60]	@ (800b050 <udp_input_local_match+0x70>)
 800b012:	695b      	ldr	r3, [r3, #20]
 800b014:	405a      	eors	r2, r3
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	3308      	adds	r3, #8
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d110      	bne.n	800b044 <udp_input_local_match+0x64>
          return 1;
 800b022:	2301      	movs	r3, #1
 800b024:	e00f      	b.n	800b046 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d009      	beq.n	800b040 <udp_input_local_match+0x60>
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d005      	beq.n	800b040 <udp_input_local_match+0x60>
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681a      	ldr	r2, [r3, #0]
 800b038:	4b05      	ldr	r3, [pc, #20]	@ (800b050 <udp_input_local_match+0x70>)
 800b03a:	695b      	ldr	r3, [r3, #20]
 800b03c:	429a      	cmp	r2, r3
 800b03e:	d101      	bne.n	800b044 <udp_input_local_match+0x64>
      return 1;
 800b040:	2301      	movs	r3, #1
 800b042:	e000      	b.n	800b046 <udp_input_local_match+0x66>
    }
  }

  return 0;
 800b044:	2300      	movs	r3, #0
}
 800b046:	4618      	mov	r0, r3
 800b048:	3714      	adds	r7, #20
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bc80      	pop	{r7}
 800b04e:	4770      	bx	lr
 800b050:	200036ec 	.word	0x200036ec

0800b054 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800b054:	b590      	push	{r4, r7, lr}
 800b056:	b08d      	sub	sp, #52	@ 0x34
 800b058:	af02      	add	r7, sp, #8
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800b05e:	2300      	movs	r3, #0
 800b060:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	895b      	ldrh	r3, [r3, #10]
 800b066:	2b07      	cmp	r3, #7
 800b068:	d803      	bhi.n	800b072 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f7fa faa6 	bl	80055bc <pbuf_free>
    goto end;
 800b070:	e0c6      	b.n	800b200 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	685b      	ldr	r3, [r3, #4]
 800b076:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800b078:	4b63      	ldr	r3, [pc, #396]	@ (800b208 <udp_input+0x1b4>)
 800b07a:	695b      	ldr	r3, [r3, #20]
 800b07c:	4a62      	ldr	r2, [pc, #392]	@ (800b208 <udp_input+0x1b4>)
 800b07e:	6812      	ldr	r2, [r2, #0]
 800b080:	4611      	mov	r1, r2
 800b082:	4618      	mov	r0, r3
 800b084:	f001 fbe6 	bl	800c854 <ip4_addr_isbroadcast_u32>
 800b088:	4603      	mov	r3, r0
 800b08a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	881b      	ldrh	r3, [r3, #0]
 800b090:	b29b      	uxth	r3, r3
 800b092:	4618      	mov	r0, r3
 800b094:	f7f9 f981 	bl	800439a <lwip_htons>
 800b098:	4603      	mov	r3, r0
 800b09a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	885b      	ldrh	r3, [r3, #2]
 800b0a0:	b29b      	uxth	r3, r3
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f7f9 f979 	bl	800439a <lwip_htons>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b0b8:	4b54      	ldr	r3, [pc, #336]	@ (800b20c <udp_input+0x1b8>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	627b      	str	r3, [r7, #36]	@ 0x24
 800b0be:	e03b      	b.n	800b138 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800b0c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0c2:	8a5b      	ldrh	r3, [r3, #18]
 800b0c4:	89fa      	ldrh	r2, [r7, #14]
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d131      	bne.n	800b12e <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800b0ca:	7cfb      	ldrb	r3, [r7, #19]
 800b0cc:	461a      	mov	r2, r3
 800b0ce:	6839      	ldr	r1, [r7, #0]
 800b0d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b0d2:	f7ff ff85 	bl	800afe0 <udp_input_local_match>
 800b0d6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d028      	beq.n	800b12e <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800b0dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0de:	7c1b      	ldrb	r3, [r3, #16]
 800b0e0:	f003 0304 	and.w	r3, r3, #4
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d104      	bne.n	800b0f2 <udp_input+0x9e>
 800b0e8:	69fb      	ldr	r3, [r7, #28]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d101      	bne.n	800b0f2 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800b0ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0f0:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800b0f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0f4:	8a9b      	ldrh	r3, [r3, #20]
 800b0f6:	8a3a      	ldrh	r2, [r7, #16]
 800b0f8:	429a      	cmp	r2, r3
 800b0fa:	d118      	bne.n	800b12e <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b0fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0fe:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800b100:	2b00      	cmp	r3, #0
 800b102:	d005      	beq.n	800b110 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800b104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b106:	685a      	ldr	r2, [r3, #4]
 800b108:	4b3f      	ldr	r3, [pc, #252]	@ (800b208 <udp_input+0x1b4>)
 800b10a:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b10c:	429a      	cmp	r2, r3
 800b10e:	d10e      	bne.n	800b12e <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800b110:	6a3b      	ldr	r3, [r7, #32]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d014      	beq.n	800b140 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800b116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b118:	68da      	ldr	r2, [r3, #12]
 800b11a:	6a3b      	ldr	r3, [r7, #32]
 800b11c:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800b11e:	4b3b      	ldr	r3, [pc, #236]	@ (800b20c <udp_input+0x1b8>)
 800b120:	681a      	ldr	r2, [r3, #0]
 800b122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b124:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800b126:	4a39      	ldr	r2, [pc, #228]	@ (800b20c <udp_input+0x1b8>)
 800b128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b12a:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800b12c:	e008      	b.n	800b140 <udp_input+0xec>
      }
    }

    prev = pcb;
 800b12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b130:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b134:	68db      	ldr	r3, [r3, #12]
 800b136:	627b      	str	r3, [r7, #36]	@ 0x24
 800b138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d1c0      	bne.n	800b0c0 <udp_input+0x6c>
 800b13e:	e000      	b.n	800b142 <udp_input+0xee>
        break;
 800b140:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800b142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b144:	2b00      	cmp	r3, #0
 800b146:	d101      	bne.n	800b14c <udp_input+0xf8>
    pcb = uncon_pcb;
 800b148:	69fb      	ldr	r3, [r7, #28]
 800b14a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800b14c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d002      	beq.n	800b158 <udp_input+0x104>
    for_us = 1;
 800b152:	2301      	movs	r3, #1
 800b154:	76fb      	strb	r3, [r7, #27]
 800b156:	e00a      	b.n	800b16e <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	3304      	adds	r3, #4
 800b15c:	681a      	ldr	r2, [r3, #0]
 800b15e:	4b2a      	ldr	r3, [pc, #168]	@ (800b208 <udp_input+0x1b4>)
 800b160:	695b      	ldr	r3, [r3, #20]
 800b162:	429a      	cmp	r2, r3
 800b164:	bf0c      	ite	eq
 800b166:	2301      	moveq	r3, #1
 800b168:	2300      	movne	r3, #0
 800b16a:	b2db      	uxtb	r3, r3
 800b16c:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800b16e:	7efb      	ldrb	r3, [r7, #27]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d042      	beq.n	800b1fa <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800b174:	f06f 0107 	mvn.w	r1, #7
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f7fa f9fb 	bl	8005574 <pbuf_header>
 800b17e:	4603      	mov	r3, r0
 800b180:	2b00      	cmp	r3, #0
 800b182:	d00a      	beq.n	800b19a <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800b184:	4b22      	ldr	r3, [pc, #136]	@ (800b210 <udp_input+0x1bc>)
 800b186:	f240 1255 	movw	r2, #341	@ 0x155
 800b18a:	4922      	ldr	r1, [pc, #136]	@ (800b214 <udp_input+0x1c0>)
 800b18c:	4822      	ldr	r0, [pc, #136]	@ (800b218 <udp_input+0x1c4>)
 800b18e:	f002 fb0d 	bl	800d7ac <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f7fa fa12 	bl	80055bc <pbuf_free>
      goto end;
 800b198:	e032      	b.n	800b200 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 800b19a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d012      	beq.n	800b1c6 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800b1a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1a2:	699b      	ldr	r3, [r3, #24]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d00a      	beq.n	800b1be <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800b1a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1aa:	699c      	ldr	r4, [r3, #24]
 800b1ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ae:	69d8      	ldr	r0, [r3, #28]
 800b1b0:	8a3b      	ldrh	r3, [r7, #16]
 800b1b2:	9300      	str	r3, [sp, #0]
 800b1b4:	4b19      	ldr	r3, [pc, #100]	@ (800b21c <udp_input+0x1c8>)
 800b1b6:	687a      	ldr	r2, [r7, #4]
 800b1b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b1ba:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800b1bc:	e021      	b.n	800b202 <udp_input+0x1ae>
        pbuf_free(p);
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f7fa f9fc 	bl	80055bc <pbuf_free>
        goto end;
 800b1c4:	e01c      	b.n	800b200 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800b1c6:	7cfb      	ldrb	r3, [r7, #19]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d112      	bne.n	800b1f2 <udp_input+0x19e>
 800b1cc:	4b0e      	ldr	r3, [pc, #56]	@ (800b208 <udp_input+0x1b4>)
 800b1ce:	695b      	ldr	r3, [r3, #20]
 800b1d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b1d4:	2be0      	cmp	r3, #224	@ 0xe0
 800b1d6:	d00c      	beq.n	800b1f2 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800b1d8:	4b0b      	ldr	r3, [pc, #44]	@ (800b208 <udp_input+0x1b4>)
 800b1da:	899b      	ldrh	r3, [r3, #12]
 800b1dc:	3308      	adds	r3, #8
 800b1de:	b29b      	uxth	r3, r3
 800b1e0:	b21b      	sxth	r3, r3
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f7fa f9d7 	bl	8005598 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800b1ea:	2103      	movs	r1, #3
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f001 f82f 	bl	800c250 <icmp_dest_unreach>
      pbuf_free(p);
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f7fa f9e2 	bl	80055bc <pbuf_free>
  return;
 800b1f8:	e003      	b.n	800b202 <udp_input+0x1ae>
    pbuf_free(p);
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f7fa f9de 	bl	80055bc <pbuf_free>
  return;
 800b200:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800b202:	372c      	adds	r7, #44	@ 0x2c
 800b204:	46bd      	mov	sp, r7
 800b206:	bd90      	pop	{r4, r7, pc}
 800b208:	200036ec 	.word	0x200036ec
 800b20c:	20006ca4 	.word	0x20006ca4
 800b210:	0800fa84 	.word	0x0800fa84
 800b214:	0800fab4 	.word	0x0800fab4
 800b218:	0800fac8 	.word	0x0800fac8
 800b21c:	200036fc 	.word	0x200036fc

0800b220 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800b220:	b480      	push	{r7}
 800b222:	b085      	sub	sp, #20
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
 800b228:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d01e      	beq.n	800b26e <udp_netif_ip_addr_changed+0x4e>
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d01a      	beq.n	800b26e <udp_netif_ip_addr_changed+0x4e>
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d017      	beq.n	800b26e <udp_netif_ip_addr_changed+0x4e>
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d013      	beq.n	800b26e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b246:	4b0c      	ldr	r3, [pc, #48]	@ (800b278 <udp_netif_ip_addr_changed+0x58>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	60fb      	str	r3, [r7, #12]
 800b24c:	e00c      	b.n	800b268 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681a      	ldr	r2, [r3, #0]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	429a      	cmp	r2, r3
 800b258:	d103      	bne.n	800b262 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	681a      	ldr	r2, [r3, #0]
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	68db      	ldr	r3, [r3, #12]
 800b266:	60fb      	str	r3, [r7, #12]
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d1ef      	bne.n	800b24e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800b26e:	bf00      	nop
 800b270:	3714      	adds	r7, #20
 800b272:	46bd      	mov	sp, r7
 800b274:	bc80      	pop	{r7}
 800b276:	4770      	bx	lr
 800b278:	20006ca4 	.word	0x20006ca4

0800b27c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b082      	sub	sp, #8
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800b284:	4915      	ldr	r1, [pc, #84]	@ (800b2dc <etharp_free_entry+0x60>)
 800b286:	687a      	ldr	r2, [r7, #4]
 800b288:	4613      	mov	r3, r2
 800b28a:	005b      	lsls	r3, r3, #1
 800b28c:	4413      	add	r3, r2
 800b28e:	00db      	lsls	r3, r3, #3
 800b290:	440b      	add	r3, r1
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d013      	beq.n	800b2c0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800b298:	4910      	ldr	r1, [pc, #64]	@ (800b2dc <etharp_free_entry+0x60>)
 800b29a:	687a      	ldr	r2, [r7, #4]
 800b29c:	4613      	mov	r3, r2
 800b29e:	005b      	lsls	r3, r3, #1
 800b2a0:	4413      	add	r3, r2
 800b2a2:	00db      	lsls	r3, r3, #3
 800b2a4:	440b      	add	r3, r1
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f7fa f987 	bl	80055bc <pbuf_free>
    arp_table[i].q = NULL;
 800b2ae:	490b      	ldr	r1, [pc, #44]	@ (800b2dc <etharp_free_entry+0x60>)
 800b2b0:	687a      	ldr	r2, [r7, #4]
 800b2b2:	4613      	mov	r3, r2
 800b2b4:	005b      	lsls	r3, r3, #1
 800b2b6:	4413      	add	r3, r2
 800b2b8:	00db      	lsls	r3, r3, #3
 800b2ba:	440b      	add	r3, r1
 800b2bc:	2200      	movs	r2, #0
 800b2be:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800b2c0:	4906      	ldr	r1, [pc, #24]	@ (800b2dc <etharp_free_entry+0x60>)
 800b2c2:	687a      	ldr	r2, [r7, #4]
 800b2c4:	4613      	mov	r3, r2
 800b2c6:	005b      	lsls	r3, r3, #1
 800b2c8:	4413      	add	r3, r2
 800b2ca:	00db      	lsls	r3, r3, #3
 800b2cc:	440b      	add	r3, r1
 800b2ce:	3314      	adds	r3, #20
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800b2d4:	bf00      	nop
 800b2d6:	3708      	adds	r7, #8
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}
 800b2dc:	20006ca8 	.word	0x20006ca8

0800b2e0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b082      	sub	sp, #8
 800b2e4:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	71fb      	strb	r3, [r7, #7]
 800b2ea:	e096      	b.n	800b41a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800b2ec:	79fa      	ldrb	r2, [r7, #7]
 800b2ee:	494f      	ldr	r1, [pc, #316]	@ (800b42c <etharp_tmr+0x14c>)
 800b2f0:	4613      	mov	r3, r2
 800b2f2:	005b      	lsls	r3, r3, #1
 800b2f4:	4413      	add	r3, r2
 800b2f6:	00db      	lsls	r3, r3, #3
 800b2f8:	440b      	add	r3, r1
 800b2fa:	3314      	adds	r3, #20
 800b2fc:	781b      	ldrb	r3, [r3, #0]
 800b2fe:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 800b300:	79bb      	ldrb	r3, [r7, #6]
 800b302:	2b00      	cmp	r3, #0
 800b304:	f000 8086 	beq.w	800b414 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800b308:	79fa      	ldrb	r2, [r7, #7]
 800b30a:	4948      	ldr	r1, [pc, #288]	@ (800b42c <etharp_tmr+0x14c>)
 800b30c:	4613      	mov	r3, r2
 800b30e:	005b      	lsls	r3, r3, #1
 800b310:	4413      	add	r3, r2
 800b312:	00db      	lsls	r3, r3, #3
 800b314:	440b      	add	r3, r1
 800b316:	3312      	adds	r3, #18
 800b318:	881b      	ldrh	r3, [r3, #0]
 800b31a:	3301      	adds	r3, #1
 800b31c:	b298      	uxth	r0, r3
 800b31e:	4943      	ldr	r1, [pc, #268]	@ (800b42c <etharp_tmr+0x14c>)
 800b320:	4613      	mov	r3, r2
 800b322:	005b      	lsls	r3, r3, #1
 800b324:	4413      	add	r3, r2
 800b326:	00db      	lsls	r3, r3, #3
 800b328:	440b      	add	r3, r1
 800b32a:	3312      	adds	r3, #18
 800b32c:	4602      	mov	r2, r0
 800b32e:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b330:	79fa      	ldrb	r2, [r7, #7]
 800b332:	493e      	ldr	r1, [pc, #248]	@ (800b42c <etharp_tmr+0x14c>)
 800b334:	4613      	mov	r3, r2
 800b336:	005b      	lsls	r3, r3, #1
 800b338:	4413      	add	r3, r2
 800b33a:	00db      	lsls	r3, r3, #3
 800b33c:	440b      	add	r3, r1
 800b33e:	3312      	adds	r3, #18
 800b340:	881b      	ldrh	r3, [r3, #0]
 800b342:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800b346:	d215      	bcs.n	800b374 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b348:	79fa      	ldrb	r2, [r7, #7]
 800b34a:	4938      	ldr	r1, [pc, #224]	@ (800b42c <etharp_tmr+0x14c>)
 800b34c:	4613      	mov	r3, r2
 800b34e:	005b      	lsls	r3, r3, #1
 800b350:	4413      	add	r3, r2
 800b352:	00db      	lsls	r3, r3, #3
 800b354:	440b      	add	r3, r1
 800b356:	3314      	adds	r3, #20
 800b358:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b35a:	2b01      	cmp	r3, #1
 800b35c:	d10f      	bne.n	800b37e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800b35e:	79fa      	ldrb	r2, [r7, #7]
 800b360:	4932      	ldr	r1, [pc, #200]	@ (800b42c <etharp_tmr+0x14c>)
 800b362:	4613      	mov	r3, r2
 800b364:	005b      	lsls	r3, r3, #1
 800b366:	4413      	add	r3, r2
 800b368:	00db      	lsls	r3, r3, #3
 800b36a:	440b      	add	r3, r1
 800b36c:	3312      	adds	r3, #18
 800b36e:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b370:	2b04      	cmp	r3, #4
 800b372:	d904      	bls.n	800b37e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800b374:	79fb      	ldrb	r3, [r7, #7]
 800b376:	4618      	mov	r0, r3
 800b378:	f7ff ff80 	bl	800b27c <etharp_free_entry>
 800b37c:	e04a      	b.n	800b414 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800b37e:	79fa      	ldrb	r2, [r7, #7]
 800b380:	492a      	ldr	r1, [pc, #168]	@ (800b42c <etharp_tmr+0x14c>)
 800b382:	4613      	mov	r3, r2
 800b384:	005b      	lsls	r3, r3, #1
 800b386:	4413      	add	r3, r2
 800b388:	00db      	lsls	r3, r3, #3
 800b38a:	440b      	add	r3, r1
 800b38c:	3314      	adds	r3, #20
 800b38e:	781b      	ldrb	r3, [r3, #0]
 800b390:	2b03      	cmp	r3, #3
 800b392:	d10a      	bne.n	800b3aa <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800b394:	79fa      	ldrb	r2, [r7, #7]
 800b396:	4925      	ldr	r1, [pc, #148]	@ (800b42c <etharp_tmr+0x14c>)
 800b398:	4613      	mov	r3, r2
 800b39a:	005b      	lsls	r3, r3, #1
 800b39c:	4413      	add	r3, r2
 800b39e:	00db      	lsls	r3, r3, #3
 800b3a0:	440b      	add	r3, r1
 800b3a2:	3314      	adds	r3, #20
 800b3a4:	2204      	movs	r2, #4
 800b3a6:	701a      	strb	r2, [r3, #0]
 800b3a8:	e034      	b.n	800b414 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800b3aa:	79fa      	ldrb	r2, [r7, #7]
 800b3ac:	491f      	ldr	r1, [pc, #124]	@ (800b42c <etharp_tmr+0x14c>)
 800b3ae:	4613      	mov	r3, r2
 800b3b0:	005b      	lsls	r3, r3, #1
 800b3b2:	4413      	add	r3, r2
 800b3b4:	00db      	lsls	r3, r3, #3
 800b3b6:	440b      	add	r3, r1
 800b3b8:	3314      	adds	r3, #20
 800b3ba:	781b      	ldrb	r3, [r3, #0]
 800b3bc:	2b04      	cmp	r3, #4
 800b3be:	d10a      	bne.n	800b3d6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800b3c0:	79fa      	ldrb	r2, [r7, #7]
 800b3c2:	491a      	ldr	r1, [pc, #104]	@ (800b42c <etharp_tmr+0x14c>)
 800b3c4:	4613      	mov	r3, r2
 800b3c6:	005b      	lsls	r3, r3, #1
 800b3c8:	4413      	add	r3, r2
 800b3ca:	00db      	lsls	r3, r3, #3
 800b3cc:	440b      	add	r3, r1
 800b3ce:	3314      	adds	r3, #20
 800b3d0:	2202      	movs	r2, #2
 800b3d2:	701a      	strb	r2, [r3, #0]
 800b3d4:	e01e      	b.n	800b414 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800b3d6:	79fa      	ldrb	r2, [r7, #7]
 800b3d8:	4914      	ldr	r1, [pc, #80]	@ (800b42c <etharp_tmr+0x14c>)
 800b3da:	4613      	mov	r3, r2
 800b3dc:	005b      	lsls	r3, r3, #1
 800b3de:	4413      	add	r3, r2
 800b3e0:	00db      	lsls	r3, r3, #3
 800b3e2:	440b      	add	r3, r1
 800b3e4:	3314      	adds	r3, #20
 800b3e6:	781b      	ldrb	r3, [r3, #0]
 800b3e8:	2b01      	cmp	r3, #1
 800b3ea:	d113      	bne.n	800b414 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800b3ec:	79fa      	ldrb	r2, [r7, #7]
 800b3ee:	490f      	ldr	r1, [pc, #60]	@ (800b42c <etharp_tmr+0x14c>)
 800b3f0:	4613      	mov	r3, r2
 800b3f2:	005b      	lsls	r3, r3, #1
 800b3f4:	4413      	add	r3, r2
 800b3f6:	00db      	lsls	r3, r3, #3
 800b3f8:	440b      	add	r3, r1
 800b3fa:	3308      	adds	r3, #8
 800b3fc:	6818      	ldr	r0, [r3, #0]
 800b3fe:	79fa      	ldrb	r2, [r7, #7]
 800b400:	4613      	mov	r3, r2
 800b402:	005b      	lsls	r3, r3, #1
 800b404:	4413      	add	r3, r2
 800b406:	00db      	lsls	r3, r3, #3
 800b408:	4a08      	ldr	r2, [pc, #32]	@ (800b42c <etharp_tmr+0x14c>)
 800b40a:	4413      	add	r3, r2
 800b40c:	3304      	adds	r3, #4
 800b40e:	4619      	mov	r1, r3
 800b410:	f000 fe06 	bl	800c020 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b414:	79fb      	ldrb	r3, [r7, #7]
 800b416:	3301      	adds	r3, #1
 800b418:	71fb      	strb	r3, [r7, #7]
 800b41a:	79fb      	ldrb	r3, [r7, #7]
 800b41c:	2b09      	cmp	r3, #9
 800b41e:	f67f af65 	bls.w	800b2ec <etharp_tmr+0xc>
      }
    }
  }
}
 800b422:	bf00      	nop
 800b424:	bf00      	nop
 800b426:	3708      	adds	r7, #8
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}
 800b42c:	20006ca8 	.word	0x20006ca8

0800b430 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b088      	sub	sp, #32
 800b434:	af00      	add	r7, sp, #0
 800b436:	60f8      	str	r0, [r7, #12]
 800b438:	460b      	mov	r3, r1
 800b43a:	607a      	str	r2, [r7, #4]
 800b43c:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800b43e:	230a      	movs	r3, #10
 800b440:	77fb      	strb	r3, [r7, #31]
 800b442:	230a      	movs	r3, #10
 800b444:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 800b446:	230a      	movs	r3, #10
 800b448:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 800b44a:	2300      	movs	r3, #0
 800b44c:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800b44e:	230a      	movs	r3, #10
 800b450:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800b452:	2300      	movs	r3, #0
 800b454:	833b      	strh	r3, [r7, #24]
 800b456:	2300      	movs	r3, #0
 800b458:	82fb      	strh	r3, [r7, #22]
 800b45a:	2300      	movs	r3, #0
 800b45c:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b45e:	2300      	movs	r3, #0
 800b460:	773b      	strb	r3, [r7, #28]
 800b462:	e093      	b.n	800b58c <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 800b464:	7f3a      	ldrb	r2, [r7, #28]
 800b466:	4990      	ldr	r1, [pc, #576]	@ (800b6a8 <etharp_find_entry+0x278>)
 800b468:	4613      	mov	r3, r2
 800b46a:	005b      	lsls	r3, r3, #1
 800b46c:	4413      	add	r3, r2
 800b46e:	00db      	lsls	r3, r3, #3
 800b470:	440b      	add	r3, r1
 800b472:	3314      	adds	r3, #20
 800b474:	781b      	ldrb	r3, [r3, #0]
 800b476:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800b478:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b47c:	2b0a      	cmp	r3, #10
 800b47e:	d105      	bne.n	800b48c <etharp_find_entry+0x5c>
 800b480:	7cfb      	ldrb	r3, [r7, #19]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d102      	bne.n	800b48c <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800b486:	7f3b      	ldrb	r3, [r7, #28]
 800b488:	777b      	strb	r3, [r7, #29]
 800b48a:	e07c      	b.n	800b586 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 800b48c:	7cfb      	ldrb	r3, [r7, #19]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d079      	beq.n	800b586 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800b492:	7cfb      	ldrb	r3, [r7, #19]
 800b494:	2b01      	cmp	r3, #1
 800b496:	d009      	beq.n	800b4ac <etharp_find_entry+0x7c>
 800b498:	7cfb      	ldrb	r3, [r7, #19]
 800b49a:	2b01      	cmp	r3, #1
 800b49c:	d806      	bhi.n	800b4ac <etharp_find_entry+0x7c>
 800b49e:	4b83      	ldr	r3, [pc, #524]	@ (800b6ac <etharp_find_entry+0x27c>)
 800b4a0:	f240 1225 	movw	r2, #293	@ 0x125
 800b4a4:	4982      	ldr	r1, [pc, #520]	@ (800b6b0 <etharp_find_entry+0x280>)
 800b4a6:	4883      	ldr	r0, [pc, #524]	@ (800b6b4 <etharp_find_entry+0x284>)
 800b4a8:	f002 f980 	bl	800d7ac <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d00f      	beq.n	800b4d2 <etharp_find_entry+0xa2>
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	6819      	ldr	r1, [r3, #0]
 800b4b6:	7f3a      	ldrb	r2, [r7, #28]
 800b4b8:	487b      	ldr	r0, [pc, #492]	@ (800b6a8 <etharp_find_entry+0x278>)
 800b4ba:	4613      	mov	r3, r2
 800b4bc:	005b      	lsls	r3, r3, #1
 800b4be:	4413      	add	r3, r2
 800b4c0:	00db      	lsls	r3, r3, #3
 800b4c2:	4403      	add	r3, r0
 800b4c4:	3304      	adds	r3, #4
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	4299      	cmp	r1, r3
 800b4ca:	d102      	bne.n	800b4d2 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800b4cc:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800b4d0:	e0e5      	b.n	800b69e <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800b4d2:	7cfb      	ldrb	r3, [r7, #19]
 800b4d4:	2b01      	cmp	r3, #1
 800b4d6:	d13b      	bne.n	800b550 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800b4d8:	7f3a      	ldrb	r2, [r7, #28]
 800b4da:	4973      	ldr	r1, [pc, #460]	@ (800b6a8 <etharp_find_entry+0x278>)
 800b4dc:	4613      	mov	r3, r2
 800b4de:	005b      	lsls	r3, r3, #1
 800b4e0:	4413      	add	r3, r2
 800b4e2:	00db      	lsls	r3, r3, #3
 800b4e4:	440b      	add	r3, r1
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d018      	beq.n	800b51e <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 800b4ec:	7f3a      	ldrb	r2, [r7, #28]
 800b4ee:	496e      	ldr	r1, [pc, #440]	@ (800b6a8 <etharp_find_entry+0x278>)
 800b4f0:	4613      	mov	r3, r2
 800b4f2:	005b      	lsls	r3, r3, #1
 800b4f4:	4413      	add	r3, r2
 800b4f6:	00db      	lsls	r3, r3, #3
 800b4f8:	440b      	add	r3, r1
 800b4fa:	3312      	adds	r3, #18
 800b4fc:	881b      	ldrh	r3, [r3, #0]
 800b4fe:	8b3a      	ldrh	r2, [r7, #24]
 800b500:	429a      	cmp	r2, r3
 800b502:	d840      	bhi.n	800b586 <etharp_find_entry+0x156>
            old_queue = i;
 800b504:	7f3b      	ldrb	r3, [r7, #28]
 800b506:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 800b508:	7f3a      	ldrb	r2, [r7, #28]
 800b50a:	4967      	ldr	r1, [pc, #412]	@ (800b6a8 <etharp_find_entry+0x278>)
 800b50c:	4613      	mov	r3, r2
 800b50e:	005b      	lsls	r3, r3, #1
 800b510:	4413      	add	r3, r2
 800b512:	00db      	lsls	r3, r3, #3
 800b514:	440b      	add	r3, r1
 800b516:	3312      	adds	r3, #18
 800b518:	881b      	ldrh	r3, [r3, #0]
 800b51a:	833b      	strh	r3, [r7, #24]
 800b51c:	e033      	b.n	800b586 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800b51e:	7f3a      	ldrb	r2, [r7, #28]
 800b520:	4961      	ldr	r1, [pc, #388]	@ (800b6a8 <etharp_find_entry+0x278>)
 800b522:	4613      	mov	r3, r2
 800b524:	005b      	lsls	r3, r3, #1
 800b526:	4413      	add	r3, r2
 800b528:	00db      	lsls	r3, r3, #3
 800b52a:	440b      	add	r3, r1
 800b52c:	3312      	adds	r3, #18
 800b52e:	881b      	ldrh	r3, [r3, #0]
 800b530:	8afa      	ldrh	r2, [r7, #22]
 800b532:	429a      	cmp	r2, r3
 800b534:	d827      	bhi.n	800b586 <etharp_find_entry+0x156>
            old_pending = i;
 800b536:	7f3b      	ldrb	r3, [r7, #28]
 800b538:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 800b53a:	7f3a      	ldrb	r2, [r7, #28]
 800b53c:	495a      	ldr	r1, [pc, #360]	@ (800b6a8 <etharp_find_entry+0x278>)
 800b53e:	4613      	mov	r3, r2
 800b540:	005b      	lsls	r3, r3, #1
 800b542:	4413      	add	r3, r2
 800b544:	00db      	lsls	r3, r3, #3
 800b546:	440b      	add	r3, r1
 800b548:	3312      	adds	r3, #18
 800b54a:	881b      	ldrh	r3, [r3, #0]
 800b54c:	82fb      	strh	r3, [r7, #22]
 800b54e:	e01a      	b.n	800b586 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800b550:	7cfb      	ldrb	r3, [r7, #19]
 800b552:	2b01      	cmp	r3, #1
 800b554:	d917      	bls.n	800b586 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800b556:	7f3a      	ldrb	r2, [r7, #28]
 800b558:	4953      	ldr	r1, [pc, #332]	@ (800b6a8 <etharp_find_entry+0x278>)
 800b55a:	4613      	mov	r3, r2
 800b55c:	005b      	lsls	r3, r3, #1
 800b55e:	4413      	add	r3, r2
 800b560:	00db      	lsls	r3, r3, #3
 800b562:	440b      	add	r3, r1
 800b564:	3312      	adds	r3, #18
 800b566:	881b      	ldrh	r3, [r3, #0]
 800b568:	8aba      	ldrh	r2, [r7, #20]
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d80b      	bhi.n	800b586 <etharp_find_entry+0x156>
            old_stable = i;
 800b56e:	7f3b      	ldrb	r3, [r7, #28]
 800b570:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800b572:	7f3a      	ldrb	r2, [r7, #28]
 800b574:	494c      	ldr	r1, [pc, #304]	@ (800b6a8 <etharp_find_entry+0x278>)
 800b576:	4613      	mov	r3, r2
 800b578:	005b      	lsls	r3, r3, #1
 800b57a:	4413      	add	r3, r2
 800b57c:	00db      	lsls	r3, r3, #3
 800b57e:	440b      	add	r3, r1
 800b580:	3312      	adds	r3, #18
 800b582:	881b      	ldrh	r3, [r3, #0]
 800b584:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b586:	7f3b      	ldrb	r3, [r7, #28]
 800b588:	3301      	adds	r3, #1
 800b58a:	773b      	strb	r3, [r7, #28]
 800b58c:	7f3b      	ldrb	r3, [r7, #28]
 800b58e:	2b09      	cmp	r3, #9
 800b590:	f67f af68 	bls.w	800b464 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800b594:	7afb      	ldrb	r3, [r7, #11]
 800b596:	f003 0302 	and.w	r3, r3, #2
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d108      	bne.n	800b5b0 <etharp_find_entry+0x180>
 800b59e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b5a2:	2b0a      	cmp	r3, #10
 800b5a4:	d107      	bne.n	800b5b6 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800b5a6:	7afb      	ldrb	r3, [r7, #11]
 800b5a8:	f003 0301 	and.w	r3, r3, #1
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d102      	bne.n	800b5b6 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800b5b0:	f04f 33ff 	mov.w	r3, #4294967295
 800b5b4:	e073      	b.n	800b69e <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800b5b6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b5ba:	2b09      	cmp	r3, #9
 800b5bc:	dc02      	bgt.n	800b5c4 <etharp_find_entry+0x194>
    i = empty;
 800b5be:	7f7b      	ldrb	r3, [r7, #29]
 800b5c0:	773b      	strb	r3, [r7, #28]
 800b5c2:	e036      	b.n	800b632 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800b5c4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800b5c8:	2b09      	cmp	r3, #9
 800b5ca:	dc13      	bgt.n	800b5f4 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 800b5cc:	7fbb      	ldrb	r3, [r7, #30]
 800b5ce:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800b5d0:	7f3a      	ldrb	r2, [r7, #28]
 800b5d2:	4935      	ldr	r1, [pc, #212]	@ (800b6a8 <etharp_find_entry+0x278>)
 800b5d4:	4613      	mov	r3, r2
 800b5d6:	005b      	lsls	r3, r3, #1
 800b5d8:	4413      	add	r3, r2
 800b5da:	00db      	lsls	r3, r3, #3
 800b5dc:	440b      	add	r3, r1
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d018      	beq.n	800b616 <etharp_find_entry+0x1e6>
 800b5e4:	4b31      	ldr	r3, [pc, #196]	@ (800b6ac <etharp_find_entry+0x27c>)
 800b5e6:	f240 126f 	movw	r2, #367	@ 0x16f
 800b5ea:	4933      	ldr	r1, [pc, #204]	@ (800b6b8 <etharp_find_entry+0x288>)
 800b5ec:	4831      	ldr	r0, [pc, #196]	@ (800b6b4 <etharp_find_entry+0x284>)
 800b5ee:	f002 f8dd 	bl	800d7ac <iprintf>
 800b5f2:	e010      	b.n	800b616 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800b5f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b5f8:	2b09      	cmp	r3, #9
 800b5fa:	dc02      	bgt.n	800b602 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 800b5fc:	7ffb      	ldrb	r3, [r7, #31]
 800b5fe:	773b      	strb	r3, [r7, #28]
 800b600:	e009      	b.n	800b616 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800b602:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b606:	2b09      	cmp	r3, #9
 800b608:	dc02      	bgt.n	800b610 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800b60a:	7efb      	ldrb	r3, [r7, #27]
 800b60c:	773b      	strb	r3, [r7, #28]
 800b60e:	e002      	b.n	800b616 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800b610:	f04f 33ff 	mov.w	r3, #4294967295
 800b614:	e043      	b.n	800b69e <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b616:	7f3b      	ldrb	r3, [r7, #28]
 800b618:	2b09      	cmp	r3, #9
 800b61a:	d906      	bls.n	800b62a <etharp_find_entry+0x1fa>
 800b61c:	4b23      	ldr	r3, [pc, #140]	@ (800b6ac <etharp_find_entry+0x27c>)
 800b61e:	f240 1281 	movw	r2, #385	@ 0x181
 800b622:	4926      	ldr	r1, [pc, #152]	@ (800b6bc <etharp_find_entry+0x28c>)
 800b624:	4823      	ldr	r0, [pc, #140]	@ (800b6b4 <etharp_find_entry+0x284>)
 800b626:	f002 f8c1 	bl	800d7ac <iprintf>
    etharp_free_entry(i);
 800b62a:	7f3b      	ldrb	r3, [r7, #28]
 800b62c:	4618      	mov	r0, r3
 800b62e:	f7ff fe25 	bl	800b27c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b632:	7f3b      	ldrb	r3, [r7, #28]
 800b634:	2b09      	cmp	r3, #9
 800b636:	d906      	bls.n	800b646 <etharp_find_entry+0x216>
 800b638:	4b1c      	ldr	r3, [pc, #112]	@ (800b6ac <etharp_find_entry+0x27c>)
 800b63a:	f240 1285 	movw	r2, #389	@ 0x185
 800b63e:	491f      	ldr	r1, [pc, #124]	@ (800b6bc <etharp_find_entry+0x28c>)
 800b640:	481c      	ldr	r0, [pc, #112]	@ (800b6b4 <etharp_find_entry+0x284>)
 800b642:	f002 f8b3 	bl	800d7ac <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800b646:	7f3a      	ldrb	r2, [r7, #28]
 800b648:	4917      	ldr	r1, [pc, #92]	@ (800b6a8 <etharp_find_entry+0x278>)
 800b64a:	4613      	mov	r3, r2
 800b64c:	005b      	lsls	r3, r3, #1
 800b64e:	4413      	add	r3, r2
 800b650:	00db      	lsls	r3, r3, #3
 800b652:	440b      	add	r3, r1
 800b654:	3314      	adds	r3, #20
 800b656:	781b      	ldrb	r3, [r3, #0]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d006      	beq.n	800b66a <etharp_find_entry+0x23a>
 800b65c:	4b13      	ldr	r3, [pc, #76]	@ (800b6ac <etharp_find_entry+0x27c>)
 800b65e:	f44f 72c3 	mov.w	r2, #390	@ 0x186
 800b662:	4917      	ldr	r1, [pc, #92]	@ (800b6c0 <etharp_find_entry+0x290>)
 800b664:	4813      	ldr	r0, [pc, #76]	@ (800b6b4 <etharp_find_entry+0x284>)
 800b666:	f002 f8a1 	bl	800d7ac <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d00a      	beq.n	800b686 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800b670:	7f3a      	ldrb	r2, [r7, #28]
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	6819      	ldr	r1, [r3, #0]
 800b676:	480c      	ldr	r0, [pc, #48]	@ (800b6a8 <etharp_find_entry+0x278>)
 800b678:	4613      	mov	r3, r2
 800b67a:	005b      	lsls	r3, r3, #1
 800b67c:	4413      	add	r3, r2
 800b67e:	00db      	lsls	r3, r3, #3
 800b680:	4403      	add	r3, r0
 800b682:	3304      	adds	r3, #4
 800b684:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800b686:	7f3a      	ldrb	r2, [r7, #28]
 800b688:	4907      	ldr	r1, [pc, #28]	@ (800b6a8 <etharp_find_entry+0x278>)
 800b68a:	4613      	mov	r3, r2
 800b68c:	005b      	lsls	r3, r3, #1
 800b68e:	4413      	add	r3, r2
 800b690:	00db      	lsls	r3, r3, #3
 800b692:	440b      	add	r3, r1
 800b694:	3312      	adds	r3, #18
 800b696:	2200      	movs	r2, #0
 800b698:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800b69a:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3720      	adds	r7, #32
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
 800b6a6:	bf00      	nop
 800b6a8:	20006ca8 	.word	0x20006ca8
 800b6ac:	0800fb20 	.word	0x0800fb20
 800b6b0:	0800fb58 	.word	0x0800fb58
 800b6b4:	0800fb98 	.word	0x0800fb98
 800b6b8:	0800fbc0 	.word	0x0800fbc0
 800b6bc:	0800fbd8 	.word	0x0800fbd8
 800b6c0:	0800fbec 	.word	0x0800fbec

0800b6c4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b088      	sub	sp, #32
 800b6c8:	af02      	add	r7, sp, #8
 800b6ca:	60f8      	str	r0, [r7, #12]
 800b6cc:	60b9      	str	r1, [r7, #8]
 800b6ce:	607a      	str	r2, [r7, #4]
 800b6d0:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b6d8:	2b06      	cmp	r3, #6
 800b6da:	d006      	beq.n	800b6ea <etharp_update_arp_entry+0x26>
 800b6dc:	4b48      	ldr	r3, [pc, #288]	@ (800b800 <etharp_update_arp_entry+0x13c>)
 800b6de:	f240 12ab 	movw	r2, #427	@ 0x1ab
 800b6e2:	4948      	ldr	r1, [pc, #288]	@ (800b804 <etharp_update_arp_entry+0x140>)
 800b6e4:	4848      	ldr	r0, [pc, #288]	@ (800b808 <etharp_update_arp_entry+0x144>)
 800b6e6:	f002 f861 	bl	800d7ac <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d012      	beq.n	800b716 <etharp_update_arp_entry+0x52>
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d00e      	beq.n	800b716 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	68f9      	ldr	r1, [r7, #12]
 800b6fe:	4618      	mov	r0, r3
 800b700:	f001 f8a8 	bl	800c854 <ip4_addr_isbroadcast_u32>
 800b704:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800b706:	2b00      	cmp	r3, #0
 800b708:	d105      	bne.n	800b716 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b712:	2be0      	cmp	r3, #224	@ 0xe0
 800b714:	d102      	bne.n	800b71c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800b716:	f06f 030f 	mvn.w	r3, #15
 800b71a:	e06c      	b.n	800b7f6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800b71c:	78fb      	ldrb	r3, [r7, #3]
 800b71e:	68fa      	ldr	r2, [r7, #12]
 800b720:	4619      	mov	r1, r3
 800b722:	68b8      	ldr	r0, [r7, #8]
 800b724:	f7ff fe84 	bl	800b430 <etharp_find_entry>
 800b728:	4603      	mov	r3, r0
 800b72a:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 800b72c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b730:	2b00      	cmp	r3, #0
 800b732:	da02      	bge.n	800b73a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800b734:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b738:	e05d      	b.n	800b7f6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800b73a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b73e:	4933      	ldr	r1, [pc, #204]	@ (800b80c <etharp_update_arp_entry+0x148>)
 800b740:	4613      	mov	r3, r2
 800b742:	005b      	lsls	r3, r3, #1
 800b744:	4413      	add	r3, r2
 800b746:	00db      	lsls	r3, r3, #3
 800b748:	440b      	add	r3, r1
 800b74a:	3314      	adds	r3, #20
 800b74c:	2202      	movs	r2, #2
 800b74e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800b750:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b754:	492d      	ldr	r1, [pc, #180]	@ (800b80c <etharp_update_arp_entry+0x148>)
 800b756:	4613      	mov	r3, r2
 800b758:	005b      	lsls	r3, r3, #1
 800b75a:	4413      	add	r3, r2
 800b75c:	00db      	lsls	r3, r3, #3
 800b75e:	440b      	add	r3, r1
 800b760:	3308      	adds	r3, #8
 800b762:	68fa      	ldr	r2, [r7, #12]
 800b764:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800b766:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b76a:	4613      	mov	r3, r2
 800b76c:	005b      	lsls	r3, r3, #1
 800b76e:	4413      	add	r3, r2
 800b770:	00db      	lsls	r3, r3, #3
 800b772:	3308      	adds	r3, #8
 800b774:	4a25      	ldr	r2, [pc, #148]	@ (800b80c <etharp_update_arp_entry+0x148>)
 800b776:	4413      	add	r3, r2
 800b778:	3304      	adds	r3, #4
 800b77a:	2206      	movs	r2, #6
 800b77c:	6879      	ldr	r1, [r7, #4]
 800b77e:	4618      	mov	r0, r3
 800b780:	f002 f8ef 	bl	800d962 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800b784:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b788:	4920      	ldr	r1, [pc, #128]	@ (800b80c <etharp_update_arp_entry+0x148>)
 800b78a:	4613      	mov	r3, r2
 800b78c:	005b      	lsls	r3, r3, #1
 800b78e:	4413      	add	r3, r2
 800b790:	00db      	lsls	r3, r3, #3
 800b792:	440b      	add	r3, r1
 800b794:	3312      	adds	r3, #18
 800b796:	2200      	movs	r2, #0
 800b798:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800b79a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b79e:	491b      	ldr	r1, [pc, #108]	@ (800b80c <etharp_update_arp_entry+0x148>)
 800b7a0:	4613      	mov	r3, r2
 800b7a2:	005b      	lsls	r3, r3, #1
 800b7a4:	4413      	add	r3, r2
 800b7a6:	00db      	lsls	r3, r3, #3
 800b7a8:	440b      	add	r3, r1
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d021      	beq.n	800b7f4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800b7b0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b7b4:	4915      	ldr	r1, [pc, #84]	@ (800b80c <etharp_update_arp_entry+0x148>)
 800b7b6:	4613      	mov	r3, r2
 800b7b8:	005b      	lsls	r3, r3, #1
 800b7ba:	4413      	add	r3, r2
 800b7bc:	00db      	lsls	r3, r3, #3
 800b7be:	440b      	add	r3, r1
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800b7c4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b7c8:	4910      	ldr	r1, [pc, #64]	@ (800b80c <etharp_update_arp_entry+0x148>)
 800b7ca:	4613      	mov	r3, r2
 800b7cc:	005b      	lsls	r3, r3, #1
 800b7ce:	4413      	add	r3, r2
 800b7d0:	00db      	lsls	r3, r3, #3
 800b7d2:	440b      	add	r3, r1
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 800b7de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b7e2:	9300      	str	r3, [sp, #0]
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6939      	ldr	r1, [r7, #16]
 800b7e8:	68f8      	ldr	r0, [r7, #12]
 800b7ea:	f001 fed5 	bl	800d598 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800b7ee:	6938      	ldr	r0, [r7, #16]
 800b7f0:	f7f9 fee4 	bl	80055bc <pbuf_free>
  }
  return ERR_OK;
 800b7f4:	2300      	movs	r3, #0
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3718      	adds	r7, #24
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}
 800b7fe:	bf00      	nop
 800b800:	0800fb20 	.word	0x0800fb20
 800b804:	0800fc18 	.word	0x0800fc18
 800b808:	0800fb98 	.word	0x0800fb98
 800b80c:	20006ca8 	.word	0x20006ca8

0800b810 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800b810:	b5b0      	push	{r4, r5, r7, lr}
 800b812:	b08a      	sub	sp, #40	@ 0x28
 800b814:	af04      	add	r7, sp, #16
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d107      	bne.n	800b830 <etharp_input+0x20>
 800b820:	4b3d      	ldr	r3, [pc, #244]	@ (800b918 <etharp_input+0x108>)
 800b822:	f44f 7222 	mov.w	r2, #648	@ 0x288
 800b826:	493d      	ldr	r1, [pc, #244]	@ (800b91c <etharp_input+0x10c>)
 800b828:	483d      	ldr	r0, [pc, #244]	@ (800b920 <etharp_input+0x110>)
 800b82a:	f001 ffbf 	bl	800d7ac <iprintf>
 800b82e:	e06f      	b.n	800b910 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	685b      	ldr	r3, [r3, #4]
 800b834:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	881b      	ldrh	r3, [r3, #0]
 800b83a:	b29b      	uxth	r3, r3
 800b83c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b840:	d10c      	bne.n	800b85c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800b846:	2b06      	cmp	r3, #6
 800b848:	d108      	bne.n	800b85c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b84e:	2b04      	cmp	r3, #4
 800b850:	d104      	bne.n	800b85c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	885b      	ldrh	r3, [r3, #2]
 800b856:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b858:	2b08      	cmp	r3, #8
 800b85a:	d003      	beq.n	800b864 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f7f9 fead 	bl	80055bc <pbuf_free>
    return;
 800b862:	e055      	b.n	800b910 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	330e      	adds	r3, #14
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	3318      	adds	r3, #24
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	3304      	adds	r3, #4
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d102      	bne.n	800b884 <etharp_input+0x74>
    for_us = 0;
 800b87e:	2300      	movs	r3, #0
 800b880:	75fb      	strb	r3, [r7, #23]
 800b882:	e009      	b.n	800b898 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800b884:	68ba      	ldr	r2, [r7, #8]
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	3304      	adds	r3, #4
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	429a      	cmp	r2, r3
 800b88e:	bf0c      	ite	eq
 800b890:	2301      	moveq	r3, #1
 800b892:	2300      	movne	r3, #0
 800b894:	b2db      	uxtb	r3, r3
 800b896:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	f103 0208 	add.w	r2, r3, #8
 800b89e:	7dfb      	ldrb	r3, [r7, #23]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d001      	beq.n	800b8a8 <etharp_input+0x98>
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	e000      	b.n	800b8aa <etharp_input+0x9a>
 800b8a8:	2302      	movs	r3, #2
 800b8aa:	f107 010c 	add.w	r1, r7, #12
 800b8ae:	6838      	ldr	r0, [r7, #0]
 800b8b0:	f7ff ff08 	bl	800b6c4 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800b8b4:	693b      	ldr	r3, [r7, #16]
 800b8b6:	88db      	ldrh	r3, [r3, #6]
 800b8b8:	b29b      	uxth	r3, r3
 800b8ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b8be:	d003      	beq.n	800b8c8 <etharp_input+0xb8>
 800b8c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b8c4:	d01e      	beq.n	800b904 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 800b8c6:	e020      	b.n	800b90a <etharp_input+0xfa>
    if (for_us) {
 800b8c8:	7dfb      	ldrb	r3, [r7, #23]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d01c      	beq.n	800b908 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	f103 0029 	add.w	r0, r3, #41	@ 0x29
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	f103 0529 	add.w	r5, r3, #41	@ 0x29
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800b8e4:	693a      	ldr	r2, [r7, #16]
 800b8e6:	3208      	adds	r2, #8
      etharp_raw(netif,
 800b8e8:	2102      	movs	r1, #2
 800b8ea:	9103      	str	r1, [sp, #12]
 800b8ec:	f107 010c 	add.w	r1, r7, #12
 800b8f0:	9102      	str	r1, [sp, #8]
 800b8f2:	9201      	str	r2, [sp, #4]
 800b8f4:	9300      	str	r3, [sp, #0]
 800b8f6:	462b      	mov	r3, r5
 800b8f8:	4622      	mov	r2, r4
 800b8fa:	4601      	mov	r1, r0
 800b8fc:	6838      	ldr	r0, [r7, #0]
 800b8fe:	f000 fae1 	bl	800bec4 <etharp_raw>
    break;
 800b902:	e001      	b.n	800b908 <etharp_input+0xf8>
    break;
 800b904:	bf00      	nop
 800b906:	e000      	b.n	800b90a <etharp_input+0xfa>
    break;
 800b908:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f7f9 fe56 	bl	80055bc <pbuf_free>
}
 800b910:	3718      	adds	r7, #24
 800b912:	46bd      	mov	sp, r7
 800b914:	bdb0      	pop	{r4, r5, r7, pc}
 800b916:	bf00      	nop
 800b918:	0800fb20 	.word	0x0800fb20
 800b91c:	0800fc70 	.word	0x0800fc70
 800b920:	0800fb98 	.word	0x0800fb98

0800b924 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b086      	sub	sp, #24
 800b928:	af02      	add	r7, sp, #8
 800b92a:	60f8      	str	r0, [r7, #12]
 800b92c:	60b9      	str	r1, [r7, #8]
 800b92e:	4613      	mov	r3, r2
 800b930:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800b932:	79fa      	ldrb	r2, [r7, #7]
 800b934:	4944      	ldr	r1, [pc, #272]	@ (800ba48 <etharp_output_to_arp_index+0x124>)
 800b936:	4613      	mov	r3, r2
 800b938:	005b      	lsls	r3, r3, #1
 800b93a:	4413      	add	r3, r2
 800b93c:	00db      	lsls	r3, r3, #3
 800b93e:	440b      	add	r3, r1
 800b940:	3314      	adds	r3, #20
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	2b01      	cmp	r3, #1
 800b946:	d806      	bhi.n	800b956 <etharp_output_to_arp_index+0x32>
 800b948:	4b40      	ldr	r3, [pc, #256]	@ (800ba4c <etharp_output_to_arp_index+0x128>)
 800b94a:	f44f 723b 	mov.w	r2, #748	@ 0x2ec
 800b94e:	4940      	ldr	r1, [pc, #256]	@ (800ba50 <etharp_output_to_arp_index+0x12c>)
 800b950:	4840      	ldr	r0, [pc, #256]	@ (800ba54 <etharp_output_to_arp_index+0x130>)
 800b952:	f001 ff2b 	bl	800d7ac <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800b956:	79fa      	ldrb	r2, [r7, #7]
 800b958:	493b      	ldr	r1, [pc, #236]	@ (800ba48 <etharp_output_to_arp_index+0x124>)
 800b95a:	4613      	mov	r3, r2
 800b95c:	005b      	lsls	r3, r3, #1
 800b95e:	4413      	add	r3, r2
 800b960:	00db      	lsls	r3, r3, #3
 800b962:	440b      	add	r3, r1
 800b964:	3314      	adds	r3, #20
 800b966:	781b      	ldrb	r3, [r3, #0]
 800b968:	2b02      	cmp	r3, #2
 800b96a:	d153      	bne.n	800ba14 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800b96c:	79fa      	ldrb	r2, [r7, #7]
 800b96e:	4936      	ldr	r1, [pc, #216]	@ (800ba48 <etharp_output_to_arp_index+0x124>)
 800b970:	4613      	mov	r3, r2
 800b972:	005b      	lsls	r3, r3, #1
 800b974:	4413      	add	r3, r2
 800b976:	00db      	lsls	r3, r3, #3
 800b978:	440b      	add	r3, r1
 800b97a:	3312      	adds	r3, #18
 800b97c:	881b      	ldrh	r3, [r3, #0]
 800b97e:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800b982:	d919      	bls.n	800b9b8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800b984:	79fa      	ldrb	r2, [r7, #7]
 800b986:	4613      	mov	r3, r2
 800b988:	005b      	lsls	r3, r3, #1
 800b98a:	4413      	add	r3, r2
 800b98c:	00db      	lsls	r3, r3, #3
 800b98e:	4a2e      	ldr	r2, [pc, #184]	@ (800ba48 <etharp_output_to_arp_index+0x124>)
 800b990:	4413      	add	r3, r2
 800b992:	3304      	adds	r3, #4
 800b994:	4619      	mov	r1, r3
 800b996:	68f8      	ldr	r0, [r7, #12]
 800b998:	f000 fb42 	bl	800c020 <etharp_request>
 800b99c:	4603      	mov	r3, r0
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d138      	bne.n	800ba14 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b9a2:	79fa      	ldrb	r2, [r7, #7]
 800b9a4:	4928      	ldr	r1, [pc, #160]	@ (800ba48 <etharp_output_to_arp_index+0x124>)
 800b9a6:	4613      	mov	r3, r2
 800b9a8:	005b      	lsls	r3, r3, #1
 800b9aa:	4413      	add	r3, r2
 800b9ac:	00db      	lsls	r3, r3, #3
 800b9ae:	440b      	add	r3, r1
 800b9b0:	3314      	adds	r3, #20
 800b9b2:	2203      	movs	r2, #3
 800b9b4:	701a      	strb	r2, [r3, #0]
 800b9b6:	e02d      	b.n	800ba14 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800b9b8:	79fa      	ldrb	r2, [r7, #7]
 800b9ba:	4923      	ldr	r1, [pc, #140]	@ (800ba48 <etharp_output_to_arp_index+0x124>)
 800b9bc:	4613      	mov	r3, r2
 800b9be:	005b      	lsls	r3, r3, #1
 800b9c0:	4413      	add	r3, r2
 800b9c2:	00db      	lsls	r3, r3, #3
 800b9c4:	440b      	add	r3, r1
 800b9c6:	3312      	adds	r3, #18
 800b9c8:	881b      	ldrh	r3, [r3, #0]
 800b9ca:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800b9ce:	d321      	bcc.n	800ba14 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800b9d0:	79fa      	ldrb	r2, [r7, #7]
 800b9d2:	4613      	mov	r3, r2
 800b9d4:	005b      	lsls	r3, r3, #1
 800b9d6:	4413      	add	r3, r2
 800b9d8:	00db      	lsls	r3, r3, #3
 800b9da:	4a1b      	ldr	r2, [pc, #108]	@ (800ba48 <etharp_output_to_arp_index+0x124>)
 800b9dc:	4413      	add	r3, r2
 800b9de:	1d19      	adds	r1, r3, #4
 800b9e0:	79fa      	ldrb	r2, [r7, #7]
 800b9e2:	4613      	mov	r3, r2
 800b9e4:	005b      	lsls	r3, r3, #1
 800b9e6:	4413      	add	r3, r2
 800b9e8:	00db      	lsls	r3, r3, #3
 800b9ea:	3308      	adds	r3, #8
 800b9ec:	4a16      	ldr	r2, [pc, #88]	@ (800ba48 <etharp_output_to_arp_index+0x124>)
 800b9ee:	4413      	add	r3, r2
 800b9f0:	3304      	adds	r3, #4
 800b9f2:	461a      	mov	r2, r3
 800b9f4:	68f8      	ldr	r0, [r7, #12]
 800b9f6:	f000 faf1 	bl	800bfdc <etharp_request_dst>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d109      	bne.n	800ba14 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ba00:	79fa      	ldrb	r2, [r7, #7]
 800ba02:	4911      	ldr	r1, [pc, #68]	@ (800ba48 <etharp_output_to_arp_index+0x124>)
 800ba04:	4613      	mov	r3, r2
 800ba06:	005b      	lsls	r3, r3, #1
 800ba08:	4413      	add	r3, r2
 800ba0a:	00db      	lsls	r3, r3, #3
 800ba0c:	440b      	add	r3, r1
 800ba0e:	3314      	adds	r3, #20
 800ba10:	2203      	movs	r2, #3
 800ba12:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	f103 0129 	add.w	r1, r3, #41	@ 0x29
 800ba1a:	79fa      	ldrb	r2, [r7, #7]
 800ba1c:	4613      	mov	r3, r2
 800ba1e:	005b      	lsls	r3, r3, #1
 800ba20:	4413      	add	r3, r2
 800ba22:	00db      	lsls	r3, r3, #3
 800ba24:	3308      	adds	r3, #8
 800ba26:	4a08      	ldr	r2, [pc, #32]	@ (800ba48 <etharp_output_to_arp_index+0x124>)
 800ba28:	4413      	add	r3, r2
 800ba2a:	3304      	adds	r3, #4
 800ba2c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ba30:	9200      	str	r2, [sp, #0]
 800ba32:	460a      	mov	r2, r1
 800ba34:	68b9      	ldr	r1, [r7, #8]
 800ba36:	68f8      	ldr	r0, [r7, #12]
 800ba38:	f001 fdae 	bl	800d598 <ethernet_output>
 800ba3c:	4603      	mov	r3, r0
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3710      	adds	r7, #16
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}
 800ba46:	bf00      	nop
 800ba48:	20006ca8 	.word	0x20006ca8
 800ba4c:	0800fb20 	.word	0x0800fb20
 800ba50:	0800fc90 	.word	0x0800fc90
 800ba54:	0800fb98 	.word	0x0800fb98

0800ba58 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b08a      	sub	sp, #40	@ 0x28
 800ba5c:	af02      	add	r7, sp, #8
 800ba5e:	60f8      	str	r0, [r7, #12]
 800ba60:	60b9      	str	r1, [r7, #8]
 800ba62:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d106      	bne.n	800ba7c <etharp_output+0x24>
 800ba6e:	4b69      	ldr	r3, [pc, #420]	@ (800bc14 <etharp_output+0x1bc>)
 800ba70:	f240 321b 	movw	r2, #795	@ 0x31b
 800ba74:	4968      	ldr	r1, [pc, #416]	@ (800bc18 <etharp_output+0x1c0>)
 800ba76:	4869      	ldr	r0, [pc, #420]	@ (800bc1c <etharp_output+0x1c4>)
 800ba78:	f001 fe98 	bl	800d7ac <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d106      	bne.n	800ba90 <etharp_output+0x38>
 800ba82:	4b64      	ldr	r3, [pc, #400]	@ (800bc14 <etharp_output+0x1bc>)
 800ba84:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800ba88:	4965      	ldr	r1, [pc, #404]	@ (800bc20 <etharp_output+0x1c8>)
 800ba8a:	4864      	ldr	r0, [pc, #400]	@ (800bc1c <etharp_output+0x1c4>)
 800ba8c:	f001 fe8e 	bl	800d7ac <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d106      	bne.n	800baa4 <etharp_output+0x4c>
 800ba96:	4b5f      	ldr	r3, [pc, #380]	@ (800bc14 <etharp_output+0x1bc>)
 800ba98:	f240 321d 	movw	r2, #797	@ 0x31d
 800ba9c:	4961      	ldr	r1, [pc, #388]	@ (800bc24 <etharp_output+0x1cc>)
 800ba9e:	485f      	ldr	r0, [pc, #380]	@ (800bc1c <etharp_output+0x1c4>)
 800baa0:	f001 fe84 	bl	800d7ac <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	68f9      	ldr	r1, [r7, #12]
 800baaa:	4618      	mov	r0, r3
 800baac:	f000 fed2 	bl	800c854 <ip4_addr_isbroadcast_u32>
 800bab0:	4603      	mov	r3, r0
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d002      	beq.n	800babc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800bab6:	4b5c      	ldr	r3, [pc, #368]	@ (800bc28 <etharp_output+0x1d0>)
 800bab8:	61fb      	str	r3, [r7, #28]
 800baba:	e09b      	b.n	800bbf4 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bac4:	2be0      	cmp	r3, #224	@ 0xe0
 800bac6:	d118      	bne.n	800bafa <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800bac8:	2301      	movs	r3, #1
 800baca:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800bacc:	2300      	movs	r3, #0
 800bace:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800bad0:	235e      	movs	r3, #94	@ 0x5e
 800bad2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	3301      	adds	r3, #1
 800bad8:	781b      	ldrb	r3, [r3, #0]
 800bada:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bade:	b2db      	uxtb	r3, r3
 800bae0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	3302      	adds	r3, #2
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	3303      	adds	r3, #3
 800baee:	781b      	ldrb	r3, [r3, #0]
 800baf0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800baf2:	f107 0310 	add.w	r3, r7, #16
 800baf6:	61fb      	str	r3, [r7, #28]
 800baf8:	e07c      	b.n	800bbf4 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681a      	ldr	r2, [r3, #0]
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	3304      	adds	r3, #4
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	405a      	eors	r2, r3
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	3308      	adds	r3, #8
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	4013      	ands	r3, r2
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d012      	beq.n	800bb38 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800bb18:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d00b      	beq.n	800bb38 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	330c      	adds	r3, #12
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d003      	beq.n	800bb32 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	330c      	adds	r3, #12
 800bb2e:	61bb      	str	r3, [r7, #24]
 800bb30:	e002      	b.n	800bb38 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800bb32:	f06f 0303 	mvn.w	r3, #3
 800bb36:	e069      	b.n	800bc0c <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800bb38:	4b3c      	ldr	r3, [pc, #240]	@ (800bc2c <etharp_output+0x1d4>)
 800bb3a:	781b      	ldrb	r3, [r3, #0]
 800bb3c:	4619      	mov	r1, r3
 800bb3e:	4a3c      	ldr	r2, [pc, #240]	@ (800bc30 <etharp_output+0x1d8>)
 800bb40:	460b      	mov	r3, r1
 800bb42:	005b      	lsls	r3, r3, #1
 800bb44:	440b      	add	r3, r1
 800bb46:	00db      	lsls	r3, r3, #3
 800bb48:	4413      	add	r3, r2
 800bb4a:	3314      	adds	r3, #20
 800bb4c:	781b      	ldrb	r3, [r3, #0]
 800bb4e:	2b01      	cmp	r3, #1
 800bb50:	d917      	bls.n	800bb82 <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800bb52:	69bb      	ldr	r3, [r7, #24]
 800bb54:	681a      	ldr	r2, [r3, #0]
 800bb56:	4b35      	ldr	r3, [pc, #212]	@ (800bc2c <etharp_output+0x1d4>)
 800bb58:	781b      	ldrb	r3, [r3, #0]
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	4934      	ldr	r1, [pc, #208]	@ (800bc30 <etharp_output+0x1d8>)
 800bb5e:	4603      	mov	r3, r0
 800bb60:	005b      	lsls	r3, r3, #1
 800bb62:	4403      	add	r3, r0
 800bb64:	00db      	lsls	r3, r3, #3
 800bb66:	440b      	add	r3, r1
 800bb68:	3304      	adds	r3, #4
 800bb6a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	d108      	bne.n	800bb82 <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800bb70:	4b2e      	ldr	r3, [pc, #184]	@ (800bc2c <etharp_output+0x1d4>)
 800bb72:	781b      	ldrb	r3, [r3, #0]
 800bb74:	461a      	mov	r2, r3
 800bb76:	68b9      	ldr	r1, [r7, #8]
 800bb78:	68f8      	ldr	r0, [r7, #12]
 800bb7a:	f7ff fed3 	bl	800b924 <etharp_output_to_arp_index>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	e044      	b.n	800bc0c <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800bb82:	2300      	movs	r3, #0
 800bb84:	75fb      	strb	r3, [r7, #23]
 800bb86:	e02a      	b.n	800bbde <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800bb88:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bb8c:	4928      	ldr	r1, [pc, #160]	@ (800bc30 <etharp_output+0x1d8>)
 800bb8e:	4613      	mov	r3, r2
 800bb90:	005b      	lsls	r3, r3, #1
 800bb92:	4413      	add	r3, r2
 800bb94:	00db      	lsls	r3, r3, #3
 800bb96:	440b      	add	r3, r1
 800bb98:	3314      	adds	r3, #20
 800bb9a:	781b      	ldrb	r3, [r3, #0]
 800bb9c:	2b01      	cmp	r3, #1
 800bb9e:	d918      	bls.n	800bbd2 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800bba0:	69bb      	ldr	r3, [r7, #24]
 800bba2:	6819      	ldr	r1, [r3, #0]
 800bba4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bba8:	4821      	ldr	r0, [pc, #132]	@ (800bc30 <etharp_output+0x1d8>)
 800bbaa:	4613      	mov	r3, r2
 800bbac:	005b      	lsls	r3, r3, #1
 800bbae:	4413      	add	r3, r2
 800bbb0:	00db      	lsls	r3, r3, #3
 800bbb2:	4403      	add	r3, r0
 800bbb4:	3304      	adds	r3, #4
 800bbb6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800bbb8:	4299      	cmp	r1, r3
 800bbba:	d10a      	bne.n	800bbd2 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800bbbc:	7dfa      	ldrb	r2, [r7, #23]
 800bbbe:	4b1b      	ldr	r3, [pc, #108]	@ (800bc2c <etharp_output+0x1d4>)
 800bbc0:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800bbc2:	7dfb      	ldrb	r3, [r7, #23]
 800bbc4:	461a      	mov	r2, r3
 800bbc6:	68b9      	ldr	r1, [r7, #8]
 800bbc8:	68f8      	ldr	r0, [r7, #12]
 800bbca:	f7ff feab 	bl	800b924 <etharp_output_to_arp_index>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	e01c      	b.n	800bc0c <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800bbd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bbd6:	b2db      	uxtb	r3, r3
 800bbd8:	3301      	adds	r3, #1
 800bbda:	b2db      	uxtb	r3, r3
 800bbdc:	75fb      	strb	r3, [r7, #23]
 800bbde:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bbe2:	2b09      	cmp	r3, #9
 800bbe4:	ddd0      	ble.n	800bb88 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800bbe6:	68ba      	ldr	r2, [r7, #8]
 800bbe8:	69b9      	ldr	r1, [r7, #24]
 800bbea:	68f8      	ldr	r0, [r7, #12]
 800bbec:	f000 f822 	bl	800bc34 <etharp_query>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	e00b      	b.n	800bc0c <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 800bbfa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bbfe:	9300      	str	r3, [sp, #0]
 800bc00:	69fb      	ldr	r3, [r7, #28]
 800bc02:	68b9      	ldr	r1, [r7, #8]
 800bc04:	68f8      	ldr	r0, [r7, #12]
 800bc06:	f001 fcc7 	bl	800d598 <ethernet_output>
 800bc0a:	4603      	mov	r3, r0
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3720      	adds	r7, #32
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}
 800bc14:	0800fb20 	.word	0x0800fb20
 800bc18:	0800fc70 	.word	0x0800fc70
 800bc1c:	0800fb98 	.word	0x0800fb98
 800bc20:	0800fcc0 	.word	0x0800fcc0
 800bc24:	0800fc60 	.word	0x0800fc60
 800bc28:	08010288 	.word	0x08010288
 800bc2c:	20006d98 	.word	0x20006d98
 800bc30:	20006ca8 	.word	0x20006ca8

0800bc34 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b08c      	sub	sp, #48	@ 0x30
 800bc38:	af02      	add	r7, sp, #8
 800bc3a:	60f8      	str	r0, [r7, #12]
 800bc3c:	60b9      	str	r1, [r7, #8]
 800bc3e:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	3329      	adds	r3, #41	@ 0x29
 800bc44:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800bc46:	23ff      	movs	r3, #255	@ 0xff
 800bc48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	68f9      	ldr	r1, [r7, #12]
 800bc56:	4618      	mov	r0, r3
 800bc58:	f000 fdfc 	bl	800c854 <ip4_addr_isbroadcast_u32>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d10c      	bne.n	800bc7c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800bc6a:	2be0      	cmp	r3, #224	@ 0xe0
 800bc6c:	d006      	beq.n	800bc7c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d003      	beq.n	800bc7c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d102      	bne.n	800bc82 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800bc7c:	f06f 030f 	mvn.w	r3, #15
 800bc80:	e10e      	b.n	800bea0 <etharp_query+0x26c>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800bc82:	68fa      	ldr	r2, [r7, #12]
 800bc84:	2101      	movs	r1, #1
 800bc86:	68b8      	ldr	r0, [r7, #8]
 800bc88:	f7ff fbd2 	bl	800b430 <etharp_find_entry>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 800bc90:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	da02      	bge.n	800bc9e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 800bc98:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bc9c:	e100      	b.n	800bea0 <etharp_query+0x26c>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800bc9e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800bca2:	4981      	ldr	r1, [pc, #516]	@ (800bea8 <etharp_query+0x274>)
 800bca4:	4613      	mov	r3, r2
 800bca6:	005b      	lsls	r3, r3, #1
 800bca8:	4413      	add	r3, r2
 800bcaa:	00db      	lsls	r3, r3, #3
 800bcac:	440b      	add	r3, r1
 800bcae:	3314      	adds	r3, #20
 800bcb0:	781b      	ldrb	r3, [r3, #0]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d117      	bne.n	800bce6 <etharp_query+0xb2>
    is_new_entry = 1;
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800bcba:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800bcbe:	497a      	ldr	r1, [pc, #488]	@ (800bea8 <etharp_query+0x274>)
 800bcc0:	4613      	mov	r3, r2
 800bcc2:	005b      	lsls	r3, r3, #1
 800bcc4:	4413      	add	r3, r2
 800bcc6:	00db      	lsls	r3, r3, #3
 800bcc8:	440b      	add	r3, r1
 800bcca:	3314      	adds	r3, #20
 800bccc:	2201      	movs	r2, #1
 800bcce:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800bcd0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800bcd4:	4974      	ldr	r1, [pc, #464]	@ (800bea8 <etharp_query+0x274>)
 800bcd6:	4613      	mov	r3, r2
 800bcd8:	005b      	lsls	r3, r3, #1
 800bcda:	4413      	add	r3, r2
 800bcdc:	00db      	lsls	r3, r3, #3
 800bcde:	440b      	add	r3, r1
 800bce0:	3308      	adds	r3, #8
 800bce2:	68fa      	ldr	r2, [r7, #12]
 800bce4:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800bce6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800bcea:	496f      	ldr	r1, [pc, #444]	@ (800bea8 <etharp_query+0x274>)
 800bcec:	4613      	mov	r3, r2
 800bcee:	005b      	lsls	r3, r3, #1
 800bcf0:	4413      	add	r3, r2
 800bcf2:	00db      	lsls	r3, r3, #3
 800bcf4:	440b      	add	r3, r1
 800bcf6:	3314      	adds	r3, #20
 800bcf8:	781b      	ldrb	r3, [r3, #0]
 800bcfa:	2b01      	cmp	r3, #1
 800bcfc:	d012      	beq.n	800bd24 <etharp_query+0xf0>
 800bcfe:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800bd02:	4969      	ldr	r1, [pc, #420]	@ (800bea8 <etharp_query+0x274>)
 800bd04:	4613      	mov	r3, r2
 800bd06:	005b      	lsls	r3, r3, #1
 800bd08:	4413      	add	r3, r2
 800bd0a:	00db      	lsls	r3, r3, #3
 800bd0c:	440b      	add	r3, r1
 800bd0e:	3314      	adds	r3, #20
 800bd10:	781b      	ldrb	r3, [r3, #0]
 800bd12:	2b01      	cmp	r3, #1
 800bd14:	d806      	bhi.n	800bd24 <etharp_query+0xf0>
 800bd16:	4b65      	ldr	r3, [pc, #404]	@ (800beac <etharp_query+0x278>)
 800bd18:	f240 32c7 	movw	r2, #967	@ 0x3c7
 800bd1c:	4964      	ldr	r1, [pc, #400]	@ (800beb0 <etharp_query+0x27c>)
 800bd1e:	4865      	ldr	r0, [pc, #404]	@ (800beb4 <etharp_query+0x280>)
 800bd20:	f001 fd44 	bl	800d7ac <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800bd24:	6a3b      	ldr	r3, [r7, #32]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d102      	bne.n	800bd30 <etharp_query+0xfc>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d10c      	bne.n	800bd4a <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800bd30:	68b9      	ldr	r1, [r7, #8]
 800bd32:	68f8      	ldr	r0, [r7, #12]
 800bd34:	f000 f974 	bl	800c020 <etharp_request>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d102      	bne.n	800bd4a <etharp_query+0x116>
      return result;
 800bd44:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800bd48:	e0aa      	b.n	800bea0 <etharp_query+0x26c>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d106      	bne.n	800bd5e <etharp_query+0x12a>
 800bd50:	4b56      	ldr	r3, [pc, #344]	@ (800beac <etharp_query+0x278>)
 800bd52:	f240 32db 	movw	r2, #987	@ 0x3db
 800bd56:	4958      	ldr	r1, [pc, #352]	@ (800beb8 <etharp_query+0x284>)
 800bd58:	4856      	ldr	r0, [pc, #344]	@ (800beb4 <etharp_query+0x280>)
 800bd5a:	f001 fd27 	bl	800d7ac <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800bd5e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800bd62:	4951      	ldr	r1, [pc, #324]	@ (800bea8 <etharp_query+0x274>)
 800bd64:	4613      	mov	r3, r2
 800bd66:	005b      	lsls	r3, r3, #1
 800bd68:	4413      	add	r3, r2
 800bd6a:	00db      	lsls	r3, r3, #3
 800bd6c:	440b      	add	r3, r1
 800bd6e:	3314      	adds	r3, #20
 800bd70:	781b      	ldrb	r3, [r3, #0]
 800bd72:	2b01      	cmp	r3, #1
 800bd74:	d918      	bls.n	800bda8 <etharp_query+0x174>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800bd76:	7cfa      	ldrb	r2, [r7, #19]
 800bd78:	4b50      	ldr	r3, [pc, #320]	@ (800bebc <etharp_query+0x288>)
 800bd7a:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800bd7c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800bd80:	4613      	mov	r3, r2
 800bd82:	005b      	lsls	r3, r3, #1
 800bd84:	4413      	add	r3, r2
 800bd86:	00db      	lsls	r3, r3, #3
 800bd88:	3308      	adds	r3, #8
 800bd8a:	4a47      	ldr	r2, [pc, #284]	@ (800bea8 <etharp_query+0x274>)
 800bd8c:	4413      	add	r3, r2
 800bd8e:	3304      	adds	r3, #4
 800bd90:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bd94:	9200      	str	r2, [sp, #0]
 800bd96:	697a      	ldr	r2, [r7, #20]
 800bd98:	6879      	ldr	r1, [r7, #4]
 800bd9a:	68f8      	ldr	r0, [r7, #12]
 800bd9c:	f001 fbfc 	bl	800d598 <ethernet_output>
 800bda0:	4603      	mov	r3, r0
 800bda2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bda6:	e079      	b.n	800be9c <etharp_query+0x268>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800bda8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800bdac:	493e      	ldr	r1, [pc, #248]	@ (800bea8 <etharp_query+0x274>)
 800bdae:	4613      	mov	r3, r2
 800bdb0:	005b      	lsls	r3, r3, #1
 800bdb2:	4413      	add	r3, r2
 800bdb4:	00db      	lsls	r3, r3, #3
 800bdb6:	440b      	add	r3, r1
 800bdb8:	3314      	adds	r3, #20
 800bdba:	781b      	ldrb	r3, [r3, #0]
 800bdbc:	2b01      	cmp	r3, #1
 800bdbe:	d16d      	bne.n	800be9c <etharp_query+0x268>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	61fb      	str	r3, [r7, #28]
    while (p) {
 800bdc8:	e01a      	b.n	800be00 <etharp_query+0x1cc>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800bdca:	69fb      	ldr	r3, [r7, #28]
 800bdcc:	895a      	ldrh	r2, [r3, #10]
 800bdce:	69fb      	ldr	r3, [r7, #28]
 800bdd0:	891b      	ldrh	r3, [r3, #8]
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	d10a      	bne.n	800bdec <etharp_query+0x1b8>
 800bdd6:	69fb      	ldr	r3, [r7, #28]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d006      	beq.n	800bdec <etharp_query+0x1b8>
 800bdde:	4b33      	ldr	r3, [pc, #204]	@ (800beac <etharp_query+0x278>)
 800bde0:	f44f 727b 	mov.w	r2, #1004	@ 0x3ec
 800bde4:	4936      	ldr	r1, [pc, #216]	@ (800bec0 <etharp_query+0x28c>)
 800bde6:	4833      	ldr	r0, [pc, #204]	@ (800beb4 <etharp_query+0x280>)
 800bde8:	f001 fce0 	bl	800d7ac <iprintf>
      if (p->type != PBUF_ROM) {
 800bdec:	69fb      	ldr	r3, [r7, #28]
 800bdee:	7b1b      	ldrb	r3, [r3, #12]
 800bdf0:	2b01      	cmp	r3, #1
 800bdf2:	d002      	beq.n	800bdfa <etharp_query+0x1c6>
        copy_needed = 1;
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	61bb      	str	r3, [r7, #24]
        break;
 800bdf8:	e005      	b.n	800be06 <etharp_query+0x1d2>
      }
      p = p->next;
 800bdfa:	69fb      	ldr	r3, [r7, #28]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	61fb      	str	r3, [r7, #28]
    while (p) {
 800be00:	69fb      	ldr	r3, [r7, #28]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d1e1      	bne.n	800bdca <etharp_query+0x196>
    }
    if (copy_needed) {
 800be06:	69bb      	ldr	r3, [r7, #24]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d017      	beq.n	800be3c <etharp_query+0x208>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800be0c:	69fb      	ldr	r3, [r7, #28]
 800be0e:	891b      	ldrh	r3, [r3, #8]
 800be10:	2200      	movs	r2, #0
 800be12:	4619      	mov	r1, r3
 800be14:	2002      	movs	r0, #2
 800be16:	f7f9 f859 	bl	8004ecc <pbuf_alloc>
 800be1a:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 800be1c:	69fb      	ldr	r3, [r7, #28]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d011      	beq.n	800be46 <etharp_query+0x212>
        if (pbuf_copy(p, q) != ERR_OK) {
 800be22:	6879      	ldr	r1, [r7, #4]
 800be24:	69f8      	ldr	r0, [r7, #28]
 800be26:	f7f9 fceb 	bl	8005800 <pbuf_copy>
 800be2a:	4603      	mov	r3, r0
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d00a      	beq.n	800be46 <etharp_query+0x212>
          pbuf_free(p);
 800be30:	69f8      	ldr	r0, [r7, #28]
 800be32:	f7f9 fbc3 	bl	80055bc <pbuf_free>
          p = NULL;
 800be36:	2300      	movs	r3, #0
 800be38:	61fb      	str	r3, [r7, #28]
 800be3a:	e004      	b.n	800be46 <etharp_query+0x212>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800be40:	69f8      	ldr	r0, [r7, #28]
 800be42:	f7f9 fc65 	bl	8005710 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800be46:	69fb      	ldr	r3, [r7, #28]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d024      	beq.n	800be96 <etharp_query+0x262>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800be4c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800be50:	4915      	ldr	r1, [pc, #84]	@ (800bea8 <etharp_query+0x274>)
 800be52:	4613      	mov	r3, r2
 800be54:	005b      	lsls	r3, r3, #1
 800be56:	4413      	add	r3, r2
 800be58:	00db      	lsls	r3, r3, #3
 800be5a:	440b      	add	r3, r1
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d00b      	beq.n	800be7a <etharp_query+0x246>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800be62:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800be66:	4910      	ldr	r1, [pc, #64]	@ (800bea8 <etharp_query+0x274>)
 800be68:	4613      	mov	r3, r2
 800be6a:	005b      	lsls	r3, r3, #1
 800be6c:	4413      	add	r3, r2
 800be6e:	00db      	lsls	r3, r3, #3
 800be70:	440b      	add	r3, r1
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	4618      	mov	r0, r3
 800be76:	f7f9 fba1 	bl	80055bc <pbuf_free>
      }
      arp_table[i].q = p;
 800be7a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800be7e:	490a      	ldr	r1, [pc, #40]	@ (800bea8 <etharp_query+0x274>)
 800be80:	4613      	mov	r3, r2
 800be82:	005b      	lsls	r3, r3, #1
 800be84:	4413      	add	r3, r2
 800be86:	00db      	lsls	r3, r3, #3
 800be88:	440b      	add	r3, r1
 800be8a:	69fa      	ldr	r2, [r7, #28]
 800be8c:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800be8e:	2300      	movs	r3, #0
 800be90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800be94:	e002      	b.n	800be9c <etharp_query+0x268>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800be96:	23ff      	movs	r3, #255	@ 0xff
 800be98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800be9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	3728      	adds	r7, #40	@ 0x28
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}
 800bea8:	20006ca8 	.word	0x20006ca8
 800beac:	0800fb20 	.word	0x0800fb20
 800beb0:	0800fccc 	.word	0x0800fccc
 800beb4:	0800fb98 	.word	0x0800fb98
 800beb8:	0800fcc0 	.word	0x0800fcc0
 800bebc:	20006d98 	.word	0x20006d98
 800bec0:	0800fcf4 	.word	0x0800fcf4

0800bec4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b08a      	sub	sp, #40	@ 0x28
 800bec8:	af02      	add	r7, sp, #8
 800beca:	60f8      	str	r0, [r7, #12]
 800becc:	60b9      	str	r1, [r7, #8]
 800bece:	607a      	str	r2, [r7, #4]
 800bed0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800bed2:	2300      	movs	r3, #0
 800bed4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d106      	bne.n	800beea <etharp_raw+0x26>
 800bedc:	4b3a      	ldr	r3, [pc, #232]	@ (800bfc8 <etharp_raw+0x104>)
 800bede:	f44f 628b 	mov.w	r2, #1112	@ 0x458
 800bee2:	493a      	ldr	r1, [pc, #232]	@ (800bfcc <etharp_raw+0x108>)
 800bee4:	483a      	ldr	r0, [pc, #232]	@ (800bfd0 <etharp_raw+0x10c>)
 800bee6:	f001 fc61 	bl	800d7ac <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800beea:	2200      	movs	r2, #0
 800beec:	211c      	movs	r1, #28
 800beee:	2002      	movs	r0, #2
 800bef0:	f7f8 ffec 	bl	8004ecc <pbuf_alloc>
 800bef4:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800bef6:	69bb      	ldr	r3, [r7, #24]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d102      	bne.n	800bf02 <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800befc:	f04f 33ff 	mov.w	r3, #4294967295
 800bf00:	e05d      	b.n	800bfbe <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800bf02:	69bb      	ldr	r3, [r7, #24]
 800bf04:	895b      	ldrh	r3, [r3, #10]
 800bf06:	2b1b      	cmp	r3, #27
 800bf08:	d806      	bhi.n	800bf18 <etharp_raw+0x54>
 800bf0a:	4b2f      	ldr	r3, [pc, #188]	@ (800bfc8 <etharp_raw+0x104>)
 800bf0c:	f240 4263 	movw	r2, #1123	@ 0x463
 800bf10:	4930      	ldr	r1, [pc, #192]	@ (800bfd4 <etharp_raw+0x110>)
 800bf12:	482f      	ldr	r0, [pc, #188]	@ (800bfd0 <etharp_raw+0x10c>)
 800bf14:	f001 fc4a 	bl	800d7ac <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800bf18:	69bb      	ldr	r3, [r7, #24]
 800bf1a:	685b      	ldr	r3, [r3, #4]
 800bf1c:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800bf1e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800bf20:	4618      	mov	r0, r3
 800bf22:	f7f8 fa3a 	bl	800439a <lwip_htons>
 800bf26:	4603      	mov	r3, r0
 800bf28:	461a      	mov	r2, r3
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf34:	2b06      	cmp	r3, #6
 800bf36:	d006      	beq.n	800bf46 <etharp_raw+0x82>
 800bf38:	4b23      	ldr	r3, [pc, #140]	@ (800bfc8 <etharp_raw+0x104>)
 800bf3a:	f240 426a 	movw	r2, #1130	@ 0x46a
 800bf3e:	4926      	ldr	r1, [pc, #152]	@ (800bfd8 <etharp_raw+0x114>)
 800bf40:	4823      	ldr	r0, [pc, #140]	@ (800bfd0 <etharp_raw+0x10c>)
 800bf42:	f001 fc33 	bl	800d7ac <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	3308      	adds	r3, #8
 800bf4a:	2206      	movs	r2, #6
 800bf4c:	6839      	ldr	r1, [r7, #0]
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f001 fd07 	bl	800d962 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800bf54:	697b      	ldr	r3, [r7, #20]
 800bf56:	3312      	adds	r3, #18
 800bf58:	2206      	movs	r2, #6
 800bf5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f001 fd00 	bl	800d962 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800bf62:	697b      	ldr	r3, [r7, #20]
 800bf64:	330e      	adds	r3, #14
 800bf66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf68:	6812      	ldr	r2, [r2, #0]
 800bf6a:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	3318      	adds	r3, #24
 800bf70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf72:	6812      	ldr	r2, [r2, #0]
 800bf74:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	2200      	movs	r2, #0
 800bf7a:	701a      	strb	r2, [r3, #0]
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	f042 0201 	orr.w	r2, r2, #1
 800bf82:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800bf84:	697b      	ldr	r3, [r7, #20]
 800bf86:	2200      	movs	r2, #0
 800bf88:	f042 0208 	orr.w	r2, r2, #8
 800bf8c:	709a      	strb	r2, [r3, #2]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	2206      	movs	r2, #6
 800bf96:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	2204      	movs	r2, #4
 800bf9c:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800bf9e:	f640 0306 	movw	r3, #2054	@ 0x806
 800bfa2:	9300      	str	r3, [sp, #0]
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	68ba      	ldr	r2, [r7, #8]
 800bfa8:	69b9      	ldr	r1, [r7, #24]
 800bfaa:	68f8      	ldr	r0, [r7, #12]
 800bfac:	f001 faf4 	bl	800d598 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800bfb0:	69b8      	ldr	r0, [r7, #24]
 800bfb2:	f7f9 fb03 	bl	80055bc <pbuf_free>
  p = NULL;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800bfba:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3720      	adds	r7, #32
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}
 800bfc6:	bf00      	nop
 800bfc8:	0800fb20 	.word	0x0800fb20
 800bfcc:	0800fc70 	.word	0x0800fc70
 800bfd0:	0800fb98 	.word	0x0800fb98
 800bfd4:	0800fd10 	.word	0x0800fd10
 800bfd8:	0800fd44 	.word	0x0800fd44

0800bfdc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b088      	sub	sp, #32
 800bfe0:	af04      	add	r7, sp, #16
 800bfe2:	60f8      	str	r0, [r7, #12]
 800bfe4:	60b9      	str	r1, [r7, #8]
 800bfe6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	f103 0129 	add.w	r1, r3, #41	@ 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	f103 0029 	add.w	r0, r3, #41	@ 0x29
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800bff8:	2201      	movs	r2, #1
 800bffa:	9203      	str	r2, [sp, #12]
 800bffc:	68ba      	ldr	r2, [r7, #8]
 800bffe:	9202      	str	r2, [sp, #8]
 800c000:	4a06      	ldr	r2, [pc, #24]	@ (800c01c <etharp_request_dst+0x40>)
 800c002:	9201      	str	r2, [sp, #4]
 800c004:	9300      	str	r3, [sp, #0]
 800c006:	4603      	mov	r3, r0
 800c008:	687a      	ldr	r2, [r7, #4]
 800c00a:	68f8      	ldr	r0, [r7, #12]
 800c00c:	f7ff ff5a 	bl	800bec4 <etharp_raw>
 800c010:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800c012:	4618      	mov	r0, r3
 800c014:	3710      	adds	r7, #16
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}
 800c01a:	bf00      	nop
 800c01c:	08010290 	.word	0x08010290

0800c020 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b082      	sub	sp, #8
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800c02a:	4a05      	ldr	r2, [pc, #20]	@ (800c040 <etharp_request+0x20>)
 800c02c:	6839      	ldr	r1, [r7, #0]
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f7ff ffd4 	bl	800bfdc <etharp_request_dst>
 800c034:	4603      	mov	r3, r0
}
 800c036:	4618      	mov	r0, r3
 800c038:	3708      	adds	r7, #8
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}
 800c03e:	bf00      	nop
 800c040:	08010288 	.word	0x08010288

0800c044 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b08e      	sub	sp, #56	@ 0x38
 800c048:	af04      	add	r7, sp, #16
 800c04a:	6078      	str	r0, [r7, #4]
 800c04c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800c04e:	4b7a      	ldr	r3, [pc, #488]	@ (800c238 <icmp_input+0x1f4>)
 800c050:	689b      	ldr	r3, [r3, #8]
 800c052:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 800c054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c056:	781b      	ldrb	r3, [r3, #0]
 800c058:	f003 030f 	and.w	r3, r3, #15
 800c05c:	b29b      	uxth	r3, r3
 800c05e:	009b      	lsls	r3, r3, #2
 800c060:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800c062:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c064:	2b13      	cmp	r3, #19
 800c066:	f240 80d1 	bls.w	800c20c <icmp_input+0x1c8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	895b      	ldrh	r3, [r3, #10]
 800c06e:	2b03      	cmp	r3, #3
 800c070:	f240 80ce 	bls.w	800c210 <icmp_input+0x1cc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	685b      	ldr	r3, [r3, #4]
 800c078:	781b      	ldrb	r3, [r3, #0]
 800c07a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800c07e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800c082:	2b00      	cmp	r3, #0
 800c084:	f000 80bb 	beq.w	800c1fe <icmp_input+0x1ba>
 800c088:	2b08      	cmp	r3, #8
 800c08a:	f040 80bb 	bne.w	800c204 <icmp_input+0x1c0>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 800c08e:	4b6b      	ldr	r3, [pc, #428]	@ (800c23c <icmp_input+0x1f8>)
 800c090:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c092:	4b69      	ldr	r3, [pc, #420]	@ (800c238 <icmp_input+0x1f4>)
 800c094:	695b      	ldr	r3, [r3, #20]
 800c096:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c09a:	2be0      	cmp	r3, #224	@ 0xe0
 800c09c:	f000 80bf 	beq.w	800c21e <icmp_input+0x1da>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800c0a0:	4b65      	ldr	r3, [pc, #404]	@ (800c238 <icmp_input+0x1f4>)
 800c0a2:	695b      	ldr	r3, [r3, #20]
 800c0a4:	4a64      	ldr	r2, [pc, #400]	@ (800c238 <icmp_input+0x1f4>)
 800c0a6:	6812      	ldr	r2, [r2, #0]
 800c0a8:	4611      	mov	r1, r2
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f000 fbd2 	bl	800c854 <ip4_addr_isbroadcast_u32>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	f040 80b5 	bne.w	800c222 <icmp_input+0x1de>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	891b      	ldrh	r3, [r3, #8]
 800c0bc:	2b07      	cmp	r3, #7
 800c0be:	f240 80a9 	bls.w	800c214 <icmp_input+0x1d0>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800c0c2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c0c4:	330e      	adds	r3, #14
 800c0c6:	b29b      	uxth	r3, r3
 800c0c8:	b21b      	sxth	r3, r3
 800c0ca:	4619      	mov	r1, r3
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f7f9 fa51 	bl	8005574 <pbuf_header>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d046      	beq.n	800c166 <icmp_input+0x122>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	891a      	ldrh	r2, [r3, #8]
 800c0dc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c0de:	4413      	add	r3, r2
 800c0e0:	b29b      	uxth	r3, r3
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	4619      	mov	r1, r3
 800c0e6:	2002      	movs	r0, #2
 800c0e8:	f7f8 fef0 	bl	8004ecc <pbuf_alloc>
 800c0ec:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 800c0ee:	69bb      	ldr	r3, [r7, #24]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	f000 8098 	beq.w	800c226 <icmp_input+0x1e2>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800c0f6:	69bb      	ldr	r3, [r7, #24]
 800c0f8:	895b      	ldrh	r3, [r3, #10]
 800c0fa:	461a      	mov	r2, r3
 800c0fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c0fe:	3308      	adds	r3, #8
 800c100:	429a      	cmp	r2, r3
 800c102:	d203      	bcs.n	800c10c <icmp_input+0xc8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 800c104:	69b8      	ldr	r0, [r7, #24]
 800c106:	f7f9 fa59 	bl	80055bc <pbuf_free>
        goto icmperr;
 800c10a:	e08d      	b.n	800c228 <icmp_input+0x1e4>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800c10c:	69bb      	ldr	r3, [r7, #24]
 800c10e:	685b      	ldr	r3, [r3, #4]
 800c110:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c112:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c114:	4618      	mov	r0, r3
 800c116:	f001 fc24 	bl	800d962 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 800c11a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c11c:	425b      	negs	r3, r3
 800c11e:	b29b      	uxth	r3, r3
 800c120:	b21b      	sxth	r3, r3
 800c122:	4619      	mov	r1, r3
 800c124:	69b8      	ldr	r0, [r7, #24]
 800c126:	f7f9 fa25 	bl	8005574 <pbuf_header>
 800c12a:	4603      	mov	r3, r0
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d009      	beq.n	800c144 <icmp_input+0x100>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800c130:	4b43      	ldr	r3, [pc, #268]	@ (800c240 <icmp_input+0x1fc>)
 800c132:	22af      	movs	r2, #175	@ 0xaf
 800c134:	4943      	ldr	r1, [pc, #268]	@ (800c244 <icmp_input+0x200>)
 800c136:	4844      	ldr	r0, [pc, #272]	@ (800c248 <icmp_input+0x204>)
 800c138:	f001 fb38 	bl	800d7ac <iprintf>
        pbuf_free(r);
 800c13c:	69b8      	ldr	r0, [r7, #24]
 800c13e:	f7f9 fa3d 	bl	80055bc <pbuf_free>
        goto icmperr;
 800c142:	e071      	b.n	800c228 <icmp_input+0x1e4>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800c144:	6879      	ldr	r1, [r7, #4]
 800c146:	69b8      	ldr	r0, [r7, #24]
 800c148:	f7f9 fb5a 	bl	8005800 <pbuf_copy>
 800c14c:	4603      	mov	r3, r0
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d003      	beq.n	800c15a <icmp_input+0x116>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 800c152:	69b8      	ldr	r0, [r7, #24]
 800c154:	f7f9 fa32 	bl	80055bc <pbuf_free>
        goto icmperr;
 800c158:	e066      	b.n	800c228 <icmp_input+0x1e4>
      }
      /* free the original p */
      pbuf_free(p);
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f7f9 fa2e 	bl	80055bc <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800c160:	69bb      	ldr	r3, [r7, #24]
 800c162:	607b      	str	r3, [r7, #4]
 800c164:	e015      	b.n	800c192 <icmp_input+0x14e>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800c166:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c168:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 800c16c:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 800c170:	33f2      	adds	r3, #242	@ 0xf2
 800c172:	b29b      	uxth	r3, r3
 800c174:	b21b      	sxth	r3, r3
 800c176:	4619      	mov	r1, r3
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f7f9 f9fb 	bl	8005574 <pbuf_header>
 800c17e:	4603      	mov	r3, r0
 800c180:	2b00      	cmp	r3, #0
 800c182:	d006      	beq.n	800c192 <icmp_input+0x14e>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800c184:	4b2e      	ldr	r3, [pc, #184]	@ (800c240 <icmp_input+0x1fc>)
 800c186:	22c0      	movs	r2, #192	@ 0xc0
 800c188:	4930      	ldr	r1, [pc, #192]	@ (800c24c <icmp_input+0x208>)
 800c18a:	482f      	ldr	r0, [pc, #188]	@ (800c248 <icmp_input+0x204>)
 800c18c:	f001 fb0e 	bl	800d7ac <iprintf>
        goto icmperr;
 800c190:	e04a      	b.n	800c228 <icmp_input+0x1e4>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	685b      	ldr	r3, [r3, #4]
 800c196:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800c198:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800c19c:	4619      	mov	r1, r3
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f7f9 f9e8 	bl	8005574 <pbuf_header>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d12b      	bne.n	800c202 <icmp_input+0x1be>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	685b      	ldr	r3, [r3, #4]
 800c1ae:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800c1b0:	69fb      	ldr	r3, [r7, #28]
 800c1b2:	681a      	ldr	r2, [r3, #0]
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800c1b8:	4b1f      	ldr	r3, [pc, #124]	@ (800c238 <icmp_input+0x1f4>)
 800c1ba:	691a      	ldr	r2, [r3, #16]
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	709a      	strb	r2, [r3, #2]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800c1d0:	693b      	ldr	r3, [r7, #16]
 800c1d2:	22ff      	movs	r2, #255	@ 0xff
 800c1d4:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	729a      	strb	r2, [r3, #10]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	9302      	str	r3, [sp, #8]
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	9301      	str	r3, [sp, #4]
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	9300      	str	r3, [sp, #0]
 800c1ec:	23ff      	movs	r3, #255	@ 0xff
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	69f9      	ldr	r1, [r7, #28]
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f000 fa5c 	bl	800c6b0 <ip4_output_if>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800c1fc:	e001      	b.n	800c202 <icmp_input+0x1be>
    break;
 800c1fe:	bf00      	nop
 800c200:	e000      	b.n	800c204 <icmp_input+0x1c0>
    break;
 800c202:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f7f9 f9d9 	bl	80055bc <pbuf_free>
  return;
 800c20a:	e011      	b.n	800c230 <icmp_input+0x1ec>
    goto lenerr;
 800c20c:	bf00      	nop
 800c20e:	e002      	b.n	800c216 <icmp_input+0x1d2>
    goto lenerr;
 800c210:	bf00      	nop
 800c212:	e000      	b.n	800c216 <icmp_input+0x1d2>
      goto lenerr;
 800c214:	bf00      	nop
lenerr:
  pbuf_free(p);
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f7f9 f9d0 	bl	80055bc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c21c:	e008      	b.n	800c230 <icmp_input+0x1ec>
      goto icmperr;
 800c21e:	bf00      	nop
 800c220:	e002      	b.n	800c228 <icmp_input+0x1e4>
      goto icmperr;
 800c222:	bf00      	nop
 800c224:	e000      	b.n	800c228 <icmp_input+0x1e4>
        goto icmperr;
 800c226:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f7f9 f9c7 	bl	80055bc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c22e:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800c230:	3728      	adds	r7, #40	@ 0x28
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}
 800c236:	bf00      	nop
 800c238:	200036ec 	.word	0x200036ec
 800c23c:	20003700 	.word	0x20003700
 800c240:	0800fd88 	.word	0x0800fd88
 800c244:	0800fdc0 	.word	0x0800fdc0
 800c248:	0800fdf8 	.word	0x0800fdf8
 800c24c:	0800fe20 	.word	0x0800fe20

0800c250 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b082      	sub	sp, #8
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
 800c258:	460b      	mov	r3, r1
 800c25a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800c25c:	78fb      	ldrb	r3, [r7, #3]
 800c25e:	461a      	mov	r2, r3
 800c260:	2103      	movs	r1, #3
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f000 f814 	bl	800c290 <icmp_send_response>
}
 800c268:	bf00      	nop
 800c26a:	3708      	adds	r7, #8
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}

0800c270 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b082      	sub	sp, #8
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	460b      	mov	r3, r1
 800c27a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800c27c:	78fb      	ldrb	r3, [r7, #3]
 800c27e:	461a      	mov	r2, r3
 800c280:	210b      	movs	r1, #11
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f000 f804 	bl	800c290 <icmp_send_response>
}
 800c288:	bf00      	nop
 800c28a:	3708      	adds	r7, #8
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b08c      	sub	sp, #48	@ 0x30
 800c294:	af04      	add	r7, sp, #16
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	460b      	mov	r3, r1
 800c29a:	70fb      	strb	r3, [r7, #3]
 800c29c:	4613      	mov	r3, r2
 800c29e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	2124      	movs	r1, #36	@ 0x24
 800c2a4:	2001      	movs	r0, #1
 800c2a6:	f7f8 fe11 	bl	8004ecc <pbuf_alloc>
 800c2aa:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800c2ac:	69fb      	ldr	r3, [r7, #28]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d04c      	beq.n	800c34c <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800c2b2:	69fb      	ldr	r3, [r7, #28]
 800c2b4:	895b      	ldrh	r3, [r3, #10]
 800c2b6:	2b23      	cmp	r3, #35	@ 0x23
 800c2b8:	d806      	bhi.n	800c2c8 <icmp_send_response+0x38>
 800c2ba:	4b26      	ldr	r3, [pc, #152]	@ (800c354 <icmp_send_response+0xc4>)
 800c2bc:	f240 1261 	movw	r2, #353	@ 0x161
 800c2c0:	4925      	ldr	r1, [pc, #148]	@ (800c358 <icmp_send_response+0xc8>)
 800c2c2:	4826      	ldr	r0, [pc, #152]	@ (800c35c <icmp_send_response+0xcc>)
 800c2c4:	f001 fa72 	bl	800d7ac <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	685b      	ldr	r3, [r3, #4]
 800c2cc:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800c2ce:	69fb      	ldr	r3, [r7, #28]
 800c2d0:	685b      	ldr	r3, [r3, #4]
 800c2d2:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	78fa      	ldrb	r2, [r7, #3]
 800c2d8:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800c2da:	697b      	ldr	r3, [r7, #20]
 800c2dc:	78ba      	ldrb	r2, [r7, #2]
 800c2de:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800c2e0:	697b      	ldr	r3, [r7, #20]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	711a      	strb	r2, [r3, #4]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800c2ea:	697b      	ldr	r3, [r7, #20]
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	719a      	strb	r2, [r3, #6]
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800c2f4:	69fb      	ldr	r3, [r7, #28]
 800c2f6:	685b      	ldr	r3, [r3, #4]
 800c2f8:	f103 0008 	add.w	r0, r3, #8
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	685b      	ldr	r3, [r3, #4]
 800c300:	221c      	movs	r2, #28
 800c302:	4619      	mov	r1, r3
 800c304:	f001 fb2d 	bl	800d962 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800c308:	69bb      	ldr	r3, [r7, #24]
 800c30a:	68db      	ldr	r3, [r3, #12]
 800c30c:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800c30e:	f107 030c 	add.w	r3, r7, #12
 800c312:	4618      	mov	r0, r3
 800c314:	f000 f824 	bl	800c360 <ip4_route>
 800c318:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d011      	beq.n	800c344 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	2200      	movs	r2, #0
 800c324:	709a      	strb	r2, [r3, #2]
 800c326:	2200      	movs	r2, #0
 800c328:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800c32a:	f107 020c 	add.w	r2, r7, #12
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	9302      	str	r3, [sp, #8]
 800c332:	2301      	movs	r3, #1
 800c334:	9301      	str	r3, [sp, #4]
 800c336:	2300      	movs	r3, #0
 800c338:	9300      	str	r3, [sp, #0]
 800c33a:	23ff      	movs	r3, #255	@ 0xff
 800c33c:	2100      	movs	r1, #0
 800c33e:	69f8      	ldr	r0, [r7, #28]
 800c340:	f000 f9b6 	bl	800c6b0 <ip4_output_if>
  }
  pbuf_free(q);
 800c344:	69f8      	ldr	r0, [r7, #28]
 800c346:	f7f9 f939 	bl	80055bc <pbuf_free>
 800c34a:	e000      	b.n	800c34e <icmp_send_response+0xbe>
    return;
 800c34c:	bf00      	nop
}
 800c34e:	3720      	adds	r7, #32
 800c350:	46bd      	mov	sp, r7
 800c352:	bd80      	pop	{r7, pc}
 800c354:	0800fd88 	.word	0x0800fd88
 800c358:	0800fe54 	.word	0x0800fe54
 800c35c:	0800fdf8 	.word	0x0800fdf8

0800c360 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800c360:	b480      	push	{r7}
 800c362:	b085      	sub	sp, #20
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800c368:	4b30      	ldr	r3, [pc, #192]	@ (800c42c <ip4_route+0xcc>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	60fb      	str	r3, [r7, #12]
 800c36e:	e036      	b.n	800c3de <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c376:	f003 0301 	and.w	r3, r3, #1
 800c37a:	b2db      	uxtb	r3, r3
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d02b      	beq.n	800c3d8 <ip4_route+0x78>
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c386:	089b      	lsrs	r3, r3, #2
 800c388:	f003 0301 	and.w	r3, r3, #1
 800c38c:	b2db      	uxtb	r3, r3
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d022      	beq.n	800c3d8 <ip4_route+0x78>
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	3304      	adds	r3, #4
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d01d      	beq.n	800c3d8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681a      	ldr	r2, [r3, #0]
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	3304      	adds	r3, #4
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	405a      	eors	r2, r3
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	3308      	adds	r3, #8
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	4013      	ands	r3, r2
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d101      	bne.n	800c3b8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	e033      	b.n	800c420 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c3be:	f003 0302 	and.w	r3, r3, #2
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d108      	bne.n	800c3d8 <ip4_route+0x78>
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681a      	ldr	r2, [r3, #0]
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	330c      	adds	r3, #12
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	d101      	bne.n	800c3d8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	e023      	b.n	800c420 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	60fb      	str	r3, [r7, #12]
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d1c5      	bne.n	800c370 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800c3e4:	4b12      	ldr	r3, [pc, #72]	@ (800c430 <ip4_route+0xd0>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d015      	beq.n	800c418 <ip4_route+0xb8>
 800c3ec:	4b10      	ldr	r3, [pc, #64]	@ (800c430 <ip4_route+0xd0>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c3f4:	f003 0301 	and.w	r3, r3, #1
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d00d      	beq.n	800c418 <ip4_route+0xb8>
 800c3fc:	4b0c      	ldr	r3, [pc, #48]	@ (800c430 <ip4_route+0xd0>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c404:	f003 0304 	and.w	r3, r3, #4
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d005      	beq.n	800c418 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800c40c:	4b08      	ldr	r3, [pc, #32]	@ (800c430 <ip4_route+0xd0>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	3304      	adds	r3, #4
 800c412:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800c414:	2b00      	cmp	r3, #0
 800c416:	d101      	bne.n	800c41c <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800c418:	2300      	movs	r3, #0
 800c41a:	e001      	b.n	800c420 <ip4_route+0xc0>
  }

  return netif_default;
 800c41c:	4b04      	ldr	r3, [pc, #16]	@ (800c430 <ip4_route+0xd0>)
 800c41e:	681b      	ldr	r3, [r3, #0]
}
 800c420:	4618      	mov	r0, r3
 800c422:	3714      	adds	r7, #20
 800c424:	46bd      	mov	sp, r7
 800c426:	bc80      	pop	{r7}
 800c428:	4770      	bx	lr
 800c42a:	bf00      	nop
 800c42c:	20006c3c 	.word	0x20006c3c
 800c430:	20006c40 	.word	0x20006c40

0800c434 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b086      	sub	sp, #24
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
 800c43c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	685b      	ldr	r3, [r3, #4]
 800c442:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	781b      	ldrb	r3, [r3, #0]
 800c448:	091b      	lsrs	r3, r3, #4
 800c44a:	b2db      	uxtb	r3, r3
 800c44c:	2b04      	cmp	r3, #4
 800c44e:	d004      	beq.n	800c45a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f7f9 f8b3 	bl	80055bc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800c456:	2300      	movs	r3, #0
 800c458:	e122      	b.n	800c6a0 <ip4_input+0x26c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800c45a:	697b      	ldr	r3, [r7, #20]
 800c45c:	781b      	ldrb	r3, [r3, #0]
 800c45e:	f003 030f 	and.w	r3, r3, #15
 800c462:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800c464:	897b      	ldrh	r3, [r7, #10]
 800c466:	009b      	lsls	r3, r3, #2
 800c468:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	885b      	ldrh	r3, [r3, #2]
 800c46e:	b29b      	uxth	r3, r3
 800c470:	4618      	mov	r0, r3
 800c472:	f7f7 ff92 	bl	800439a <lwip_htons>
 800c476:	4603      	mov	r3, r0
 800c478:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	891b      	ldrh	r3, [r3, #8]
 800c47e:	893a      	ldrh	r2, [r7, #8]
 800c480:	429a      	cmp	r2, r3
 800c482:	d204      	bcs.n	800c48e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800c484:	893b      	ldrh	r3, [r7, #8]
 800c486:	4619      	mov	r1, r3
 800c488:	6878      	ldr	r0, [r7, #4]
 800c48a:	f7f8 ff23 	bl	80052d4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	895b      	ldrh	r3, [r3, #10]
 800c492:	897a      	ldrh	r2, [r7, #10]
 800c494:	429a      	cmp	r2, r3
 800c496:	d807      	bhi.n	800c4a8 <ip4_input+0x74>
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	891b      	ldrh	r3, [r3, #8]
 800c49c:	893a      	ldrh	r2, [r7, #8]
 800c49e:	429a      	cmp	r2, r3
 800c4a0:	d802      	bhi.n	800c4a8 <ip4_input+0x74>
 800c4a2:	897b      	ldrh	r3, [r7, #10]
 800c4a4:	2b13      	cmp	r3, #19
 800c4a6:	d804      	bhi.n	800c4b2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f7f9 f887 	bl	80055bc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	e0f6      	b.n	800c6a0 <ip4_input+0x26c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	691b      	ldr	r3, [r3, #16]
 800c4b6:	4a7c      	ldr	r2, [pc, #496]	@ (800c6a8 <ip4_input+0x274>)
 800c4b8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800c4ba:	697b      	ldr	r3, [r7, #20]
 800c4bc:	68db      	ldr	r3, [r3, #12]
 800c4be:	4a7a      	ldr	r2, [pc, #488]	@ (800c6a8 <ip4_input+0x274>)
 800c4c0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c4c2:	4b79      	ldr	r3, [pc, #484]	@ (800c6a8 <ip4_input+0x274>)
 800c4c4:	695b      	ldr	r3, [r3, #20]
 800c4c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c4ca:	2be0      	cmp	r3, #224	@ 0xe0
 800c4cc:	d112      	bne.n	800c4f4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c4d4:	f003 0301 	and.w	r3, r3, #1
 800c4d8:	b2db      	uxtb	r3, r3
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d007      	beq.n	800c4ee <ip4_input+0xba>
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	3304      	adds	r3, #4
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d002      	beq.n	800c4ee <ip4_input+0xba>
      netif = inp;
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	613b      	str	r3, [r7, #16]
 800c4ec:	e041      	b.n	800c572 <ip4_input+0x13e>
    } else {
      netif = NULL;
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	613b      	str	r3, [r7, #16]
 800c4f2:	e03e      	b.n	800c572 <ip4_input+0x13e>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	60fb      	str	r3, [r7, #12]
    netif = inp;
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c502:	f003 0301 	and.w	r3, r3, #1
 800c506:	b2db      	uxtb	r3, r3
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d014      	beq.n	800c536 <ip4_input+0x102>
 800c50c:	693b      	ldr	r3, [r7, #16]
 800c50e:	3304      	adds	r3, #4
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d00f      	beq.n	800c536 <ip4_input+0x102>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c516:	4b64      	ldr	r3, [pc, #400]	@ (800c6a8 <ip4_input+0x274>)
 800c518:	695a      	ldr	r2, [r3, #20]
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	3304      	adds	r3, #4
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	429a      	cmp	r2, r3
 800c522:	d026      	beq.n	800c572 <ip4_input+0x13e>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800c524:	4b60      	ldr	r3, [pc, #384]	@ (800c6a8 <ip4_input+0x274>)
 800c526:	695b      	ldr	r3, [r3, #20]
 800c528:	6939      	ldr	r1, [r7, #16]
 800c52a:	4618      	mov	r0, r3
 800c52c:	f000 f992 	bl	800c854 <ip4_addr_isbroadcast_u32>
 800c530:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c532:	2b00      	cmp	r3, #0
 800c534:	d11d      	bne.n	800c572 <ip4_input+0x13e>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d00d      	beq.n	800c558 <ip4_input+0x124>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800c53c:	4b5a      	ldr	r3, [pc, #360]	@ (800c6a8 <ip4_input+0x274>)
 800c53e:	695b      	ldr	r3, [r3, #20]
 800c540:	b2db      	uxtb	r3, r3
 800c542:	2b7f      	cmp	r3, #127	@ 0x7f
 800c544:	d102      	bne.n	800c54c <ip4_input+0x118>
          netif = NULL;
 800c546:	2300      	movs	r3, #0
 800c548:	613b      	str	r3, [r7, #16]
          break;
 800c54a:	e012      	b.n	800c572 <ip4_input+0x13e>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800c54c:	2300      	movs	r3, #0
 800c54e:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 800c550:	4b56      	ldr	r3, [pc, #344]	@ (800c6ac <ip4_input+0x278>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	613b      	str	r3, [r7, #16]
 800c556:	e002      	b.n	800c55e <ip4_input+0x12a>
      } else {
        netif = netif->next;
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 800c55e:	693a      	ldr	r2, [r7, #16]
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	429a      	cmp	r2, r3
 800c564:	d102      	bne.n	800c56c <ip4_input+0x138>
        netif = netif->next;
 800c566:	693b      	ldr	r3, [r7, #16]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 800c56c:	693b      	ldr	r3, [r7, #16]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d1c4      	bne.n	800c4fc <ip4_input+0xc8>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c572:	4b4d      	ldr	r3, [pc, #308]	@ (800c6a8 <ip4_input+0x274>)
 800c574:	691b      	ldr	r3, [r3, #16]
 800c576:	6839      	ldr	r1, [r7, #0]
 800c578:	4618      	mov	r0, r3
 800c57a:	f000 f96b 	bl	800c854 <ip4_addr_isbroadcast_u32>
 800c57e:	4603      	mov	r3, r0
 800c580:	2b00      	cmp	r3, #0
 800c582:	d105      	bne.n	800c590 <ip4_input+0x15c>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800c584:	4b48      	ldr	r3, [pc, #288]	@ (800c6a8 <ip4_input+0x274>)
 800c586:	691b      	ldr	r3, [r3, #16]
 800c588:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c58c:	2be0      	cmp	r3, #224	@ 0xe0
 800c58e:	d104      	bne.n	800c59a <ip4_input+0x166>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f7f9 f813 	bl	80055bc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800c596:	2300      	movs	r3, #0
 800c598:	e082      	b.n	800c6a0 <ip4_input+0x26c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800c59a:	693b      	ldr	r3, [r7, #16]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d104      	bne.n	800c5aa <ip4_input+0x176>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f7f9 f80b 	bl	80055bc <pbuf_free>
    return ERR_OK;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	e07a      	b.n	800c6a0 <ip4_input+0x26c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800c5aa:	697b      	ldr	r3, [r7, #20]
 800c5ac:	88db      	ldrh	r3, [r3, #6]
 800c5ae:	b29b      	uxth	r3, r3
 800c5b0:	461a      	mov	r2, r3
 800c5b2:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800c5b6:	4013      	ands	r3, r2
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d00b      	beq.n	800c5d4 <ip4_input+0x1a0>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f000 fc8d 	bl	800cedc <ip4_reass>
 800c5c2:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d101      	bne.n	800c5ce <ip4_input+0x19a>
      return ERR_OK;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	e068      	b.n	800c6a0 <ip4_input+0x26c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	685b      	ldr	r3, [r3, #4]
 800c5d2:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800c5d4:	4a34      	ldr	r2, [pc, #208]	@ (800c6a8 <ip4_input+0x274>)
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800c5da:	4a33      	ldr	r2, [pc, #204]	@ (800c6a8 <ip4_input+0x274>)
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800c5e0:	4a31      	ldr	r2, [pc, #196]	@ (800c6a8 <ip4_input+0x274>)
 800c5e2:	697b      	ldr	r3, [r7, #20]
 800c5e4:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800c5e6:	697b      	ldr	r3, [r7, #20]
 800c5e8:	781b      	ldrb	r3, [r3, #0]
 800c5ea:	f003 030f 	and.w	r3, r3, #15
 800c5ee:	b29b      	uxth	r3, r3
 800c5f0:	009b      	lsls	r3, r3, #2
 800c5f2:	b29a      	uxth	r2, r3
 800c5f4:	4b2c      	ldr	r3, [pc, #176]	@ (800c6a8 <ip4_input+0x274>)
 800c5f6:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800c5f8:	897b      	ldrh	r3, [r7, #10]
 800c5fa:	425b      	negs	r3, r3
 800c5fc:	b29b      	uxth	r3, r3
 800c5fe:	b21b      	sxth	r3, r3
 800c600:	4619      	mov	r1, r3
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f7f8 ffb6 	bl	8005574 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	7a5b      	ldrb	r3, [r3, #9]
 800c60c:	2b11      	cmp	r3, #17
 800c60e:	d006      	beq.n	800c61e <ip4_input+0x1ea>
 800c610:	2b11      	cmp	r3, #17
 800c612:	dc13      	bgt.n	800c63c <ip4_input+0x208>
 800c614:	2b01      	cmp	r3, #1
 800c616:	d00c      	beq.n	800c632 <ip4_input+0x1fe>
 800c618:	2b06      	cmp	r3, #6
 800c61a:	d005      	beq.n	800c628 <ip4_input+0x1f4>
 800c61c:	e00e      	b.n	800c63c <ip4_input+0x208>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800c61e:	6839      	ldr	r1, [r7, #0]
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f7fe fd17 	bl	800b054 <udp_input>
      break;
 800c626:	e028      	b.n	800c67a <ip4_input+0x246>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800c628:	6839      	ldr	r1, [r7, #0]
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f7fa fdd4 	bl	80071d8 <tcp_input>
      break;
 800c630:	e023      	b.n	800c67a <ip4_input+0x246>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800c632:	6839      	ldr	r1, [r7, #0]
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f7ff fd05 	bl	800c044 <icmp_input>
      break;
 800c63a:	e01e      	b.n	800c67a <ip4_input+0x246>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c63c:	4b1a      	ldr	r3, [pc, #104]	@ (800c6a8 <ip4_input+0x274>)
 800c63e:	695b      	ldr	r3, [r3, #20]
 800c640:	6939      	ldr	r1, [r7, #16]
 800c642:	4618      	mov	r0, r3
 800c644:	f000 f906 	bl	800c854 <ip4_addr_isbroadcast_u32>
 800c648:	4603      	mov	r3, r0
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d112      	bne.n	800c674 <ip4_input+0x240>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c64e:	4b16      	ldr	r3, [pc, #88]	@ (800c6a8 <ip4_input+0x274>)
 800c650:	695b      	ldr	r3, [r3, #20]
 800c652:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c656:	2be0      	cmp	r3, #224	@ 0xe0
 800c658:	d00c      	beq.n	800c674 <ip4_input+0x240>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800c65a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c65e:	4619      	mov	r1, r3
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f7f8 ff99 	bl	8005598 <pbuf_header_force>
        p->payload = iphdr;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	697a      	ldr	r2, [r7, #20]
 800c66a:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800c66c:	2102      	movs	r1, #2
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f7ff fdee 	bl	800c250 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f7f8 ffa1 	bl	80055bc <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800c67a:	4b0b      	ldr	r3, [pc, #44]	@ (800c6a8 <ip4_input+0x274>)
 800c67c:	2200      	movs	r2, #0
 800c67e:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800c680:	4b09      	ldr	r3, [pc, #36]	@ (800c6a8 <ip4_input+0x274>)
 800c682:	2200      	movs	r2, #0
 800c684:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800c686:	4b08      	ldr	r3, [pc, #32]	@ (800c6a8 <ip4_input+0x274>)
 800c688:	2200      	movs	r2, #0
 800c68a:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800c68c:	4b06      	ldr	r3, [pc, #24]	@ (800c6a8 <ip4_input+0x274>)
 800c68e:	2200      	movs	r2, #0
 800c690:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800c692:	4b05      	ldr	r3, [pc, #20]	@ (800c6a8 <ip4_input+0x274>)
 800c694:	2200      	movs	r2, #0
 800c696:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800c698:	4b03      	ldr	r3, [pc, #12]	@ (800c6a8 <ip4_input+0x274>)
 800c69a:	2200      	movs	r2, #0
 800c69c:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800c69e:	2300      	movs	r3, #0
}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	3718      	adds	r7, #24
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}
 800c6a8:	200036ec 	.word	0x200036ec
 800c6ac:	20006c3c 	.word	0x20006c3c

0800c6b0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b08a      	sub	sp, #40	@ 0x28
 800c6b4:	af04      	add	r7, sp, #16
 800c6b6:	60f8      	str	r0, [r7, #12]
 800c6b8:	60b9      	str	r1, [r7, #8]
 800c6ba:	607a      	str	r2, [r7, #4]
 800c6bc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d009      	beq.n	800c6dc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d003      	beq.n	800c6d6 <ip4_output_if+0x26>
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d102      	bne.n	800c6dc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800c6d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6d8:	3304      	adds	r3, #4
 800c6da:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800c6dc:	78fa      	ldrb	r2, [r7, #3]
 800c6de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6e0:	9302      	str	r3, [sp, #8]
 800c6e2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c6e6:	9301      	str	r3, [sp, #4]
 800c6e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c6ec:	9300      	str	r3, [sp, #0]
 800c6ee:	4613      	mov	r3, r2
 800c6f0:	687a      	ldr	r2, [r7, #4]
 800c6f2:	6979      	ldr	r1, [r7, #20]
 800c6f4:	68f8      	ldr	r0, [r7, #12]
 800c6f6:	f000 f805 	bl	800c704 <ip4_output_if_src>
 800c6fa:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	3718      	adds	r7, #24
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}

0800c704 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b088      	sub	sp, #32
 800c708:	af00      	add	r7, sp, #0
 800c70a:	60f8      	str	r0, [r7, #12]
 800c70c:	60b9      	str	r1, [r7, #8]
 800c70e:	607a      	str	r2, [r7, #4]
 800c710:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	89db      	ldrh	r3, [r3, #14]
 800c716:	2b01      	cmp	r3, #1
 800c718:	d006      	beq.n	800c728 <ip4_output_if_src+0x24>
 800c71a:	4b48      	ldr	r3, [pc, #288]	@ (800c83c <ip4_output_if_src+0x138>)
 800c71c:	f240 3233 	movw	r2, #819	@ 0x333
 800c720:	4947      	ldr	r1, [pc, #284]	@ (800c840 <ip4_output_if_src+0x13c>)
 800c722:	4848      	ldr	r0, [pc, #288]	@ (800c844 <ip4_output_if_src+0x140>)
 800c724:	f001 f842 	bl	800d7ac <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d060      	beq.n	800c7f0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800c72e:	2314      	movs	r3, #20
 800c730:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800c732:	2114      	movs	r1, #20
 800c734:	68f8      	ldr	r0, [r7, #12]
 800c736:	f7f8 ff1d 	bl	8005574 <pbuf_header>
 800c73a:	4603      	mov	r3, r0
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d002      	beq.n	800c746 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800c740:	f06f 0301 	mvn.w	r3, #1
 800c744:	e075      	b.n	800c832 <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	685b      	ldr	r3, [r3, #4]
 800c74a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	895b      	ldrh	r3, [r3, #10]
 800c750:	2b13      	cmp	r3, #19
 800c752:	d806      	bhi.n	800c762 <ip4_output_if_src+0x5e>
 800c754:	4b39      	ldr	r3, [pc, #228]	@ (800c83c <ip4_output_if_src+0x138>)
 800c756:	f44f 7258 	mov.w	r2, #864	@ 0x360
 800c75a:	493b      	ldr	r1, [pc, #236]	@ (800c848 <ip4_output_if_src+0x144>)
 800c75c:	4839      	ldr	r0, [pc, #228]	@ (800c844 <ip4_output_if_src+0x140>)
 800c75e:	f001 f825 	bl	800d7ac <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800c762:	69fb      	ldr	r3, [r7, #28]
 800c764:	78fa      	ldrb	r2, [r7, #3]
 800c766:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800c768:	69fb      	ldr	r3, [r7, #28]
 800c76a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800c76e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681a      	ldr	r2, [r3, #0]
 800c774:	69fb      	ldr	r3, [r7, #28]
 800c776:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800c778:	8b7b      	ldrh	r3, [r7, #26]
 800c77a:	089b      	lsrs	r3, r3, #2
 800c77c:	b29b      	uxth	r3, r3
 800c77e:	b2db      	uxtb	r3, r3
 800c780:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c784:	b2da      	uxtb	r2, r3
 800c786:	69fb      	ldr	r3, [r7, #28]
 800c788:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800c78a:	69fb      	ldr	r3, [r7, #28]
 800c78c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800c790:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	891b      	ldrh	r3, [r3, #8]
 800c796:	4618      	mov	r0, r3
 800c798:	f7f7 fdff 	bl	800439a <lwip_htons>
 800c79c:	4603      	mov	r3, r0
 800c79e:	461a      	mov	r2, r3
 800c7a0:	69fb      	ldr	r3, [r7, #28]
 800c7a2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800c7a4:	69fb      	ldr	r3, [r7, #28]
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	719a      	strb	r2, [r3, #6]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800c7ae:	4b27      	ldr	r3, [pc, #156]	@ (800c84c <ip4_output_if_src+0x148>)
 800c7b0:	881b      	ldrh	r3, [r3, #0]
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f7f7 fdf1 	bl	800439a <lwip_htons>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	461a      	mov	r2, r3
 800c7bc:	69fb      	ldr	r3, [r7, #28]
 800c7be:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800c7c0:	4b22      	ldr	r3, [pc, #136]	@ (800c84c <ip4_output_if_src+0x148>)
 800c7c2:	881b      	ldrh	r3, [r3, #0]
 800c7c4:	3301      	adds	r3, #1
 800c7c6:	b29a      	uxth	r2, r3
 800c7c8:	4b20      	ldr	r3, [pc, #128]	@ (800c84c <ip4_output_if_src+0x148>)
 800c7ca:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d104      	bne.n	800c7dc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800c7d2:	4b1f      	ldr	r3, [pc, #124]	@ (800c850 <ip4_output_if_src+0x14c>)
 800c7d4:	681a      	ldr	r2, [r3, #0]
 800c7d6:	69fb      	ldr	r3, [r7, #28]
 800c7d8:	60da      	str	r2, [r3, #12]
 800c7da:	e003      	b.n	800c7e4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	681a      	ldr	r2, [r3, #0]
 800c7e0:	69fb      	ldr	r3, [r7, #28]
 800c7e2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800c7e4:	69fb      	ldr	r3, [r7, #28]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	729a      	strb	r2, [r3, #10]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	72da      	strb	r2, [r3, #11]
 800c7ee:	e008      	b.n	800c802 <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	685b      	ldr	r3, [r3, #4]
 800c7f4:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800c7f6:	69fb      	ldr	r3, [r7, #28]
 800c7f8:	691b      	ldr	r3, [r3, #16]
 800c7fa:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800c7fc:	f107 0314 	add.w	r3, r7, #20
 800c800:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800c802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c804:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c806:	2b00      	cmp	r3, #0
 800c808:	d00c      	beq.n	800c824 <ip4_output_if_src+0x120>
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	891a      	ldrh	r2, [r3, #8]
 800c80e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c810:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c812:	429a      	cmp	r2, r3
 800c814:	d906      	bls.n	800c824 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 800c816:	687a      	ldr	r2, [r7, #4]
 800c818:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c81a:	68f8      	ldr	r0, [r7, #12]
 800c81c:	f000 fd08 	bl	800d230 <ip4_frag>
 800c820:	4603      	mov	r3, r0
 800c822:	e006      	b.n	800c832 <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800c824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c826:	695b      	ldr	r3, [r3, #20]
 800c828:	687a      	ldr	r2, [r7, #4]
 800c82a:	68f9      	ldr	r1, [r7, #12]
 800c82c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c82e:	4798      	blx	r3
 800c830:	4603      	mov	r3, r0
}
 800c832:	4618      	mov	r0, r3
 800c834:	3720      	adds	r7, #32
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}
 800c83a:	bf00      	nop
 800c83c:	0800fe80 	.word	0x0800fe80
 800c840:	0800feb4 	.word	0x0800feb4
 800c844:	0800fec0 	.word	0x0800fec0
 800c848:	0800fee8 	.word	0x0800fee8
 800c84c:	20006d9a 	.word	0x20006d9a
 800c850:	08010284 	.word	0x08010284

0800c854 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800c854:	b480      	push	{r7}
 800c856:	b085      	sub	sp, #20
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c868:	d002      	beq.n	800c870 <ip4_addr_isbroadcast_u32+0x1c>
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d101      	bne.n	800c874 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800c870:	2301      	movs	r3, #1
 800c872:	e02a      	b.n	800c8ca <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c87a:	f003 0302 	and.w	r3, r3, #2
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d101      	bne.n	800c886 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800c882:	2300      	movs	r3, #0
 800c884:	e021      	b.n	800c8ca <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	3304      	adds	r3, #4
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	687a      	ldr	r2, [r7, #4]
 800c88e:	429a      	cmp	r2, r3
 800c890:	d101      	bne.n	800c896 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800c892:	2300      	movs	r3, #0
 800c894:	e019      	b.n	800c8ca <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800c896:	68fa      	ldr	r2, [r7, #12]
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	3304      	adds	r3, #4
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	405a      	eors	r2, r3
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	3308      	adds	r3, #8
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	4013      	ands	r3, r2
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d10d      	bne.n	800c8c8 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	3308      	adds	r3, #8
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	43da      	mvns	r2, r3
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	3308      	adds	r3, #8
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	d101      	bne.n	800c8c8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	e000      	b.n	800c8ca <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800c8c8:	2300      	movs	r3, #0
  }
}
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	3714      	adds	r7, #20
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bc80      	pop	{r7}
 800c8d2:	4770      	bx	lr

0800c8d4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b084      	sub	sp, #16
 800c8d8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800c8de:	4b12      	ldr	r3, [pc, #72]	@ (800c928 <ip_reass_tmr+0x54>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800c8e4:	e018      	b.n	800c918 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	7fdb      	ldrb	r3, [r3, #31]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d00b      	beq.n	800c906 <ip_reass_tmr+0x32>
      r->timer--;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	7fdb      	ldrb	r3, [r3, #31]
 800c8f2:	3b01      	subs	r3, #1
 800c8f4:	b2da      	uxtb	r2, r3
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	60fb      	str	r3, [r7, #12]
 800c904:	e008      	b.n	800c918 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800c910:	68b9      	ldr	r1, [r7, #8]
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f000 f80a 	bl	800c92c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d1e3      	bne.n	800c8e6 <ip_reass_tmr+0x12>
     }
   }
}
 800c91e:	bf00      	nop
 800c920:	bf00      	nop
 800c922:	3710      	adds	r7, #16
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}
 800c928:	20006d9c 	.word	0x20006d9c

0800c92c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b088      	sub	sp, #32
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
 800c934:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800c936:	2300      	movs	r3, #0
 800c938:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800c93a:	683a      	ldr	r2, [r7, #0]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	429a      	cmp	r2, r3
 800c940:	d105      	bne.n	800c94e <ip_reass_free_complete_datagram+0x22>
 800c942:	4b45      	ldr	r3, [pc, #276]	@ (800ca58 <ip_reass_free_complete_datagram+0x12c>)
 800c944:	22ab      	movs	r2, #171	@ 0xab
 800c946:	4945      	ldr	r1, [pc, #276]	@ (800ca5c <ip_reass_free_complete_datagram+0x130>)
 800c948:	4845      	ldr	r0, [pc, #276]	@ (800ca60 <ip_reass_free_complete_datagram+0x134>)
 800c94a:	f000 ff2f 	bl	800d7ac <iprintf>
  if (prev != NULL) {
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d00a      	beq.n	800c96a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	687a      	ldr	r2, [r7, #4]
 800c95a:	429a      	cmp	r2, r3
 800c95c:	d005      	beq.n	800c96a <ip_reass_free_complete_datagram+0x3e>
 800c95e:	4b3e      	ldr	r3, [pc, #248]	@ (800ca58 <ip_reass_free_complete_datagram+0x12c>)
 800c960:	22ad      	movs	r2, #173	@ 0xad
 800c962:	4940      	ldr	r1, [pc, #256]	@ (800ca64 <ip_reass_free_complete_datagram+0x138>)
 800c964:	483e      	ldr	r0, [pc, #248]	@ (800ca60 <ip_reass_free_complete_datagram+0x134>)
 800c966:	f000 ff21 	bl	800d7ac <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	685b      	ldr	r3, [r3, #4]
 800c96e:	685b      	ldr	r3, [r3, #4]
 800c970:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800c972:	697b      	ldr	r3, [r7, #20]
 800c974:	889b      	ldrh	r3, [r3, #4]
 800c976:	b29b      	uxth	r3, r3
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d12a      	bne.n	800c9d2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	685b      	ldr	r3, [r3, #4]
 800c980:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	681a      	ldr	r2, [r3, #0]
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800c98a:	69bb      	ldr	r3, [r7, #24]
 800c98c:	6858      	ldr	r0, [r3, #4]
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	3308      	adds	r3, #8
 800c992:	2214      	movs	r2, #20
 800c994:	4619      	mov	r1, r3
 800c996:	f000 ffe4 	bl	800d962 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800c99a:	2101      	movs	r1, #1
 800c99c:	69b8      	ldr	r0, [r7, #24]
 800c99e:	f7ff fc67 	bl	800c270 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800c9a2:	69b8      	ldr	r0, [r7, #24]
 800c9a4:	f7f8 fe9e 	bl	80056e4 <pbuf_clen>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c9ac:	8bfa      	ldrh	r2, [r7, #30]
 800c9ae:	8a7b      	ldrh	r3, [r7, #18]
 800c9b0:	4413      	add	r3, r2
 800c9b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c9b6:	db05      	blt.n	800c9c4 <ip_reass_free_complete_datagram+0x98>
 800c9b8:	4b27      	ldr	r3, [pc, #156]	@ (800ca58 <ip_reass_free_complete_datagram+0x12c>)
 800c9ba:	22bc      	movs	r2, #188	@ 0xbc
 800c9bc:	492a      	ldr	r1, [pc, #168]	@ (800ca68 <ip_reass_free_complete_datagram+0x13c>)
 800c9be:	4828      	ldr	r0, [pc, #160]	@ (800ca60 <ip_reass_free_complete_datagram+0x134>)
 800c9c0:	f000 fef4 	bl	800d7ac <iprintf>
    pbufs_freed += clen;
 800c9c4:	8bfa      	ldrh	r2, [r7, #30]
 800c9c6:	8a7b      	ldrh	r3, [r7, #18]
 800c9c8:	4413      	add	r3, r2
 800c9ca:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800c9cc:	69b8      	ldr	r0, [r7, #24]
 800c9ce:	f7f8 fdf5 	bl	80055bc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	685b      	ldr	r3, [r3, #4]
 800c9d6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800c9d8:	e01f      	b.n	800ca1a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800c9da:	69bb      	ldr	r3, [r7, #24]
 800c9dc:	685b      	ldr	r3, [r3, #4]
 800c9de:	617b      	str	r3, [r7, #20]
    pcur = p;
 800c9e0:	69bb      	ldr	r3, [r7, #24]
 800c9e2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800c9ea:	68f8      	ldr	r0, [r7, #12]
 800c9ec:	f7f8 fe7a 	bl	80056e4 <pbuf_clen>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c9f4:	8bfa      	ldrh	r2, [r7, #30]
 800c9f6:	8a7b      	ldrh	r3, [r7, #18]
 800c9f8:	4413      	add	r3, r2
 800c9fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c9fe:	db05      	blt.n	800ca0c <ip_reass_free_complete_datagram+0xe0>
 800ca00:	4b15      	ldr	r3, [pc, #84]	@ (800ca58 <ip_reass_free_complete_datagram+0x12c>)
 800ca02:	22cc      	movs	r2, #204	@ 0xcc
 800ca04:	4918      	ldr	r1, [pc, #96]	@ (800ca68 <ip_reass_free_complete_datagram+0x13c>)
 800ca06:	4816      	ldr	r0, [pc, #88]	@ (800ca60 <ip_reass_free_complete_datagram+0x134>)
 800ca08:	f000 fed0 	bl	800d7ac <iprintf>
    pbufs_freed += clen;
 800ca0c:	8bfa      	ldrh	r2, [r7, #30]
 800ca0e:	8a7b      	ldrh	r3, [r7, #18]
 800ca10:	4413      	add	r3, r2
 800ca12:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800ca14:	68f8      	ldr	r0, [r7, #12]
 800ca16:	f7f8 fdd1 	bl	80055bc <pbuf_free>
  while (p != NULL) {
 800ca1a:	69bb      	ldr	r3, [r7, #24]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d1dc      	bne.n	800c9da <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800ca20:	6839      	ldr	r1, [r7, #0]
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f000 f8c2 	bl	800cbac <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800ca28:	4b10      	ldr	r3, [pc, #64]	@ (800ca6c <ip_reass_free_complete_datagram+0x140>)
 800ca2a:	881b      	ldrh	r3, [r3, #0]
 800ca2c:	8bfa      	ldrh	r2, [r7, #30]
 800ca2e:	429a      	cmp	r2, r3
 800ca30:	d905      	bls.n	800ca3e <ip_reass_free_complete_datagram+0x112>
 800ca32:	4b09      	ldr	r3, [pc, #36]	@ (800ca58 <ip_reass_free_complete_datagram+0x12c>)
 800ca34:	22d2      	movs	r2, #210	@ 0xd2
 800ca36:	490e      	ldr	r1, [pc, #56]	@ (800ca70 <ip_reass_free_complete_datagram+0x144>)
 800ca38:	4809      	ldr	r0, [pc, #36]	@ (800ca60 <ip_reass_free_complete_datagram+0x134>)
 800ca3a:	f000 feb7 	bl	800d7ac <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800ca3e:	4b0b      	ldr	r3, [pc, #44]	@ (800ca6c <ip_reass_free_complete_datagram+0x140>)
 800ca40:	881a      	ldrh	r2, [r3, #0]
 800ca42:	8bfb      	ldrh	r3, [r7, #30]
 800ca44:	1ad3      	subs	r3, r2, r3
 800ca46:	b29a      	uxth	r2, r3
 800ca48:	4b08      	ldr	r3, [pc, #32]	@ (800ca6c <ip_reass_free_complete_datagram+0x140>)
 800ca4a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800ca4c:	8bfb      	ldrh	r3, [r7, #30]
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	3720      	adds	r7, #32
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}
 800ca56:	bf00      	nop
 800ca58:	0800ff18 	.word	0x0800ff18
 800ca5c:	0800ff54 	.word	0x0800ff54
 800ca60:	0800ff60 	.word	0x0800ff60
 800ca64:	0800ff88 	.word	0x0800ff88
 800ca68:	0800ff9c 	.word	0x0800ff9c
 800ca6c:	20006da0 	.word	0x20006da0
 800ca70:	0800ffbc 	.word	0x0800ffbc

0800ca74 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b08a      	sub	sp, #40	@ 0x28
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
 800ca7c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800ca7e:	2300      	movs	r3, #0
 800ca80:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800ca82:	2300      	movs	r3, #0
 800ca84:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800ca86:	2300      	movs	r3, #0
 800ca88:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800ca92:	4b28      	ldr	r3, [pc, #160]	@ (800cb34 <ip_reass_remove_oldest_datagram+0xc0>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800ca98:	e030      	b.n	800cafc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800ca9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca9c:	695a      	ldr	r2, [r3, #20]
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	68db      	ldr	r3, [r3, #12]
 800caa2:	429a      	cmp	r2, r3
 800caa4:	d10c      	bne.n	800cac0 <ip_reass_remove_oldest_datagram+0x4c>
 800caa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caa8:	699a      	ldr	r2, [r3, #24]
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	691b      	ldr	r3, [r3, #16]
 800caae:	429a      	cmp	r2, r3
 800cab0:	d106      	bne.n	800cac0 <ip_reass_remove_oldest_datagram+0x4c>
 800cab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cab4:	899a      	ldrh	r2, [r3, #12]
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	889b      	ldrh	r3, [r3, #4]
 800caba:	b29b      	uxth	r3, r3
 800cabc:	429a      	cmp	r2, r3
 800cabe:	d014      	beq.n	800caea <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800cac0:	693b      	ldr	r3, [r7, #16]
 800cac2:	3301      	adds	r3, #1
 800cac4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800cac6:	6a3b      	ldr	r3, [r7, #32]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d104      	bne.n	800cad6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800cacc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cace:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800cad0:	69fb      	ldr	r3, [r7, #28]
 800cad2:	61bb      	str	r3, [r7, #24]
 800cad4:	e009      	b.n	800caea <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800cad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cad8:	7fda      	ldrb	r2, [r3, #31]
 800cada:	6a3b      	ldr	r3, [r7, #32]
 800cadc:	7fdb      	ldrb	r3, [r3, #31]
 800cade:	429a      	cmp	r2, r3
 800cae0:	d803      	bhi.n	800caea <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800cae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cae4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800cae6:	69fb      	ldr	r3, [r7, #28]
 800cae8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800caea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d001      	beq.n	800caf6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800caf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caf4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800caf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800cafc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d1cb      	bne.n	800ca9a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800cb02:	6a3b      	ldr	r3, [r7, #32]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d008      	beq.n	800cb1a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800cb08:	69b9      	ldr	r1, [r7, #24]
 800cb0a:	6a38      	ldr	r0, [r7, #32]
 800cb0c:	f7ff ff0e 	bl	800c92c <ip_reass_free_complete_datagram>
 800cb10:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800cb12:	697a      	ldr	r2, [r7, #20]
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	4413      	add	r3, r2
 800cb18:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800cb1a:	697a      	ldr	r2, [r7, #20]
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	429a      	cmp	r2, r3
 800cb20:	da02      	bge.n	800cb28 <ip_reass_remove_oldest_datagram+0xb4>
 800cb22:	693b      	ldr	r3, [r7, #16]
 800cb24:	2b01      	cmp	r3, #1
 800cb26:	dcac      	bgt.n	800ca82 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800cb28:	697b      	ldr	r3, [r7, #20]
}
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	3728      	adds	r7, #40	@ 0x28
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}
 800cb32:	bf00      	nop
 800cb34:	20006d9c 	.word	0x20006d9c

0800cb38 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b084      	sub	sp, #16
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
 800cb40:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800cb42:	2004      	movs	r0, #4
 800cb44:	f7f7 ffd2 	bl	8004aec <memp_malloc>
 800cb48:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d110      	bne.n	800cb72 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800cb50:	6839      	ldr	r1, [r7, #0]
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f7ff ff8e 	bl	800ca74 <ip_reass_remove_oldest_datagram>
 800cb58:	4602      	mov	r2, r0
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	4293      	cmp	r3, r2
 800cb5e:	dc03      	bgt.n	800cb68 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800cb60:	2004      	movs	r0, #4
 800cb62:	f7f7 ffc3 	bl	8004aec <memp_malloc>
 800cb66:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d101      	bne.n	800cb72 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	e016      	b.n	800cba0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800cb72:	2220      	movs	r2, #32
 800cb74:	2100      	movs	r1, #0
 800cb76:	68f8      	ldr	r0, [r7, #12]
 800cb78:	f000 fe7d 	bl	800d876 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	2203      	movs	r2, #3
 800cb80:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800cb82:	4b09      	ldr	r3, [pc, #36]	@ (800cba8 <ip_reass_enqueue_new_datagram+0x70>)
 800cb84:	681a      	ldr	r2, [r3, #0]
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800cb8a:	4a07      	ldr	r2, [pc, #28]	@ (800cba8 <ip_reass_enqueue_new_datagram+0x70>)
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	3308      	adds	r3, #8
 800cb94:	2214      	movs	r2, #20
 800cb96:	6879      	ldr	r1, [r7, #4]
 800cb98:	4618      	mov	r0, r3
 800cb9a:	f000 fee2 	bl	800d962 <memcpy>
  return ipr;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3710      	adds	r7, #16
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}
 800cba8:	20006d9c 	.word	0x20006d9c

0800cbac <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b082      	sub	sp, #8
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
 800cbb4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800cbb6:	4b10      	ldr	r3, [pc, #64]	@ (800cbf8 <ip_reass_dequeue_datagram+0x4c>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	687a      	ldr	r2, [r7, #4]
 800cbbc:	429a      	cmp	r2, r3
 800cbbe:	d104      	bne.n	800cbca <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	4a0c      	ldr	r2, [pc, #48]	@ (800cbf8 <ip_reass_dequeue_datagram+0x4c>)
 800cbc6:	6013      	str	r3, [r2, #0]
 800cbc8:	e00d      	b.n	800cbe6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d106      	bne.n	800cbde <ip_reass_dequeue_datagram+0x32>
 800cbd0:	4b0a      	ldr	r3, [pc, #40]	@ (800cbfc <ip_reass_dequeue_datagram+0x50>)
 800cbd2:	f240 1245 	movw	r2, #325	@ 0x145
 800cbd6:	490a      	ldr	r1, [pc, #40]	@ (800cc00 <ip_reass_dequeue_datagram+0x54>)
 800cbd8:	480a      	ldr	r0, [pc, #40]	@ (800cc04 <ip_reass_dequeue_datagram+0x58>)
 800cbda:	f000 fde7 	bl	800d7ac <iprintf>
    prev->next = ipr->next;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681a      	ldr	r2, [r3, #0]
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800cbe6:	6879      	ldr	r1, [r7, #4]
 800cbe8:	2004      	movs	r0, #4
 800cbea:	f7f7 ffcb 	bl	8004b84 <memp_free>
}
 800cbee:	bf00      	nop
 800cbf0:	3708      	adds	r7, #8
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}
 800cbf6:	bf00      	nop
 800cbf8:	20006d9c 	.word	0x20006d9c
 800cbfc:	0800ff18 	.word	0x0800ff18
 800cc00:	0800ffd8 	.word	0x0800ffd8
 800cc04:	0800ff60 	.word	0x0800ff60

0800cc08 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b08c      	sub	sp, #48	@ 0x30
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	60f8      	str	r0, [r7, #12]
 800cc10:	60b9      	str	r1, [r7, #8]
 800cc12:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800cc14:	2300      	movs	r3, #0
 800cc16:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800cc18:	2301      	movs	r3, #1
 800cc1a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	685b      	ldr	r3, [r3, #4]
 800cc20:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800cc22:	69fb      	ldr	r3, [r7, #28]
 800cc24:	885b      	ldrh	r3, [r3, #2]
 800cc26:	b29b      	uxth	r3, r3
 800cc28:	4618      	mov	r0, r3
 800cc2a:	f7f7 fbb6 	bl	800439a <lwip_htons>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	461a      	mov	r2, r3
 800cc32:	69fb      	ldr	r3, [r7, #28]
 800cc34:	781b      	ldrb	r3, [r3, #0]
 800cc36:	f003 030f 	and.w	r3, r3, #15
 800cc3a:	b29b      	uxth	r3, r3
 800cc3c:	009b      	lsls	r3, r3, #2
 800cc3e:	b29b      	uxth	r3, r3
 800cc40:	1ad3      	subs	r3, r2, r3
 800cc42:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800cc44:	69fb      	ldr	r3, [r7, #28]
 800cc46:	88db      	ldrh	r3, [r3, #6]
 800cc48:	b29b      	uxth	r3, r3
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f7f7 fba5 	bl	800439a <lwip_htons>
 800cc50:	4603      	mov	r3, r0
 800cc52:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cc56:	b29b      	uxth	r3, r3
 800cc58:	00db      	lsls	r3, r3, #3
 800cc5a:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	685b      	ldr	r3, [r3, #4]
 800cc60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800cc62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc64:	2200      	movs	r2, #0
 800cc66:	701a      	strb	r2, [r3, #0]
 800cc68:	2200      	movs	r2, #0
 800cc6a:	705a      	strb	r2, [r3, #1]
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	709a      	strb	r2, [r3, #2]
 800cc70:	2200      	movs	r2, #0
 800cc72:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800cc74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc76:	8b3a      	ldrh	r2, [r7, #24]
 800cc78:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 800cc7a:	8b3a      	ldrh	r2, [r7, #24]
 800cc7c:	8b7b      	ldrh	r3, [r7, #26]
 800cc7e:	4413      	add	r3, r2
 800cc80:	b29a      	uxth	r2, r3
 800cc82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc84:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	685b      	ldr	r3, [r3, #4]
 800cc8a:	627b      	str	r3, [r7, #36]	@ 0x24
 800cc8c:	e061      	b.n	800cd52 <ip_reass_chain_frag_into_datagram_and_validate+0x14a>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800cc8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc90:	685b      	ldr	r3, [r3, #4]
 800cc92:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 800cc94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc96:	889b      	ldrh	r3, [r3, #4]
 800cc98:	b29a      	uxth	r2, r3
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	889b      	ldrh	r3, [r3, #4]
 800cc9e:	b29b      	uxth	r3, r3
 800cca0:	429a      	cmp	r2, r3
 800cca2:	d232      	bcs.n	800cd0a <ip_reass_chain_frag_into_datagram_and_validate+0x102>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800cca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cca8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800ccaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d01f      	beq.n	800ccf0 <ip_reass_chain_frag_into_datagram_and_validate+0xe8>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800ccb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccb2:	889b      	ldrh	r3, [r3, #4]
 800ccb4:	b29a      	uxth	r2, r3
 800ccb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccb8:	88db      	ldrh	r3, [r3, #6]
 800ccba:	b29b      	uxth	r3, r3
 800ccbc:	429a      	cmp	r2, r3
 800ccbe:	f0c0 80e3 	bcc.w	800ce88 <ip_reass_chain_frag_into_datagram_and_validate+0x280>
 800ccc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccc4:	88db      	ldrh	r3, [r3, #6]
 800ccc6:	b29a      	uxth	r2, r3
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	889b      	ldrh	r3, [r3, #4]
 800cccc:	b29b      	uxth	r3, r3
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	f200 80da 	bhi.w	800ce88 <ip_reass_chain_frag_into_datagram_and_validate+0x280>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800ccd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccd6:	68ba      	ldr	r2, [r7, #8]
 800ccd8:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800ccda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccdc:	88db      	ldrh	r3, [r3, #6]
 800ccde:	b29a      	uxth	r2, r3
 800cce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cce2:	889b      	ldrh	r3, [r3, #4]
 800cce4:	b29b      	uxth	r3, r3
 800cce6:	429a      	cmp	r2, r3
 800cce8:	d037      	beq.n	800cd5a <ip_reass_chain_frag_into_datagram_and_validate+0x152>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800ccea:	2300      	movs	r3, #0
 800ccec:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800ccee:	e034      	b.n	800cd5a <ip_reass_chain_frag_into_datagram_and_validate+0x152>
        if (iprh->end > iprh_tmp->start) {
 800ccf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccf2:	88db      	ldrh	r3, [r3, #6]
 800ccf4:	b29a      	uxth	r2, r3
 800ccf6:	697b      	ldr	r3, [r7, #20]
 800ccf8:	889b      	ldrh	r3, [r3, #4]
 800ccfa:	b29b      	uxth	r3, r3
 800ccfc:	429a      	cmp	r2, r3
 800ccfe:	f200 80c5 	bhi.w	800ce8c <ip_reass_chain_frag_into_datagram_and_validate+0x284>
        ipr->p = new_p;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	68ba      	ldr	r2, [r7, #8]
 800cd06:	605a      	str	r2, [r3, #4]
      break;
 800cd08:	e027      	b.n	800cd5a <ip_reass_chain_frag_into_datagram_and_validate+0x152>
    } else if (iprh->start == iprh_tmp->start) {
 800cd0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd0c:	889b      	ldrh	r3, [r3, #4]
 800cd0e:	b29a      	uxth	r2, r3
 800cd10:	697b      	ldr	r3, [r7, #20]
 800cd12:	889b      	ldrh	r3, [r3, #4]
 800cd14:	b29b      	uxth	r3, r3
 800cd16:	429a      	cmp	r2, r3
 800cd18:	f000 80ba 	beq.w	800ce90 <ip_reass_chain_frag_into_datagram_and_validate+0x288>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800cd1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd1e:	889b      	ldrh	r3, [r3, #4]
 800cd20:	b29a      	uxth	r2, r3
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	88db      	ldrh	r3, [r3, #6]
 800cd26:	b29b      	uxth	r3, r3
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	f0c0 80b3 	bcc.w	800ce94 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800cd2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d009      	beq.n	800cd48 <ip_reass_chain_frag_into_datagram_and_validate+0x140>
        if (iprh_prev->end != iprh_tmp->start) {
 800cd34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd36:	88db      	ldrh	r3, [r3, #6]
 800cd38:	b29a      	uxth	r2, r3
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	889b      	ldrh	r3, [r3, #4]
 800cd3e:	b29b      	uxth	r3, r3
 800cd40:	429a      	cmp	r2, r3
 800cd42:	d001      	beq.n	800cd48 <ip_reass_chain_frag_into_datagram_and_validate+0x140>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800cd44:	2300      	movs	r3, #0
 800cd46:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800cd52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d19a      	bne.n	800cc8e <ip_reass_chain_frag_into_datagram_and_validate+0x86>
 800cd58:	e000      	b.n	800cd5c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
      break;
 800cd5a:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800cd5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d12d      	bne.n	800cdbe <ip_reass_chain_frag_into_datagram_and_validate+0x1b6>
    if (iprh_prev != NULL) {
 800cd62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d01c      	beq.n	800cda2 <ip_reass_chain_frag_into_datagram_and_validate+0x19a>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800cd68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd6a:	88db      	ldrh	r3, [r3, #6]
 800cd6c:	b29a      	uxth	r2, r3
 800cd6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd70:	889b      	ldrh	r3, [r3, #4]
 800cd72:	b29b      	uxth	r3, r3
 800cd74:	429a      	cmp	r2, r3
 800cd76:	d906      	bls.n	800cd86 <ip_reass_chain_frag_into_datagram_and_validate+0x17e>
 800cd78:	4b51      	ldr	r3, [pc, #324]	@ (800cec0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800cd7a:	f240 12ab 	movw	r2, #427	@ 0x1ab
 800cd7e:	4951      	ldr	r1, [pc, #324]	@ (800cec4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800cd80:	4851      	ldr	r0, [pc, #324]	@ (800cec8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800cd82:	f000 fd13 	bl	800d7ac <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800cd86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd88:	68ba      	ldr	r2, [r7, #8]
 800cd8a:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800cd8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd8e:	88db      	ldrh	r3, [r3, #6]
 800cd90:	b29a      	uxth	r2, r3
 800cd92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd94:	889b      	ldrh	r3, [r3, #4]
 800cd96:	b29b      	uxth	r3, r3
 800cd98:	429a      	cmp	r2, r3
 800cd9a:	d010      	beq.n	800cdbe <ip_reass_chain_frag_into_datagram_and_validate+0x1b6>
        valid = 0;
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	623b      	str	r3, [r7, #32]
 800cda0:	e00d      	b.n	800cdbe <ip_reass_chain_frag_into_datagram_and_validate+0x1b6>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	685b      	ldr	r3, [r3, #4]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d006      	beq.n	800cdb8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b0>
 800cdaa:	4b45      	ldr	r3, [pc, #276]	@ (800cec0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800cdac:	f240 12b3 	movw	r2, #435	@ 0x1b3
 800cdb0:	4946      	ldr	r1, [pc, #280]	@ (800cecc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800cdb2:	4845      	ldr	r0, [pc, #276]	@ (800cec8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800cdb4:	f000 fcfa 	bl	800d7ac <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	68ba      	ldr	r2, [r7, #8]
 800cdbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d105      	bne.n	800cdd0 <ip_reass_chain_frag_into_datagram_and_validate+0x1c8>
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	7f9b      	ldrb	r3, [r3, #30]
 800cdc8:	f003 0301 	and.w	r3, r3, #1
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d059      	beq.n	800ce84 <ip_reass_chain_frag_into_datagram_and_validate+0x27c>
    /* and had no holes so far */
    if (valid) {
 800cdd0:	6a3b      	ldr	r3, [r7, #32]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d04f      	beq.n	800ce76 <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	685b      	ldr	r3, [r3, #4]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d006      	beq.n	800cdec <ip_reass_chain_frag_into_datagram_and_validate+0x1e4>
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	685b      	ldr	r3, [r3, #4]
 800cde2:	685b      	ldr	r3, [r3, #4]
 800cde4:	889b      	ldrh	r3, [r3, #4]
 800cde6:	b29b      	uxth	r3, r3
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d002      	beq.n	800cdf2 <ip_reass_chain_frag_into_datagram_and_validate+0x1ea>
        valid = 0;
 800cdec:	2300      	movs	r3, #0
 800cdee:	623b      	str	r3, [r7, #32]
 800cdf0:	e041      	b.n	800ce76 <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800cdf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdf4:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800cdf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800cdfc:	e012      	b.n	800ce24 <ip_reass_chain_frag_into_datagram_and_validate+0x21c>
          iprh = (struct ip_reass_helper*)q->payload;
 800cdfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce00:	685b      	ldr	r3, [r3, #4]
 800ce02:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800ce04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce06:	88db      	ldrh	r3, [r3, #6]
 800ce08:	b29a      	uxth	r2, r3
 800ce0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce0c:	889b      	ldrh	r3, [r3, #4]
 800ce0e:	b29b      	uxth	r3, r3
 800ce10:	429a      	cmp	r2, r3
 800ce12:	d002      	beq.n	800ce1a <ip_reass_chain_frag_into_datagram_and_validate+0x212>
            valid = 0;
 800ce14:	2300      	movs	r3, #0
 800ce16:	623b      	str	r3, [r7, #32]
            break;
 800ce18:	e007      	b.n	800ce2a <ip_reass_chain_frag_into_datagram_and_validate+0x222>
          }
          iprh_prev = iprh;
 800ce1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce1c:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800ce1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800ce24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d1e9      	bne.n	800cdfe <ip_reass_chain_frag_into_datagram_and_validate+0x1f6>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800ce2a:	6a3b      	ldr	r3, [r7, #32]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d022      	beq.n	800ce76 <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	685b      	ldr	r3, [r3, #4]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d106      	bne.n	800ce46 <ip_reass_chain_frag_into_datagram_and_validate+0x23e>
 800ce38:	4b21      	ldr	r3, [pc, #132]	@ (800cec0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800ce3a:	f44f 72ea 	mov.w	r2, #468	@ 0x1d4
 800ce3e:	4924      	ldr	r1, [pc, #144]	@ (800ced0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800ce40:	4821      	ldr	r0, [pc, #132]	@ (800cec8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800ce42:	f000 fcb3 	bl	800d7ac <iprintf>
          LWIP_ASSERT("sanity check",
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	685b      	ldr	r3, [r3, #4]
 800ce4a:	685b      	ldr	r3, [r3, #4]
 800ce4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce4e:	429a      	cmp	r2, r3
 800ce50:	d106      	bne.n	800ce60 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
 800ce52:	4b1b      	ldr	r3, [pc, #108]	@ (800cec0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800ce54:	f240 12d5 	movw	r2, #469	@ 0x1d5
 800ce58:	491d      	ldr	r1, [pc, #116]	@ (800ced0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800ce5a:	481b      	ldr	r0, [pc, #108]	@ (800cec8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800ce5c:	f000 fca6 	bl	800d7ac <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800ce60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d006      	beq.n	800ce76 <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
 800ce68:	4b15      	ldr	r3, [pc, #84]	@ (800cec0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800ce6a:	f240 12d7 	movw	r2, #471	@ 0x1d7
 800ce6e:	4919      	ldr	r1, [pc, #100]	@ (800ced4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800ce70:	4815      	ldr	r0, [pc, #84]	@ (800cec8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800ce72:	f000 fc9b 	bl	800d7ac <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800ce76:	6a3b      	ldr	r3, [r7, #32]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	bf14      	ite	ne
 800ce7c:	2301      	movne	r3, #1
 800ce7e:	2300      	moveq	r3, #0
 800ce80:	b2db      	uxtb	r3, r3
 800ce82:	e018      	b.n	800ceb6 <ip_reass_chain_frag_into_datagram_and_validate+0x2ae>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800ce84:	2300      	movs	r3, #0
 800ce86:	e016      	b.n	800ceb6 <ip_reass_chain_frag_into_datagram_and_validate+0x2ae>
          goto freepbuf;
 800ce88:	bf00      	nop
 800ce8a:	e004      	b.n	800ce96 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
          goto freepbuf;
 800ce8c:	bf00      	nop
 800ce8e:	e002      	b.n	800ce96 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      goto freepbuf;
 800ce90:	bf00      	nop
 800ce92:	e000      	b.n	800ce96 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      goto freepbuf;
 800ce94:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800ce96:	68b8      	ldr	r0, [r7, #8]
 800ce98:	f7f8 fc24 	bl	80056e4 <pbuf_clen>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	461a      	mov	r2, r3
 800cea0:	4b0d      	ldr	r3, [pc, #52]	@ (800ced8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800cea2:	881b      	ldrh	r3, [r3, #0]
 800cea4:	1a9b      	subs	r3, r3, r2
 800cea6:	b29a      	uxth	r2, r3
 800cea8:	4b0b      	ldr	r3, [pc, #44]	@ (800ced8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800ceaa:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800ceac:	68b8      	ldr	r0, [r7, #8]
 800ceae:	f7f8 fb85 	bl	80055bc <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ceb2:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	3730      	adds	r7, #48	@ 0x30
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}
 800cebe:	bf00      	nop
 800cec0:	0800ff18 	.word	0x0800ff18
 800cec4:	0800fff4 	.word	0x0800fff4
 800cec8:	0800ff60 	.word	0x0800ff60
 800cecc:	08010014 	.word	0x08010014
 800ced0:	0801004c 	.word	0x0801004c
 800ced4:	0801005c 	.word	0x0801005c
 800ced8:	20006da0 	.word	0x20006da0

0800cedc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b08e      	sub	sp, #56	@ 0x38
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	685b      	ldr	r3, [r3, #4]
 800cee8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800ceea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceec:	781b      	ldrb	r3, [r3, #0]
 800ceee:	f003 030f 	and.w	r3, r3, #15
 800cef2:	2b05      	cmp	r3, #5
 800cef4:	f040 8130 	bne.w	800d158 <ip4_reass+0x27c>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800cef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cefa:	88db      	ldrh	r3, [r3, #6]
 800cefc:	b29b      	uxth	r3, r3
 800cefe:	4618      	mov	r0, r3
 800cf00:	f7f7 fa4b 	bl	800439a <lwip_htons>
 800cf04:	4603      	mov	r3, r0
 800cf06:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cf0a:	b29b      	uxth	r3, r3
 800cf0c:	00db      	lsls	r3, r3, #3
 800cf0e:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800cf10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf12:	885b      	ldrh	r3, [r3, #2]
 800cf14:	b29b      	uxth	r3, r3
 800cf16:	4618      	mov	r0, r3
 800cf18:	f7f7 fa3f 	bl	800439a <lwip_htons>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	461a      	mov	r2, r3
 800cf20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf22:	781b      	ldrb	r3, [r3, #0]
 800cf24:	f003 030f 	and.w	r3, r3, #15
 800cf28:	b29b      	uxth	r3, r3
 800cf2a:	009b      	lsls	r3, r3, #2
 800cf2c:	b29b      	uxth	r3, r3
 800cf2e:	1ad3      	subs	r3, r2, r3
 800cf30:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800cf32:	6878      	ldr	r0, [r7, #4]
 800cf34:	f7f8 fbd6 	bl	80056e4 <pbuf_clen>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800cf3c:	4b8e      	ldr	r3, [pc, #568]	@ (800d178 <ip4_reass+0x29c>)
 800cf3e:	881b      	ldrh	r3, [r3, #0]
 800cf40:	461a      	mov	r2, r3
 800cf42:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cf44:	4413      	add	r3, r2
 800cf46:	2b0a      	cmp	r3, #10
 800cf48:	dd10      	ble.n	800cf6c <ip4_reass+0x90>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800cf4a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cf4c:	4619      	mov	r1, r3
 800cf4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf50:	f7ff fd90 	bl	800ca74 <ip_reass_remove_oldest_datagram>
 800cf54:	4603      	mov	r3, r0
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	f000 8100 	beq.w	800d15c <ip4_reass+0x280>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800cf5c:	4b86      	ldr	r3, [pc, #536]	@ (800d178 <ip4_reass+0x29c>)
 800cf5e:	881b      	ldrh	r3, [r3, #0]
 800cf60:	461a      	mov	r2, r3
 800cf62:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cf64:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800cf66:	2b0a      	cmp	r3, #10
 800cf68:	f300 80f8 	bgt.w	800d15c <ip4_reass+0x280>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800cf6c:	4b83      	ldr	r3, [pc, #524]	@ (800d17c <ip4_reass+0x2a0>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	633b      	str	r3, [r7, #48]	@ 0x30
 800cf72:	e015      	b.n	800cfa0 <ip4_reass+0xc4>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800cf74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf76:	695a      	ldr	r2, [r3, #20]
 800cf78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf7a:	68db      	ldr	r3, [r3, #12]
 800cf7c:	429a      	cmp	r2, r3
 800cf7e:	d10c      	bne.n	800cf9a <ip4_reass+0xbe>
 800cf80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf82:	699a      	ldr	r2, [r3, #24]
 800cf84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf86:	691b      	ldr	r3, [r3, #16]
 800cf88:	429a      	cmp	r2, r3
 800cf8a:	d106      	bne.n	800cf9a <ip4_reass+0xbe>
 800cf8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf8e:	899a      	ldrh	r2, [r3, #12]
 800cf90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf92:	889b      	ldrh	r3, [r3, #4]
 800cf94:	b29b      	uxth	r3, r3
 800cf96:	429a      	cmp	r2, r3
 800cf98:	d006      	beq.n	800cfa8 <ip4_reass+0xcc>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800cf9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	633b      	str	r3, [r7, #48]	@ 0x30
 800cfa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d1e6      	bne.n	800cf74 <ip4_reass+0x98>
 800cfa6:	e000      	b.n	800cfaa <ip4_reass+0xce>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800cfa8:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800cfaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d109      	bne.n	800cfc4 <ip4_reass+0xe8>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800cfb0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cfb2:	4619      	mov	r1, r3
 800cfb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cfb6:	f7ff fdbf 	bl	800cb38 <ip_reass_enqueue_new_datagram>
 800cfba:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800cfbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d11c      	bne.n	800cffc <ip4_reass+0x120>
      goto nullreturn;
 800cfc2:	e0d0      	b.n	800d166 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800cfc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfc6:	88db      	ldrh	r3, [r3, #6]
 800cfc8:	b29b      	uxth	r3, r3
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f7f7 f9e5 	bl	800439a <lwip_htons>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d110      	bne.n	800cffc <ip4_reass+0x120>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800cfda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfdc:	89db      	ldrh	r3, [r3, #14]
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f7f7 f9db 	bl	800439a <lwip_htons>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d006      	beq.n	800cffc <ip4_reass+0x120>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800cfee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cff0:	3308      	adds	r3, #8
 800cff2:	2214      	movs	r2, #20
 800cff4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cff6:	4618      	mov	r0, r3
 800cff8:	f000 fcb3 	bl	800d962 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800cffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cffe:	88db      	ldrh	r3, [r3, #6]
 800d000:	b29b      	uxth	r3, r3
 800d002:	f003 0320 	and.w	r3, r3, #32
 800d006:	2b00      	cmp	r3, #0
 800d008:	bf0c      	ite	eq
 800d00a:	2301      	moveq	r3, #1
 800d00c:	2300      	movne	r3, #0
 800d00e:	b2db      	uxtb	r3, r3
 800d010:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800d012:	69fb      	ldr	r3, [r7, #28]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d00e      	beq.n	800d036 <ip4_reass+0x15a>
    u16_t datagram_len = (u16_t)(offset + len);
 800d018:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800d01a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d01c:	4413      	add	r3, r2
 800d01e:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800d020:	8b7a      	ldrh	r2, [r7, #26]
 800d022:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d024:	429a      	cmp	r2, r3
 800d026:	f0c0 809b 	bcc.w	800d160 <ip4_reass+0x284>
 800d02a:	8b7b      	ldrh	r3, [r7, #26]
 800d02c:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800d030:	4293      	cmp	r3, r2
 800d032:	f200 8095 	bhi.w	800d160 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800d036:	69fa      	ldr	r2, [r7, #28]
 800d038:	6879      	ldr	r1, [r7, #4]
 800d03a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d03c:	f7ff fde4 	bl	800cc08 <ip_reass_chain_frag_into_datagram_and_validate>
 800d040:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800d042:	697b      	ldr	r3, [r7, #20]
 800d044:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d048:	f000 808c 	beq.w	800d164 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d04c:	4b4a      	ldr	r3, [pc, #296]	@ (800d178 <ip4_reass+0x29c>)
 800d04e:	881a      	ldrh	r2, [r3, #0]
 800d050:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d052:	4413      	add	r3, r2
 800d054:	b29a      	uxth	r2, r3
 800d056:	4b48      	ldr	r3, [pc, #288]	@ (800d178 <ip4_reass+0x29c>)
 800d058:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800d05a:	69fb      	ldr	r3, [r7, #28]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d00d      	beq.n	800d07c <ip4_reass+0x1a0>
    u16_t datagram_len = (u16_t)(offset + len);
 800d060:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800d062:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d064:	4413      	add	r3, r2
 800d066:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800d068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d06a:	8a7a      	ldrh	r2, [r7, #18]
 800d06c:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800d06e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d070:	7f9b      	ldrb	r3, [r3, #30]
 800d072:	f043 0301 	orr.w	r3, r3, #1
 800d076:	b2da      	uxtb	r2, r3
 800d078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d07a:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800d07c:	697b      	ldr	r3, [r7, #20]
 800d07e:	2b01      	cmp	r3, #1
 800d080:	d168      	bne.n	800d154 <ip4_reass+0x278>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800d082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d084:	8b9b      	ldrh	r3, [r3, #28]
 800d086:	3314      	adds	r3, #20
 800d088:	b29a      	uxth	r2, r3
 800d08a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d08c:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800d08e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d090:	685b      	ldr	r3, [r3, #4]
 800d092:	685b      	ldr	r3, [r3, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800d098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d09a:	685b      	ldr	r3, [r3, #4]
 800d09c:	685b      	ldr	r3, [r3, #4]
 800d09e:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800d0a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0a2:	3308      	adds	r3, #8
 800d0a4:	2214      	movs	r2, #20
 800d0a6:	4619      	mov	r1, r3
 800d0a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d0aa:	f000 fc5a 	bl	800d962 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800d0ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0b0:	8b9b      	ldrh	r3, [r3, #28]
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f7f7 f971 	bl	800439a <lwip_htons>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	461a      	mov	r2, r3
 800d0bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0be:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800d0c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	719a      	strb	r2, [r3, #6]
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800d0ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	729a      	strb	r2, [r3, #10]
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800d0d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0d6:	685b      	ldr	r3, [r3, #4]
 800d0d8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800d0da:	e00e      	b.n	800d0fa <ip4_reass+0x21e>
      iprh = (struct ip_reass_helper*)r->payload;
 800d0dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0de:	685b      	ldr	r3, [r3, #4]
 800d0e0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 800d0e2:	f06f 0113 	mvn.w	r1, #19
 800d0e6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d0e8:	f7f8 fa44 	bl	8005574 <pbuf_header>
      pbuf_cat(p, r);
 800d0ec:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d0ee:	6878      	ldr	r0, [r7, #4]
 800d0f0:	f7f8 fb30 	bl	8005754 <pbuf_cat>
      r = iprh->next_pbuf;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800d0fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d1ed      	bne.n	800d0dc <ip4_reass+0x200>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800d100:	4b1e      	ldr	r3, [pc, #120]	@ (800d17c <ip4_reass+0x2a0>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d106:	429a      	cmp	r2, r3
 800d108:	d102      	bne.n	800d110 <ip4_reass+0x234>
      ipr_prev = NULL;
 800d10a:	2300      	movs	r3, #0
 800d10c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d10e:	e010      	b.n	800d132 <ip4_reass+0x256>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d110:	4b1a      	ldr	r3, [pc, #104]	@ (800d17c <ip4_reass+0x2a0>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d116:	e007      	b.n	800d128 <ip4_reass+0x24c>
        if (ipr_prev->next == ipr) {
 800d118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d11e:	429a      	cmp	r2, r3
 800d120:	d006      	beq.n	800d130 <ip4_reass+0x254>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d1f4      	bne.n	800d118 <ip4_reass+0x23c>
 800d12e:	e000      	b.n	800d132 <ip4_reass+0x256>
          break;
 800d130:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800d132:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d134:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d136:	f7ff fd39 	bl	800cbac <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800d13a:	6878      	ldr	r0, [r7, #4]
 800d13c:	f7f8 fad2 	bl	80056e4 <pbuf_clen>
 800d140:	4603      	mov	r3, r0
 800d142:	461a      	mov	r2, r3
 800d144:	4b0c      	ldr	r3, [pc, #48]	@ (800d178 <ip4_reass+0x29c>)
 800d146:	881b      	ldrh	r3, [r3, #0]
 800d148:	1a9b      	subs	r3, r3, r2
 800d14a:	b29a      	uxth	r2, r3
 800d14c:	4b0a      	ldr	r3, [pc, #40]	@ (800d178 <ip4_reass+0x29c>)
 800d14e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	e00c      	b.n	800d16e <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800d154:	2300      	movs	r3, #0
 800d156:	e00a      	b.n	800d16e <ip4_reass+0x292>
    goto nullreturn;
 800d158:	bf00      	nop
 800d15a:	e004      	b.n	800d166 <ip4_reass+0x28a>
      goto nullreturn;
 800d15c:	bf00      	nop
 800d15e:	e002      	b.n	800d166 <ip4_reass+0x28a>
      goto nullreturn;
 800d160:	bf00      	nop
 800d162:	e000      	b.n	800d166 <ip4_reass+0x28a>
    goto nullreturn;
 800d164:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f7f8 fa28 	bl	80055bc <pbuf_free>
  return NULL;
 800d16c:	2300      	movs	r3, #0
}
 800d16e:	4618      	mov	r0, r3
 800d170:	3738      	adds	r7, #56	@ 0x38
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}
 800d176:	bf00      	nop
 800d178:	20006da0 	.word	0x20006da0
 800d17c:	20006d9c 	.word	0x20006d9c

0800d180 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800d184:	2005      	movs	r0, #5
 800d186:	f7f7 fcb1 	bl	8004aec <memp_malloc>
 800d18a:	4603      	mov	r3, r0
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	bd80      	pop	{r7, pc}

0800d190 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b082      	sub	sp, #8
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d106      	bne.n	800d1ac <ip_frag_free_pbuf_custom_ref+0x1c>
 800d19e:	4b07      	ldr	r3, [pc, #28]	@ (800d1bc <ip_frag_free_pbuf_custom_ref+0x2c>)
 800d1a0:	f240 22ae 	movw	r2, #686	@ 0x2ae
 800d1a4:	4906      	ldr	r1, [pc, #24]	@ (800d1c0 <ip_frag_free_pbuf_custom_ref+0x30>)
 800d1a6:	4807      	ldr	r0, [pc, #28]	@ (800d1c4 <ip_frag_free_pbuf_custom_ref+0x34>)
 800d1a8:	f000 fb00 	bl	800d7ac <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800d1ac:	6879      	ldr	r1, [r7, #4]
 800d1ae:	2005      	movs	r0, #5
 800d1b0:	f7f7 fce8 	bl	8004b84 <memp_free>
}
 800d1b4:	bf00      	nop
 800d1b6:	3708      	adds	r7, #8
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bd80      	pop	{r7, pc}
 800d1bc:	0800ff18 	.word	0x0800ff18
 800d1c0:	08010080 	.word	0x08010080
 800d1c4:	0800ff60 	.word	0x0800ff60

0800d1c8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b084      	sub	sp, #16
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d106      	bne.n	800d1e8 <ipfrag_free_pbuf_custom+0x20>
 800d1da:	4b11      	ldr	r3, [pc, #68]	@ (800d220 <ipfrag_free_pbuf_custom+0x58>)
 800d1dc:	f44f 722e 	mov.w	r2, #696	@ 0x2b8
 800d1e0:	4910      	ldr	r1, [pc, #64]	@ (800d224 <ipfrag_free_pbuf_custom+0x5c>)
 800d1e2:	4811      	ldr	r0, [pc, #68]	@ (800d228 <ipfrag_free_pbuf_custom+0x60>)
 800d1e4:	f000 fae2 	bl	800d7ac <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 800d1e8:	68fa      	ldr	r2, [r7, #12]
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	429a      	cmp	r2, r3
 800d1ee:	d006      	beq.n	800d1fe <ipfrag_free_pbuf_custom+0x36>
 800d1f0:	4b0b      	ldr	r3, [pc, #44]	@ (800d220 <ipfrag_free_pbuf_custom+0x58>)
 800d1f2:	f240 22b9 	movw	r2, #697	@ 0x2b9
 800d1f6:	490d      	ldr	r1, [pc, #52]	@ (800d22c <ipfrag_free_pbuf_custom+0x64>)
 800d1f8:	480b      	ldr	r0, [pc, #44]	@ (800d228 <ipfrag_free_pbuf_custom+0x60>)
 800d1fa:	f000 fad7 	bl	800d7ac <iprintf>
  if (pcr->original != NULL) {
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	695b      	ldr	r3, [r3, #20]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d004      	beq.n	800d210 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	695b      	ldr	r3, [r3, #20]
 800d20a:	4618      	mov	r0, r3
 800d20c:	f7f8 f9d6 	bl	80055bc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800d210:	68f8      	ldr	r0, [r7, #12]
 800d212:	f7ff ffbd 	bl	800d190 <ip_frag_free_pbuf_custom_ref>
}
 800d216:	bf00      	nop
 800d218:	3710      	adds	r7, #16
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}
 800d21e:	bf00      	nop
 800d220:	0800ff18 	.word	0x0800ff18
 800d224:	0801008c 	.word	0x0801008c
 800d228:	0800ff60 	.word	0x0800ff60
 800d22c:	08010098 	.word	0x08010098

0800d230 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b092      	sub	sp, #72	@ 0x48
 800d234:	af02      	add	r7, sp, #8
 800d236:	60f8      	str	r0, [r7, #12]
 800d238:	60b9      	str	r1, [r7, #8]
 800d23a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800d23c:	2300      	movs	r3, #0
 800d23e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800d240:	68bb      	ldr	r3, [r7, #8]
 800d242:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d244:	3b14      	subs	r3, #20
 800d246:	2b00      	cmp	r3, #0
 800d248:	da00      	bge.n	800d24c <ip4_frag+0x1c>
 800d24a:	3307      	adds	r3, #7
 800d24c:	10db      	asrs	r3, r3, #3
 800d24e:	867b      	strh	r3, [r7, #50]	@ 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800d250:	2314      	movs	r3, #20
 800d252:	86fb      	strh	r3, [r7, #54]	@ 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	685b      	ldr	r3, [r3, #4]
 800d258:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iphdr = original_iphdr;
 800d25a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d25c:	62bb      	str	r3, [r7, #40]	@ 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800d25e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d260:	781b      	ldrb	r3, [r3, #0]
 800d262:	f003 030f 	and.w	r3, r3, #15
 800d266:	2b05      	cmp	r3, #5
 800d268:	d009      	beq.n	800d27e <ip4_frag+0x4e>
 800d26a:	4b7a      	ldr	r3, [pc, #488]	@ (800d454 <ip4_frag+0x224>)
 800d26c:	f240 22e1 	movw	r2, #737	@ 0x2e1
 800d270:	4979      	ldr	r1, [pc, #484]	@ (800d458 <ip4_frag+0x228>)
 800d272:	487a      	ldr	r0, [pc, #488]	@ (800d45c <ip4_frag+0x22c>)
 800d274:	f000 fa9a 	bl	800d7ac <iprintf>
 800d278:	f06f 0305 	mvn.w	r3, #5
 800d27c:	e0e6      	b.n	800d44c <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800d27e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d280:	88db      	ldrh	r3, [r3, #6]
 800d282:	b29b      	uxth	r3, r3
 800d284:	4618      	mov	r0, r3
 800d286:	f7f7 f888 	bl	800439a <lwip_htons>
 800d28a:	4603      	mov	r3, r0
 800d28c:	86bb      	strh	r3, [r7, #52]	@ 0x34
  ofo = tmp & IP_OFFMASK;
 800d28e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800d290:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d294:	873b      	strh	r3, [r7, #56]	@ 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800d296:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800d298:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d009      	beq.n	800d2b4 <ip4_frag+0x84>
 800d2a0:	4b6c      	ldr	r3, [pc, #432]	@ (800d454 <ip4_frag+0x224>)
 800d2a2:	f240 22e6 	movw	r2, #742	@ 0x2e6
 800d2a6:	496e      	ldr	r1, [pc, #440]	@ (800d460 <ip4_frag+0x230>)
 800d2a8:	486c      	ldr	r0, [pc, #432]	@ (800d45c <ip4_frag+0x22c>)
 800d2aa:	f000 fa7f 	bl	800d7ac <iprintf>
 800d2ae:	f06f 0305 	mvn.w	r3, #5
 800d2b2:	e0cb      	b.n	800d44c <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	891b      	ldrh	r3, [r3, #8]
 800d2b8:	3b14      	subs	r3, #20
 800d2ba:	877b      	strh	r3, [r7, #58]	@ 0x3a

  while (left) {
 800d2bc:	e0bd      	b.n	800d43a <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800d2be:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800d2c0:	00da      	lsls	r2, r3, #3
 800d2c2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	bfa8      	it	ge
 800d2c8:	4613      	movge	r3, r2
 800d2ca:	84fb      	strh	r3, [r7, #38]	@ 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	2114      	movs	r1, #20
 800d2d0:	2002      	movs	r0, #2
 800d2d2:	f7f7 fdfb 	bl	8004ecc <pbuf_alloc>
 800d2d6:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 800d2d8:	6a3b      	ldr	r3, [r7, #32]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	f000 80b3 	beq.w	800d446 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	895b      	ldrh	r3, [r3, #10]
 800d2e4:	2b13      	cmp	r3, #19
 800d2e6:	d806      	bhi.n	800d2f6 <ip4_frag+0xc6>
 800d2e8:	4b5a      	ldr	r3, [pc, #360]	@ (800d454 <ip4_frag+0x224>)
 800d2ea:	f44f 7242 	mov.w	r2, #776	@ 0x308
 800d2ee:	495d      	ldr	r1, [pc, #372]	@ (800d464 <ip4_frag+0x234>)
 800d2f0:	485a      	ldr	r0, [pc, #360]	@ (800d45c <ip4_frag+0x22c>)
 800d2f2:	f000 fa5b 	bl	800d7ac <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800d2f6:	6a3b      	ldr	r3, [r7, #32]
 800d2f8:	685b      	ldr	r3, [r3, #4]
 800d2fa:	2214      	movs	r2, #20
 800d2fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d2fe:	4618      	mov	r0, r3
 800d300:	f000 fb2f 	bl	800d962 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800d304:	6a3b      	ldr	r3, [r7, #32]
 800d306:	685b      	ldr	r3, [r3, #4]
 800d308:	62bb      	str	r3, [r7, #40]	@ 0x28

    left_to_copy = fragsize;
 800d30a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d30c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    while (left_to_copy) {
 800d30e:	e04f      	b.n	800d3b0 <ip4_frag+0x180>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	895a      	ldrh	r2, [r3, #10]
 800d314:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d316:	1ad3      	subs	r3, r2, r3
 800d318:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800d31a:	8b7a      	ldrh	r2, [r7, #26]
 800d31c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d31e:	4293      	cmp	r3, r2
 800d320:	bf28      	it	cs
 800d322:	4613      	movcs	r3, r2
 800d324:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800d326:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d105      	bne.n	800d338 <ip4_frag+0x108>
        poff = 0;
 800d32c:	2300      	movs	r3, #0
 800d32e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        p = p->next;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	60fb      	str	r3, [r7, #12]
        continue;
 800d336:	e03b      	b.n	800d3b0 <ip4_frag+0x180>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800d338:	f7ff ff22 	bl	800d180 <ip_frag_alloc_pbuf_custom_ref>
 800d33c:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 800d33e:	697b      	ldr	r3, [r7, #20]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d103      	bne.n	800d34c <ip4_frag+0x11c>
        pbuf_free(rambuf);
 800d344:	6a38      	ldr	r0, [r7, #32]
 800d346:	f7f8 f939 	bl	80055bc <pbuf_free>
        goto memerr;
 800d34a:	e07d      	b.n	800d448 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d34c:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d352:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d354:	4413      	add	r3, r2
 800d356:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 800d358:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800d35a:	9201      	str	r2, [sp, #4]
 800d35c:	9300      	str	r3, [sp, #0]
 800d35e:	4603      	mov	r3, r0
 800d360:	2202      	movs	r2, #2
 800d362:	2004      	movs	r0, #4
 800d364:	f7f7 ff4c 	bl	8005200 <pbuf_alloced_custom>
 800d368:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 800d36a:	693b      	ldr	r3, [r7, #16]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d106      	bne.n	800d37e <ip4_frag+0x14e>
        ip_frag_free_pbuf_custom_ref(pcr);
 800d370:	6978      	ldr	r0, [r7, #20]
 800d372:	f7ff ff0d 	bl	800d190 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800d376:	6a38      	ldr	r0, [r7, #32]
 800d378:	f7f8 f920 	bl	80055bc <pbuf_free>
        goto memerr;
 800d37c:	e064      	b.n	800d448 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 800d37e:	68f8      	ldr	r0, [r7, #12]
 800d380:	f7f8 f9c6 	bl	8005710 <pbuf_ref>
      pcr->original = p;
 800d384:	697b      	ldr	r3, [r7, #20]
 800d386:	68fa      	ldr	r2, [r7, #12]
 800d388:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	4a36      	ldr	r2, [pc, #216]	@ (800d468 <ip4_frag+0x238>)
 800d38e:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800d390:	6939      	ldr	r1, [r7, #16]
 800d392:	6a38      	ldr	r0, [r7, #32]
 800d394:	f7f8 f9de 	bl	8005754 <pbuf_cat>
      left_to_copy -= newpbuflen;
 800d398:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800d39a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d39c:	1ad3      	subs	r3, r2, r3
 800d39e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
      if (left_to_copy) {
 800d3a0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d004      	beq.n	800d3b0 <ip4_frag+0x180>
        poff = 0;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        p = p->next;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800d3b0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d1ac      	bne.n	800d310 <ip4_frag+0xe0>
      }
    }
    poff += newpbuflen;
 800d3b6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d3b8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d3ba:	4413      	add	r3, r2
 800d3bc:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d3c2:	f1a3 0213 	sub.w	r2, r3, #19
 800d3c6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	bfcc      	ite	gt
 800d3cc:	2301      	movgt	r3, #1
 800d3ce:	2300      	movle	r3, #0
 800d3d0:	b2db      	uxtb	r3, r3
 800d3d2:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800d3d4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800d3d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d3da:	86bb      	strh	r3, [r7, #52]	@ 0x34
    if (!last) {
 800d3dc:	69fb      	ldr	r3, [r7, #28]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d103      	bne.n	800d3ea <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 800d3e2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800d3e4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800d3e8:	86bb      	strh	r3, [r7, #52]	@ 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800d3ea:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f7f6 ffd4 	bl	800439a <lwip_htons>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	461a      	mov	r2, r3
 800d3f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3f8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800d3fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d3fc:	3314      	adds	r3, #20
 800d3fe:	b29b      	uxth	r3, r3
 800d400:	4618      	mov	r0, r3
 800d402:	f7f6 ffca 	bl	800439a <lwip_htons>
 800d406:	4603      	mov	r3, r0
 800d408:	461a      	mov	r2, r3
 800d40a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d40c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800d40e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d410:	2200      	movs	r2, #0
 800d412:	729a      	strb	r2, [r3, #10]
 800d414:	2200      	movs	r2, #0
 800d416:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	695b      	ldr	r3, [r3, #20]
 800d41c:	687a      	ldr	r2, [r7, #4]
 800d41e:	6a39      	ldr	r1, [r7, #32]
 800d420:	68b8      	ldr	r0, [r7, #8]
 800d422:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800d424:	6a38      	ldr	r0, [r7, #32]
 800d426:	f7f8 f8c9 	bl	80055bc <pbuf_free>
    left -= fragsize;
 800d42a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d42c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d42e:	1ad3      	subs	r3, r2, r3
 800d430:	877b      	strh	r3, [r7, #58]	@ 0x3a
    ofo += nfb;
 800d432:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800d434:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800d436:	4413      	add	r3, r2
 800d438:	873b      	strh	r3, [r7, #56]	@ 0x38
  while (left) {
 800d43a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	f47f af3e 	bne.w	800d2be <ip4_frag+0x8e>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800d442:	2300      	movs	r3, #0
 800d444:	e002      	b.n	800d44c <ip4_frag+0x21c>
      goto memerr;
 800d446:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800d448:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d44c:	4618      	mov	r0, r3
 800d44e:	3740      	adds	r7, #64	@ 0x40
 800d450:	46bd      	mov	sp, r7
 800d452:	bd80      	pop	{r7, pc}
 800d454:	0800ff18 	.word	0x0800ff18
 800d458:	080100a4 	.word	0x080100a4
 800d45c:	0800ff60 	.word	0x0800ff60
 800d460:	080100cc 	.word	0x080100cc
 800d464:	080100e8 	.word	0x080100e8
 800d468:	0800d1c9 	.word	0x0800d1c9

0800d46c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b086      	sub	sp, #24
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
 800d474:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 800d476:	230e      	movs	r3, #14
 800d478:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	895b      	ldrh	r3, [r3, #10]
 800d47e:	2b0e      	cmp	r3, #14
 800d480:	d977      	bls.n	800d572 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	685b      	ldr	r3, [r3, #4]
 800d486:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	7b1a      	ldrb	r2, [r3, #12]
 800d48c:	7b5b      	ldrb	r3, [r3, #13]
 800d48e:	021b      	lsls	r3, r3, #8
 800d490:	4313      	orrs	r3, r2
 800d492:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800d494:	693b      	ldr	r3, [r7, #16]
 800d496:	781b      	ldrb	r3, [r3, #0]
 800d498:	f003 0301 	and.w	r3, r3, #1
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d023      	beq.n	800d4e8 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	781b      	ldrb	r3, [r3, #0]
 800d4a4:	2b01      	cmp	r3, #1
 800d4a6:	d10f      	bne.n	800d4c8 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	785b      	ldrb	r3, [r3, #1]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d11b      	bne.n	800d4e8 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800d4b0:	693b      	ldr	r3, [r7, #16]
 800d4b2:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d4b4:	2b5e      	cmp	r3, #94	@ 0x5e
 800d4b6:	d117      	bne.n	800d4e8 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	7b5b      	ldrb	r3, [r3, #13]
 800d4bc:	f043 0310 	orr.w	r3, r3, #16
 800d4c0:	b2da      	uxtb	r2, r3
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	735a      	strb	r2, [r3, #13]
 800d4c6:	e00f      	b.n	800d4e8 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800d4c8:	693b      	ldr	r3, [r7, #16]
 800d4ca:	2206      	movs	r2, #6
 800d4cc:	4931      	ldr	r1, [pc, #196]	@ (800d594 <ethernet_input+0x128>)
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	f000 f9c1 	bl	800d856 <memcmp>
 800d4d4:	4603      	mov	r3, r0
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d106      	bne.n	800d4e8 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	7b5b      	ldrb	r3, [r3, #13]
 800d4de:	f043 0308 	orr.w	r3, r3, #8
 800d4e2:	b2da      	uxtb	r2, r3
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800d4e8:	89fb      	ldrh	r3, [r7, #14]
 800d4ea:	2b08      	cmp	r3, #8
 800d4ec:	d003      	beq.n	800d4f6 <ethernet_input+0x8a>
 800d4ee:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800d4f2:	d01e      	beq.n	800d532 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800d4f4:	e046      	b.n	800d584 <ethernet_input+0x118>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d4fc:	f003 0308 	and.w	r3, r3, #8
 800d500:	2b00      	cmp	r3, #0
 800d502:	d038      	beq.n	800d576 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	895b      	ldrh	r3, [r3, #10]
 800d508:	461a      	mov	r2, r3
 800d50a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d50e:	429a      	cmp	r2, r3
 800d510:	db33      	blt.n	800d57a <ethernet_input+0x10e>
 800d512:	8afb      	ldrh	r3, [r7, #22]
 800d514:	425b      	negs	r3, r3
 800d516:	b29b      	uxth	r3, r3
 800d518:	b21b      	sxth	r3, r3
 800d51a:	4619      	mov	r1, r3
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f7f8 f829 	bl	8005574 <pbuf_header>
 800d522:	4603      	mov	r3, r0
 800d524:	2b00      	cmp	r3, #0
 800d526:	d128      	bne.n	800d57a <ethernet_input+0x10e>
        ip4_input(p, netif);
 800d528:	6839      	ldr	r1, [r7, #0]
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f7fe ff82 	bl	800c434 <ip4_input>
      break;
 800d530:	e01d      	b.n	800d56e <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d532:	683b      	ldr	r3, [r7, #0]
 800d534:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d538:	f003 0308 	and.w	r3, r3, #8
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d01e      	beq.n	800d57e <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	895b      	ldrh	r3, [r3, #10]
 800d544:	461a      	mov	r2, r3
 800d546:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d54a:	429a      	cmp	r2, r3
 800d54c:	db19      	blt.n	800d582 <ethernet_input+0x116>
 800d54e:	8afb      	ldrh	r3, [r7, #22]
 800d550:	425b      	negs	r3, r3
 800d552:	b29b      	uxth	r3, r3
 800d554:	b21b      	sxth	r3, r3
 800d556:	4619      	mov	r1, r3
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	f7f8 f80b 	bl	8005574 <pbuf_header>
 800d55e:	4603      	mov	r3, r0
 800d560:	2b00      	cmp	r3, #0
 800d562:	d10e      	bne.n	800d582 <ethernet_input+0x116>
        etharp_input(p, netif);
 800d564:	6839      	ldr	r1, [r7, #0]
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	f7fe f952 	bl	800b810 <etharp_input>
      break;
 800d56c:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800d56e:	2300      	movs	r3, #0
 800d570:	e00c      	b.n	800d58c <ethernet_input+0x120>
    goto free_and_return;
 800d572:	bf00      	nop
 800d574:	e006      	b.n	800d584 <ethernet_input+0x118>
        goto free_and_return;
 800d576:	bf00      	nop
 800d578:	e004      	b.n	800d584 <ethernet_input+0x118>
        goto free_and_return;
 800d57a:	bf00      	nop
 800d57c:	e002      	b.n	800d584 <ethernet_input+0x118>
        goto free_and_return;
 800d57e:	bf00      	nop
 800d580:	e000      	b.n	800d584 <ethernet_input+0x118>
        goto free_and_return;
 800d582:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800d584:	6878      	ldr	r0, [r7, #4]
 800d586:	f7f8 f819 	bl	80055bc <pbuf_free>
  return ERR_OK;
 800d58a:	2300      	movs	r3, #0
}
 800d58c:	4618      	mov	r0, r3
 800d58e:	3718      	adds	r7, #24
 800d590:	46bd      	mov	sp, r7
 800d592:	bd80      	pop	{r7, pc}
 800d594:	08010288 	.word	0x08010288

0800d598 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b086      	sub	sp, #24
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	60f8      	str	r0, [r7, #12]
 800d5a0:	60b9      	str	r1, [r7, #8]
 800d5a2:	607a      	str	r2, [r7, #4]
 800d5a4:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800d5a6:	8c3b      	ldrh	r3, [r7, #32]
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f7f6 fef6 	bl	800439a <lwip_htons>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800d5b2:	210e      	movs	r1, #14
 800d5b4:	68b8      	ldr	r0, [r7, #8]
 800d5b6:	f7f7 ffdd 	bl	8005574 <pbuf_header>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d125      	bne.n	800d60c <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	685b      	ldr	r3, [r3, #4]
 800d5c4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800d5c6:	693b      	ldr	r3, [r7, #16]
 800d5c8:	8afa      	ldrh	r2, [r7, #22]
 800d5ca:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800d5cc:	693b      	ldr	r3, [r7, #16]
 800d5ce:	2206      	movs	r2, #6
 800d5d0:	6839      	ldr	r1, [r7, #0]
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f000 f9c5 	bl	800d962 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 800d5d8:	693b      	ldr	r3, [r7, #16]
 800d5da:	3306      	adds	r3, #6
 800d5dc:	2206      	movs	r2, #6
 800d5de:	6879      	ldr	r1, [r7, #4]
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f000 f9be 	bl	800d962 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d5ec:	2b06      	cmp	r3, #6
 800d5ee:	d006      	beq.n	800d5fe <ethernet_output+0x66>
 800d5f0:	4b0a      	ldr	r3, [pc, #40]	@ (800d61c <ethernet_output+0x84>)
 800d5f2:	f240 122b 	movw	r2, #299	@ 0x12b
 800d5f6:	490a      	ldr	r1, [pc, #40]	@ (800d620 <ethernet_output+0x88>)
 800d5f8:	480a      	ldr	r0, [pc, #40]	@ (800d624 <ethernet_output+0x8c>)
 800d5fa:	f000 f8d7 	bl	800d7ac <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	699b      	ldr	r3, [r3, #24]
 800d602:	68b9      	ldr	r1, [r7, #8]
 800d604:	68f8      	ldr	r0, [r7, #12]
 800d606:	4798      	blx	r3
 800d608:	4603      	mov	r3, r0
 800d60a:	e002      	b.n	800d612 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800d60c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800d60e:	f06f 0301 	mvn.w	r3, #1
}
 800d612:	4618      	mov	r0, r3
 800d614:	3718      	adds	r7, #24
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}
 800d61a:	bf00      	nop
 800d61c:	08010108 	.word	0x08010108
 800d620:	08010140 	.word	0x08010140
 800d624:	08010174 	.word	0x08010174

0800d628 <std>:
 800d628:	2300      	movs	r3, #0
 800d62a:	b510      	push	{r4, lr}
 800d62c:	4604      	mov	r4, r0
 800d62e:	e9c0 3300 	strd	r3, r3, [r0]
 800d632:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d636:	6083      	str	r3, [r0, #8]
 800d638:	8181      	strh	r1, [r0, #12]
 800d63a:	6643      	str	r3, [r0, #100]	@ 0x64
 800d63c:	81c2      	strh	r2, [r0, #14]
 800d63e:	6183      	str	r3, [r0, #24]
 800d640:	4619      	mov	r1, r3
 800d642:	2208      	movs	r2, #8
 800d644:	305c      	adds	r0, #92	@ 0x5c
 800d646:	f000 f916 	bl	800d876 <memset>
 800d64a:	4b0d      	ldr	r3, [pc, #52]	@ (800d680 <std+0x58>)
 800d64c:	6224      	str	r4, [r4, #32]
 800d64e:	6263      	str	r3, [r4, #36]	@ 0x24
 800d650:	4b0c      	ldr	r3, [pc, #48]	@ (800d684 <std+0x5c>)
 800d652:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d654:	4b0c      	ldr	r3, [pc, #48]	@ (800d688 <std+0x60>)
 800d656:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d658:	4b0c      	ldr	r3, [pc, #48]	@ (800d68c <std+0x64>)
 800d65a:	6323      	str	r3, [r4, #48]	@ 0x30
 800d65c:	4b0c      	ldr	r3, [pc, #48]	@ (800d690 <std+0x68>)
 800d65e:	429c      	cmp	r4, r3
 800d660:	d006      	beq.n	800d670 <std+0x48>
 800d662:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d666:	4294      	cmp	r4, r2
 800d668:	d002      	beq.n	800d670 <std+0x48>
 800d66a:	33d0      	adds	r3, #208	@ 0xd0
 800d66c:	429c      	cmp	r4, r3
 800d66e:	d105      	bne.n	800d67c <std+0x54>
 800d670:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d678:	f000 b970 	b.w	800d95c <__retarget_lock_init_recursive>
 800d67c:	bd10      	pop	{r4, pc}
 800d67e:	bf00      	nop
 800d680:	0800d7d1 	.word	0x0800d7d1
 800d684:	0800d7f3 	.word	0x0800d7f3
 800d688:	0800d82b 	.word	0x0800d82b
 800d68c:	0800d84f 	.word	0x0800d84f
 800d690:	20006da4 	.word	0x20006da4

0800d694 <stdio_exit_handler>:
 800d694:	4a02      	ldr	r2, [pc, #8]	@ (800d6a0 <stdio_exit_handler+0xc>)
 800d696:	4903      	ldr	r1, [pc, #12]	@ (800d6a4 <stdio_exit_handler+0x10>)
 800d698:	4803      	ldr	r0, [pc, #12]	@ (800d6a8 <stdio_exit_handler+0x14>)
 800d69a:	f000 b869 	b.w	800d770 <_fwalk_sglue>
 800d69e:	bf00      	nop
 800d6a0:	20000010 	.word	0x20000010
 800d6a4:	0800e211 	.word	0x0800e211
 800d6a8:	20000020 	.word	0x20000020

0800d6ac <cleanup_stdio>:
 800d6ac:	6841      	ldr	r1, [r0, #4]
 800d6ae:	4b0c      	ldr	r3, [pc, #48]	@ (800d6e0 <cleanup_stdio+0x34>)
 800d6b0:	b510      	push	{r4, lr}
 800d6b2:	4299      	cmp	r1, r3
 800d6b4:	4604      	mov	r4, r0
 800d6b6:	d001      	beq.n	800d6bc <cleanup_stdio+0x10>
 800d6b8:	f000 fdaa 	bl	800e210 <_fflush_r>
 800d6bc:	68a1      	ldr	r1, [r4, #8]
 800d6be:	4b09      	ldr	r3, [pc, #36]	@ (800d6e4 <cleanup_stdio+0x38>)
 800d6c0:	4299      	cmp	r1, r3
 800d6c2:	d002      	beq.n	800d6ca <cleanup_stdio+0x1e>
 800d6c4:	4620      	mov	r0, r4
 800d6c6:	f000 fda3 	bl	800e210 <_fflush_r>
 800d6ca:	68e1      	ldr	r1, [r4, #12]
 800d6cc:	4b06      	ldr	r3, [pc, #24]	@ (800d6e8 <cleanup_stdio+0x3c>)
 800d6ce:	4299      	cmp	r1, r3
 800d6d0:	d004      	beq.n	800d6dc <cleanup_stdio+0x30>
 800d6d2:	4620      	mov	r0, r4
 800d6d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6d8:	f000 bd9a 	b.w	800e210 <_fflush_r>
 800d6dc:	bd10      	pop	{r4, pc}
 800d6de:	bf00      	nop
 800d6e0:	20006da4 	.word	0x20006da4
 800d6e4:	20006e0c 	.word	0x20006e0c
 800d6e8:	20006e74 	.word	0x20006e74

0800d6ec <global_stdio_init.part.0>:
 800d6ec:	b510      	push	{r4, lr}
 800d6ee:	4b0b      	ldr	r3, [pc, #44]	@ (800d71c <global_stdio_init.part.0+0x30>)
 800d6f0:	4c0b      	ldr	r4, [pc, #44]	@ (800d720 <global_stdio_init.part.0+0x34>)
 800d6f2:	4a0c      	ldr	r2, [pc, #48]	@ (800d724 <global_stdio_init.part.0+0x38>)
 800d6f4:	4620      	mov	r0, r4
 800d6f6:	601a      	str	r2, [r3, #0]
 800d6f8:	2104      	movs	r1, #4
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	f7ff ff94 	bl	800d628 <std>
 800d700:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d704:	2201      	movs	r2, #1
 800d706:	2109      	movs	r1, #9
 800d708:	f7ff ff8e 	bl	800d628 <std>
 800d70c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d710:	2202      	movs	r2, #2
 800d712:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d716:	2112      	movs	r1, #18
 800d718:	f7ff bf86 	b.w	800d628 <std>
 800d71c:	20006edc 	.word	0x20006edc
 800d720:	20006da4 	.word	0x20006da4
 800d724:	0800d695 	.word	0x0800d695

0800d728 <__sfp_lock_acquire>:
 800d728:	4801      	ldr	r0, [pc, #4]	@ (800d730 <__sfp_lock_acquire+0x8>)
 800d72a:	f000 b918 	b.w	800d95e <__retarget_lock_acquire_recursive>
 800d72e:	bf00      	nop
 800d730:	20006ee5 	.word	0x20006ee5

0800d734 <__sfp_lock_release>:
 800d734:	4801      	ldr	r0, [pc, #4]	@ (800d73c <__sfp_lock_release+0x8>)
 800d736:	f000 b913 	b.w	800d960 <__retarget_lock_release_recursive>
 800d73a:	bf00      	nop
 800d73c:	20006ee5 	.word	0x20006ee5

0800d740 <__sinit>:
 800d740:	b510      	push	{r4, lr}
 800d742:	4604      	mov	r4, r0
 800d744:	f7ff fff0 	bl	800d728 <__sfp_lock_acquire>
 800d748:	6a23      	ldr	r3, [r4, #32]
 800d74a:	b11b      	cbz	r3, 800d754 <__sinit+0x14>
 800d74c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d750:	f7ff bff0 	b.w	800d734 <__sfp_lock_release>
 800d754:	4b04      	ldr	r3, [pc, #16]	@ (800d768 <__sinit+0x28>)
 800d756:	6223      	str	r3, [r4, #32]
 800d758:	4b04      	ldr	r3, [pc, #16]	@ (800d76c <__sinit+0x2c>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d1f5      	bne.n	800d74c <__sinit+0xc>
 800d760:	f7ff ffc4 	bl	800d6ec <global_stdio_init.part.0>
 800d764:	e7f2      	b.n	800d74c <__sinit+0xc>
 800d766:	bf00      	nop
 800d768:	0800d6ad 	.word	0x0800d6ad
 800d76c:	20006edc 	.word	0x20006edc

0800d770 <_fwalk_sglue>:
 800d770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d774:	4607      	mov	r7, r0
 800d776:	4688      	mov	r8, r1
 800d778:	4614      	mov	r4, r2
 800d77a:	2600      	movs	r6, #0
 800d77c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d780:	f1b9 0901 	subs.w	r9, r9, #1
 800d784:	d505      	bpl.n	800d792 <_fwalk_sglue+0x22>
 800d786:	6824      	ldr	r4, [r4, #0]
 800d788:	2c00      	cmp	r4, #0
 800d78a:	d1f7      	bne.n	800d77c <_fwalk_sglue+0xc>
 800d78c:	4630      	mov	r0, r6
 800d78e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d792:	89ab      	ldrh	r3, [r5, #12]
 800d794:	2b01      	cmp	r3, #1
 800d796:	d907      	bls.n	800d7a8 <_fwalk_sglue+0x38>
 800d798:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d79c:	3301      	adds	r3, #1
 800d79e:	d003      	beq.n	800d7a8 <_fwalk_sglue+0x38>
 800d7a0:	4629      	mov	r1, r5
 800d7a2:	4638      	mov	r0, r7
 800d7a4:	47c0      	blx	r8
 800d7a6:	4306      	orrs	r6, r0
 800d7a8:	3568      	adds	r5, #104	@ 0x68
 800d7aa:	e7e9      	b.n	800d780 <_fwalk_sglue+0x10>

0800d7ac <iprintf>:
 800d7ac:	b40f      	push	{r0, r1, r2, r3}
 800d7ae:	b507      	push	{r0, r1, r2, lr}
 800d7b0:	4906      	ldr	r1, [pc, #24]	@ (800d7cc <iprintf+0x20>)
 800d7b2:	ab04      	add	r3, sp, #16
 800d7b4:	6808      	ldr	r0, [r1, #0]
 800d7b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7ba:	6881      	ldr	r1, [r0, #8]
 800d7bc:	9301      	str	r3, [sp, #4]
 800d7be:	f000 f9fd 	bl	800dbbc <_vfiprintf_r>
 800d7c2:	b003      	add	sp, #12
 800d7c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7c8:	b004      	add	sp, #16
 800d7ca:	4770      	bx	lr
 800d7cc:	2000001c 	.word	0x2000001c

0800d7d0 <__sread>:
 800d7d0:	b510      	push	{r4, lr}
 800d7d2:	460c      	mov	r4, r1
 800d7d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7d8:	f000 f878 	bl	800d8cc <_read_r>
 800d7dc:	2800      	cmp	r0, #0
 800d7de:	bfab      	itete	ge
 800d7e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d7e2:	89a3      	ldrhlt	r3, [r4, #12]
 800d7e4:	181b      	addge	r3, r3, r0
 800d7e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d7ea:	bfac      	ite	ge
 800d7ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d7ee:	81a3      	strhlt	r3, [r4, #12]
 800d7f0:	bd10      	pop	{r4, pc}

0800d7f2 <__swrite>:
 800d7f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7f6:	461f      	mov	r7, r3
 800d7f8:	898b      	ldrh	r3, [r1, #12]
 800d7fa:	4605      	mov	r5, r0
 800d7fc:	05db      	lsls	r3, r3, #23
 800d7fe:	460c      	mov	r4, r1
 800d800:	4616      	mov	r6, r2
 800d802:	d505      	bpl.n	800d810 <__swrite+0x1e>
 800d804:	2302      	movs	r3, #2
 800d806:	2200      	movs	r2, #0
 800d808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d80c:	f000 f84c 	bl	800d8a8 <_lseek_r>
 800d810:	89a3      	ldrh	r3, [r4, #12]
 800d812:	4632      	mov	r2, r6
 800d814:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d818:	81a3      	strh	r3, [r4, #12]
 800d81a:	4628      	mov	r0, r5
 800d81c:	463b      	mov	r3, r7
 800d81e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d822:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d826:	f000 b863 	b.w	800d8f0 <_write_r>

0800d82a <__sseek>:
 800d82a:	b510      	push	{r4, lr}
 800d82c:	460c      	mov	r4, r1
 800d82e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d832:	f000 f839 	bl	800d8a8 <_lseek_r>
 800d836:	1c43      	adds	r3, r0, #1
 800d838:	89a3      	ldrh	r3, [r4, #12]
 800d83a:	bf15      	itete	ne
 800d83c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d83e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d842:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d846:	81a3      	strheq	r3, [r4, #12]
 800d848:	bf18      	it	ne
 800d84a:	81a3      	strhne	r3, [r4, #12]
 800d84c:	bd10      	pop	{r4, pc}

0800d84e <__sclose>:
 800d84e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d852:	f000 b819 	b.w	800d888 <_close_r>

0800d856 <memcmp>:
 800d856:	b510      	push	{r4, lr}
 800d858:	3901      	subs	r1, #1
 800d85a:	4402      	add	r2, r0
 800d85c:	4290      	cmp	r0, r2
 800d85e:	d101      	bne.n	800d864 <memcmp+0xe>
 800d860:	2000      	movs	r0, #0
 800d862:	e005      	b.n	800d870 <memcmp+0x1a>
 800d864:	7803      	ldrb	r3, [r0, #0]
 800d866:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d86a:	42a3      	cmp	r3, r4
 800d86c:	d001      	beq.n	800d872 <memcmp+0x1c>
 800d86e:	1b18      	subs	r0, r3, r4
 800d870:	bd10      	pop	{r4, pc}
 800d872:	3001      	adds	r0, #1
 800d874:	e7f2      	b.n	800d85c <memcmp+0x6>

0800d876 <memset>:
 800d876:	4603      	mov	r3, r0
 800d878:	4402      	add	r2, r0
 800d87a:	4293      	cmp	r3, r2
 800d87c:	d100      	bne.n	800d880 <memset+0xa>
 800d87e:	4770      	bx	lr
 800d880:	f803 1b01 	strb.w	r1, [r3], #1
 800d884:	e7f9      	b.n	800d87a <memset+0x4>
	...

0800d888 <_close_r>:
 800d888:	b538      	push	{r3, r4, r5, lr}
 800d88a:	2300      	movs	r3, #0
 800d88c:	4d05      	ldr	r5, [pc, #20]	@ (800d8a4 <_close_r+0x1c>)
 800d88e:	4604      	mov	r4, r0
 800d890:	4608      	mov	r0, r1
 800d892:	602b      	str	r3, [r5, #0]
 800d894:	f7f3 f8ef 	bl	8000a76 <_close>
 800d898:	1c43      	adds	r3, r0, #1
 800d89a:	d102      	bne.n	800d8a2 <_close_r+0x1a>
 800d89c:	682b      	ldr	r3, [r5, #0]
 800d89e:	b103      	cbz	r3, 800d8a2 <_close_r+0x1a>
 800d8a0:	6023      	str	r3, [r4, #0]
 800d8a2:	bd38      	pop	{r3, r4, r5, pc}
 800d8a4:	20006ee0 	.word	0x20006ee0

0800d8a8 <_lseek_r>:
 800d8a8:	b538      	push	{r3, r4, r5, lr}
 800d8aa:	4604      	mov	r4, r0
 800d8ac:	4608      	mov	r0, r1
 800d8ae:	4611      	mov	r1, r2
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	4d05      	ldr	r5, [pc, #20]	@ (800d8c8 <_lseek_r+0x20>)
 800d8b4:	602a      	str	r2, [r5, #0]
 800d8b6:	461a      	mov	r2, r3
 800d8b8:	f7f3 f901 	bl	8000abe <_lseek>
 800d8bc:	1c43      	adds	r3, r0, #1
 800d8be:	d102      	bne.n	800d8c6 <_lseek_r+0x1e>
 800d8c0:	682b      	ldr	r3, [r5, #0]
 800d8c2:	b103      	cbz	r3, 800d8c6 <_lseek_r+0x1e>
 800d8c4:	6023      	str	r3, [r4, #0]
 800d8c6:	bd38      	pop	{r3, r4, r5, pc}
 800d8c8:	20006ee0 	.word	0x20006ee0

0800d8cc <_read_r>:
 800d8cc:	b538      	push	{r3, r4, r5, lr}
 800d8ce:	4604      	mov	r4, r0
 800d8d0:	4608      	mov	r0, r1
 800d8d2:	4611      	mov	r1, r2
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	4d05      	ldr	r5, [pc, #20]	@ (800d8ec <_read_r+0x20>)
 800d8d8:	602a      	str	r2, [r5, #0]
 800d8da:	461a      	mov	r2, r3
 800d8dc:	f7f3 f892 	bl	8000a04 <_read>
 800d8e0:	1c43      	adds	r3, r0, #1
 800d8e2:	d102      	bne.n	800d8ea <_read_r+0x1e>
 800d8e4:	682b      	ldr	r3, [r5, #0]
 800d8e6:	b103      	cbz	r3, 800d8ea <_read_r+0x1e>
 800d8e8:	6023      	str	r3, [r4, #0]
 800d8ea:	bd38      	pop	{r3, r4, r5, pc}
 800d8ec:	20006ee0 	.word	0x20006ee0

0800d8f0 <_write_r>:
 800d8f0:	b538      	push	{r3, r4, r5, lr}
 800d8f2:	4604      	mov	r4, r0
 800d8f4:	4608      	mov	r0, r1
 800d8f6:	4611      	mov	r1, r2
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	4d05      	ldr	r5, [pc, #20]	@ (800d910 <_write_r+0x20>)
 800d8fc:	602a      	str	r2, [r5, #0]
 800d8fe:	461a      	mov	r2, r3
 800d900:	f7f3 f89d 	bl	8000a3e <_write>
 800d904:	1c43      	adds	r3, r0, #1
 800d906:	d102      	bne.n	800d90e <_write_r+0x1e>
 800d908:	682b      	ldr	r3, [r5, #0]
 800d90a:	b103      	cbz	r3, 800d90e <_write_r+0x1e>
 800d90c:	6023      	str	r3, [r4, #0]
 800d90e:	bd38      	pop	{r3, r4, r5, pc}
 800d910:	20006ee0 	.word	0x20006ee0

0800d914 <__libc_init_array>:
 800d914:	b570      	push	{r4, r5, r6, lr}
 800d916:	2600      	movs	r6, #0
 800d918:	4d0c      	ldr	r5, [pc, #48]	@ (800d94c <__libc_init_array+0x38>)
 800d91a:	4c0d      	ldr	r4, [pc, #52]	@ (800d950 <__libc_init_array+0x3c>)
 800d91c:	1b64      	subs	r4, r4, r5
 800d91e:	10a4      	asrs	r4, r4, #2
 800d920:	42a6      	cmp	r6, r4
 800d922:	d109      	bne.n	800d938 <__libc_init_array+0x24>
 800d924:	f000 fdd2 	bl	800e4cc <_init>
 800d928:	2600      	movs	r6, #0
 800d92a:	4d0a      	ldr	r5, [pc, #40]	@ (800d954 <__libc_init_array+0x40>)
 800d92c:	4c0a      	ldr	r4, [pc, #40]	@ (800d958 <__libc_init_array+0x44>)
 800d92e:	1b64      	subs	r4, r4, r5
 800d930:	10a4      	asrs	r4, r4, #2
 800d932:	42a6      	cmp	r6, r4
 800d934:	d105      	bne.n	800d942 <__libc_init_array+0x2e>
 800d936:	bd70      	pop	{r4, r5, r6, pc}
 800d938:	f855 3b04 	ldr.w	r3, [r5], #4
 800d93c:	4798      	blx	r3
 800d93e:	3601      	adds	r6, #1
 800d940:	e7ee      	b.n	800d920 <__libc_init_array+0xc>
 800d942:	f855 3b04 	ldr.w	r3, [r5], #4
 800d946:	4798      	blx	r3
 800d948:	3601      	adds	r6, #1
 800d94a:	e7f2      	b.n	800d932 <__libc_init_array+0x1e>
 800d94c:	080102d4 	.word	0x080102d4
 800d950:	080102d4 	.word	0x080102d4
 800d954:	080102d4 	.word	0x080102d4
 800d958:	080102d8 	.word	0x080102d8

0800d95c <__retarget_lock_init_recursive>:
 800d95c:	4770      	bx	lr

0800d95e <__retarget_lock_acquire_recursive>:
 800d95e:	4770      	bx	lr

0800d960 <__retarget_lock_release_recursive>:
 800d960:	4770      	bx	lr

0800d962 <memcpy>:
 800d962:	440a      	add	r2, r1
 800d964:	4291      	cmp	r1, r2
 800d966:	f100 33ff 	add.w	r3, r0, #4294967295
 800d96a:	d100      	bne.n	800d96e <memcpy+0xc>
 800d96c:	4770      	bx	lr
 800d96e:	b510      	push	{r4, lr}
 800d970:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d974:	4291      	cmp	r1, r2
 800d976:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d97a:	d1f9      	bne.n	800d970 <memcpy+0xe>
 800d97c:	bd10      	pop	{r4, pc}
	...

0800d980 <_free_r>:
 800d980:	b538      	push	{r3, r4, r5, lr}
 800d982:	4605      	mov	r5, r0
 800d984:	2900      	cmp	r1, #0
 800d986:	d040      	beq.n	800da0a <_free_r+0x8a>
 800d988:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d98c:	1f0c      	subs	r4, r1, #4
 800d98e:	2b00      	cmp	r3, #0
 800d990:	bfb8      	it	lt
 800d992:	18e4      	addlt	r4, r4, r3
 800d994:	f000 f8de 	bl	800db54 <__malloc_lock>
 800d998:	4a1c      	ldr	r2, [pc, #112]	@ (800da0c <_free_r+0x8c>)
 800d99a:	6813      	ldr	r3, [r2, #0]
 800d99c:	b933      	cbnz	r3, 800d9ac <_free_r+0x2c>
 800d99e:	6063      	str	r3, [r4, #4]
 800d9a0:	6014      	str	r4, [r2, #0]
 800d9a2:	4628      	mov	r0, r5
 800d9a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9a8:	f000 b8da 	b.w	800db60 <__malloc_unlock>
 800d9ac:	42a3      	cmp	r3, r4
 800d9ae:	d908      	bls.n	800d9c2 <_free_r+0x42>
 800d9b0:	6820      	ldr	r0, [r4, #0]
 800d9b2:	1821      	adds	r1, r4, r0
 800d9b4:	428b      	cmp	r3, r1
 800d9b6:	bf01      	itttt	eq
 800d9b8:	6819      	ldreq	r1, [r3, #0]
 800d9ba:	685b      	ldreq	r3, [r3, #4]
 800d9bc:	1809      	addeq	r1, r1, r0
 800d9be:	6021      	streq	r1, [r4, #0]
 800d9c0:	e7ed      	b.n	800d99e <_free_r+0x1e>
 800d9c2:	461a      	mov	r2, r3
 800d9c4:	685b      	ldr	r3, [r3, #4]
 800d9c6:	b10b      	cbz	r3, 800d9cc <_free_r+0x4c>
 800d9c8:	42a3      	cmp	r3, r4
 800d9ca:	d9fa      	bls.n	800d9c2 <_free_r+0x42>
 800d9cc:	6811      	ldr	r1, [r2, #0]
 800d9ce:	1850      	adds	r0, r2, r1
 800d9d0:	42a0      	cmp	r0, r4
 800d9d2:	d10b      	bne.n	800d9ec <_free_r+0x6c>
 800d9d4:	6820      	ldr	r0, [r4, #0]
 800d9d6:	4401      	add	r1, r0
 800d9d8:	1850      	adds	r0, r2, r1
 800d9da:	4283      	cmp	r3, r0
 800d9dc:	6011      	str	r1, [r2, #0]
 800d9de:	d1e0      	bne.n	800d9a2 <_free_r+0x22>
 800d9e0:	6818      	ldr	r0, [r3, #0]
 800d9e2:	685b      	ldr	r3, [r3, #4]
 800d9e4:	4408      	add	r0, r1
 800d9e6:	6010      	str	r0, [r2, #0]
 800d9e8:	6053      	str	r3, [r2, #4]
 800d9ea:	e7da      	b.n	800d9a2 <_free_r+0x22>
 800d9ec:	d902      	bls.n	800d9f4 <_free_r+0x74>
 800d9ee:	230c      	movs	r3, #12
 800d9f0:	602b      	str	r3, [r5, #0]
 800d9f2:	e7d6      	b.n	800d9a2 <_free_r+0x22>
 800d9f4:	6820      	ldr	r0, [r4, #0]
 800d9f6:	1821      	adds	r1, r4, r0
 800d9f8:	428b      	cmp	r3, r1
 800d9fa:	bf01      	itttt	eq
 800d9fc:	6819      	ldreq	r1, [r3, #0]
 800d9fe:	685b      	ldreq	r3, [r3, #4]
 800da00:	1809      	addeq	r1, r1, r0
 800da02:	6021      	streq	r1, [r4, #0]
 800da04:	6063      	str	r3, [r4, #4]
 800da06:	6054      	str	r4, [r2, #4]
 800da08:	e7cb      	b.n	800d9a2 <_free_r+0x22>
 800da0a:	bd38      	pop	{r3, r4, r5, pc}
 800da0c:	20006eec 	.word	0x20006eec

0800da10 <sbrk_aligned>:
 800da10:	b570      	push	{r4, r5, r6, lr}
 800da12:	4e0f      	ldr	r6, [pc, #60]	@ (800da50 <sbrk_aligned+0x40>)
 800da14:	460c      	mov	r4, r1
 800da16:	6831      	ldr	r1, [r6, #0]
 800da18:	4605      	mov	r5, r0
 800da1a:	b911      	cbnz	r1, 800da22 <sbrk_aligned+0x12>
 800da1c:	f000 fcb4 	bl	800e388 <_sbrk_r>
 800da20:	6030      	str	r0, [r6, #0]
 800da22:	4621      	mov	r1, r4
 800da24:	4628      	mov	r0, r5
 800da26:	f000 fcaf 	bl	800e388 <_sbrk_r>
 800da2a:	1c43      	adds	r3, r0, #1
 800da2c:	d103      	bne.n	800da36 <sbrk_aligned+0x26>
 800da2e:	f04f 34ff 	mov.w	r4, #4294967295
 800da32:	4620      	mov	r0, r4
 800da34:	bd70      	pop	{r4, r5, r6, pc}
 800da36:	1cc4      	adds	r4, r0, #3
 800da38:	f024 0403 	bic.w	r4, r4, #3
 800da3c:	42a0      	cmp	r0, r4
 800da3e:	d0f8      	beq.n	800da32 <sbrk_aligned+0x22>
 800da40:	1a21      	subs	r1, r4, r0
 800da42:	4628      	mov	r0, r5
 800da44:	f000 fca0 	bl	800e388 <_sbrk_r>
 800da48:	3001      	adds	r0, #1
 800da4a:	d1f2      	bne.n	800da32 <sbrk_aligned+0x22>
 800da4c:	e7ef      	b.n	800da2e <sbrk_aligned+0x1e>
 800da4e:	bf00      	nop
 800da50:	20006ee8 	.word	0x20006ee8

0800da54 <_malloc_r>:
 800da54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da58:	1ccd      	adds	r5, r1, #3
 800da5a:	f025 0503 	bic.w	r5, r5, #3
 800da5e:	3508      	adds	r5, #8
 800da60:	2d0c      	cmp	r5, #12
 800da62:	bf38      	it	cc
 800da64:	250c      	movcc	r5, #12
 800da66:	2d00      	cmp	r5, #0
 800da68:	4606      	mov	r6, r0
 800da6a:	db01      	blt.n	800da70 <_malloc_r+0x1c>
 800da6c:	42a9      	cmp	r1, r5
 800da6e:	d904      	bls.n	800da7a <_malloc_r+0x26>
 800da70:	230c      	movs	r3, #12
 800da72:	6033      	str	r3, [r6, #0]
 800da74:	2000      	movs	r0, #0
 800da76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800db50 <_malloc_r+0xfc>
 800da7e:	f000 f869 	bl	800db54 <__malloc_lock>
 800da82:	f8d8 3000 	ldr.w	r3, [r8]
 800da86:	461c      	mov	r4, r3
 800da88:	bb44      	cbnz	r4, 800dadc <_malloc_r+0x88>
 800da8a:	4629      	mov	r1, r5
 800da8c:	4630      	mov	r0, r6
 800da8e:	f7ff ffbf 	bl	800da10 <sbrk_aligned>
 800da92:	1c43      	adds	r3, r0, #1
 800da94:	4604      	mov	r4, r0
 800da96:	d158      	bne.n	800db4a <_malloc_r+0xf6>
 800da98:	f8d8 4000 	ldr.w	r4, [r8]
 800da9c:	4627      	mov	r7, r4
 800da9e:	2f00      	cmp	r7, #0
 800daa0:	d143      	bne.n	800db2a <_malloc_r+0xd6>
 800daa2:	2c00      	cmp	r4, #0
 800daa4:	d04b      	beq.n	800db3e <_malloc_r+0xea>
 800daa6:	6823      	ldr	r3, [r4, #0]
 800daa8:	4639      	mov	r1, r7
 800daaa:	4630      	mov	r0, r6
 800daac:	eb04 0903 	add.w	r9, r4, r3
 800dab0:	f000 fc6a 	bl	800e388 <_sbrk_r>
 800dab4:	4581      	cmp	r9, r0
 800dab6:	d142      	bne.n	800db3e <_malloc_r+0xea>
 800dab8:	6821      	ldr	r1, [r4, #0]
 800daba:	4630      	mov	r0, r6
 800dabc:	1a6d      	subs	r5, r5, r1
 800dabe:	4629      	mov	r1, r5
 800dac0:	f7ff ffa6 	bl	800da10 <sbrk_aligned>
 800dac4:	3001      	adds	r0, #1
 800dac6:	d03a      	beq.n	800db3e <_malloc_r+0xea>
 800dac8:	6823      	ldr	r3, [r4, #0]
 800daca:	442b      	add	r3, r5
 800dacc:	6023      	str	r3, [r4, #0]
 800dace:	f8d8 3000 	ldr.w	r3, [r8]
 800dad2:	685a      	ldr	r2, [r3, #4]
 800dad4:	bb62      	cbnz	r2, 800db30 <_malloc_r+0xdc>
 800dad6:	f8c8 7000 	str.w	r7, [r8]
 800dada:	e00f      	b.n	800dafc <_malloc_r+0xa8>
 800dadc:	6822      	ldr	r2, [r4, #0]
 800dade:	1b52      	subs	r2, r2, r5
 800dae0:	d420      	bmi.n	800db24 <_malloc_r+0xd0>
 800dae2:	2a0b      	cmp	r2, #11
 800dae4:	d917      	bls.n	800db16 <_malloc_r+0xc2>
 800dae6:	1961      	adds	r1, r4, r5
 800dae8:	42a3      	cmp	r3, r4
 800daea:	6025      	str	r5, [r4, #0]
 800daec:	bf18      	it	ne
 800daee:	6059      	strne	r1, [r3, #4]
 800daf0:	6863      	ldr	r3, [r4, #4]
 800daf2:	bf08      	it	eq
 800daf4:	f8c8 1000 	streq.w	r1, [r8]
 800daf8:	5162      	str	r2, [r4, r5]
 800dafa:	604b      	str	r3, [r1, #4]
 800dafc:	4630      	mov	r0, r6
 800dafe:	f000 f82f 	bl	800db60 <__malloc_unlock>
 800db02:	f104 000b 	add.w	r0, r4, #11
 800db06:	1d23      	adds	r3, r4, #4
 800db08:	f020 0007 	bic.w	r0, r0, #7
 800db0c:	1ac2      	subs	r2, r0, r3
 800db0e:	bf1c      	itt	ne
 800db10:	1a1b      	subne	r3, r3, r0
 800db12:	50a3      	strne	r3, [r4, r2]
 800db14:	e7af      	b.n	800da76 <_malloc_r+0x22>
 800db16:	6862      	ldr	r2, [r4, #4]
 800db18:	42a3      	cmp	r3, r4
 800db1a:	bf0c      	ite	eq
 800db1c:	f8c8 2000 	streq.w	r2, [r8]
 800db20:	605a      	strne	r2, [r3, #4]
 800db22:	e7eb      	b.n	800dafc <_malloc_r+0xa8>
 800db24:	4623      	mov	r3, r4
 800db26:	6864      	ldr	r4, [r4, #4]
 800db28:	e7ae      	b.n	800da88 <_malloc_r+0x34>
 800db2a:	463c      	mov	r4, r7
 800db2c:	687f      	ldr	r7, [r7, #4]
 800db2e:	e7b6      	b.n	800da9e <_malloc_r+0x4a>
 800db30:	461a      	mov	r2, r3
 800db32:	685b      	ldr	r3, [r3, #4]
 800db34:	42a3      	cmp	r3, r4
 800db36:	d1fb      	bne.n	800db30 <_malloc_r+0xdc>
 800db38:	2300      	movs	r3, #0
 800db3a:	6053      	str	r3, [r2, #4]
 800db3c:	e7de      	b.n	800dafc <_malloc_r+0xa8>
 800db3e:	230c      	movs	r3, #12
 800db40:	4630      	mov	r0, r6
 800db42:	6033      	str	r3, [r6, #0]
 800db44:	f000 f80c 	bl	800db60 <__malloc_unlock>
 800db48:	e794      	b.n	800da74 <_malloc_r+0x20>
 800db4a:	6005      	str	r5, [r0, #0]
 800db4c:	e7d6      	b.n	800dafc <_malloc_r+0xa8>
 800db4e:	bf00      	nop
 800db50:	20006eec 	.word	0x20006eec

0800db54 <__malloc_lock>:
 800db54:	4801      	ldr	r0, [pc, #4]	@ (800db5c <__malloc_lock+0x8>)
 800db56:	f7ff bf02 	b.w	800d95e <__retarget_lock_acquire_recursive>
 800db5a:	bf00      	nop
 800db5c:	20006ee4 	.word	0x20006ee4

0800db60 <__malloc_unlock>:
 800db60:	4801      	ldr	r0, [pc, #4]	@ (800db68 <__malloc_unlock+0x8>)
 800db62:	f7ff befd 	b.w	800d960 <__retarget_lock_release_recursive>
 800db66:	bf00      	nop
 800db68:	20006ee4 	.word	0x20006ee4

0800db6c <__sfputc_r>:
 800db6c:	6893      	ldr	r3, [r2, #8]
 800db6e:	b410      	push	{r4}
 800db70:	3b01      	subs	r3, #1
 800db72:	2b00      	cmp	r3, #0
 800db74:	6093      	str	r3, [r2, #8]
 800db76:	da07      	bge.n	800db88 <__sfputc_r+0x1c>
 800db78:	6994      	ldr	r4, [r2, #24]
 800db7a:	42a3      	cmp	r3, r4
 800db7c:	db01      	blt.n	800db82 <__sfputc_r+0x16>
 800db7e:	290a      	cmp	r1, #10
 800db80:	d102      	bne.n	800db88 <__sfputc_r+0x1c>
 800db82:	bc10      	pop	{r4}
 800db84:	f000 bb6c 	b.w	800e260 <__swbuf_r>
 800db88:	6813      	ldr	r3, [r2, #0]
 800db8a:	1c58      	adds	r0, r3, #1
 800db8c:	6010      	str	r0, [r2, #0]
 800db8e:	7019      	strb	r1, [r3, #0]
 800db90:	4608      	mov	r0, r1
 800db92:	bc10      	pop	{r4}
 800db94:	4770      	bx	lr

0800db96 <__sfputs_r>:
 800db96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db98:	4606      	mov	r6, r0
 800db9a:	460f      	mov	r7, r1
 800db9c:	4614      	mov	r4, r2
 800db9e:	18d5      	adds	r5, r2, r3
 800dba0:	42ac      	cmp	r4, r5
 800dba2:	d101      	bne.n	800dba8 <__sfputs_r+0x12>
 800dba4:	2000      	movs	r0, #0
 800dba6:	e007      	b.n	800dbb8 <__sfputs_r+0x22>
 800dba8:	463a      	mov	r2, r7
 800dbaa:	4630      	mov	r0, r6
 800dbac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbb0:	f7ff ffdc 	bl	800db6c <__sfputc_r>
 800dbb4:	1c43      	adds	r3, r0, #1
 800dbb6:	d1f3      	bne.n	800dba0 <__sfputs_r+0xa>
 800dbb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dbbc <_vfiprintf_r>:
 800dbbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbc0:	460d      	mov	r5, r1
 800dbc2:	4614      	mov	r4, r2
 800dbc4:	4698      	mov	r8, r3
 800dbc6:	4606      	mov	r6, r0
 800dbc8:	b09d      	sub	sp, #116	@ 0x74
 800dbca:	b118      	cbz	r0, 800dbd4 <_vfiprintf_r+0x18>
 800dbcc:	6a03      	ldr	r3, [r0, #32]
 800dbce:	b90b      	cbnz	r3, 800dbd4 <_vfiprintf_r+0x18>
 800dbd0:	f7ff fdb6 	bl	800d740 <__sinit>
 800dbd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dbd6:	07d9      	lsls	r1, r3, #31
 800dbd8:	d405      	bmi.n	800dbe6 <_vfiprintf_r+0x2a>
 800dbda:	89ab      	ldrh	r3, [r5, #12]
 800dbdc:	059a      	lsls	r2, r3, #22
 800dbde:	d402      	bmi.n	800dbe6 <_vfiprintf_r+0x2a>
 800dbe0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dbe2:	f7ff febc 	bl	800d95e <__retarget_lock_acquire_recursive>
 800dbe6:	89ab      	ldrh	r3, [r5, #12]
 800dbe8:	071b      	lsls	r3, r3, #28
 800dbea:	d501      	bpl.n	800dbf0 <_vfiprintf_r+0x34>
 800dbec:	692b      	ldr	r3, [r5, #16]
 800dbee:	b99b      	cbnz	r3, 800dc18 <_vfiprintf_r+0x5c>
 800dbf0:	4629      	mov	r1, r5
 800dbf2:	4630      	mov	r0, r6
 800dbf4:	f000 fb72 	bl	800e2dc <__swsetup_r>
 800dbf8:	b170      	cbz	r0, 800dc18 <_vfiprintf_r+0x5c>
 800dbfa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dbfc:	07dc      	lsls	r4, r3, #31
 800dbfe:	d504      	bpl.n	800dc0a <_vfiprintf_r+0x4e>
 800dc00:	f04f 30ff 	mov.w	r0, #4294967295
 800dc04:	b01d      	add	sp, #116	@ 0x74
 800dc06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc0a:	89ab      	ldrh	r3, [r5, #12]
 800dc0c:	0598      	lsls	r0, r3, #22
 800dc0e:	d4f7      	bmi.n	800dc00 <_vfiprintf_r+0x44>
 800dc10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dc12:	f7ff fea5 	bl	800d960 <__retarget_lock_release_recursive>
 800dc16:	e7f3      	b.n	800dc00 <_vfiprintf_r+0x44>
 800dc18:	2300      	movs	r3, #0
 800dc1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc1c:	2320      	movs	r3, #32
 800dc1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dc22:	2330      	movs	r3, #48	@ 0x30
 800dc24:	f04f 0901 	mov.w	r9, #1
 800dc28:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc2c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800ddd8 <_vfiprintf_r+0x21c>
 800dc30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dc34:	4623      	mov	r3, r4
 800dc36:	469a      	mov	sl, r3
 800dc38:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc3c:	b10a      	cbz	r2, 800dc42 <_vfiprintf_r+0x86>
 800dc3e:	2a25      	cmp	r2, #37	@ 0x25
 800dc40:	d1f9      	bne.n	800dc36 <_vfiprintf_r+0x7a>
 800dc42:	ebba 0b04 	subs.w	fp, sl, r4
 800dc46:	d00b      	beq.n	800dc60 <_vfiprintf_r+0xa4>
 800dc48:	465b      	mov	r3, fp
 800dc4a:	4622      	mov	r2, r4
 800dc4c:	4629      	mov	r1, r5
 800dc4e:	4630      	mov	r0, r6
 800dc50:	f7ff ffa1 	bl	800db96 <__sfputs_r>
 800dc54:	3001      	adds	r0, #1
 800dc56:	f000 80a7 	beq.w	800dda8 <_vfiprintf_r+0x1ec>
 800dc5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc5c:	445a      	add	r2, fp
 800dc5e:	9209      	str	r2, [sp, #36]	@ 0x24
 800dc60:	f89a 3000 	ldrb.w	r3, [sl]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	f000 809f 	beq.w	800dda8 <_vfiprintf_r+0x1ec>
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	f04f 32ff 	mov.w	r2, #4294967295
 800dc70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc74:	f10a 0a01 	add.w	sl, sl, #1
 800dc78:	9304      	str	r3, [sp, #16]
 800dc7a:	9307      	str	r3, [sp, #28]
 800dc7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dc80:	931a      	str	r3, [sp, #104]	@ 0x68
 800dc82:	4654      	mov	r4, sl
 800dc84:	2205      	movs	r2, #5
 800dc86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc8a:	4853      	ldr	r0, [pc, #332]	@ (800ddd8 <_vfiprintf_r+0x21c>)
 800dc8c:	f000 fb8c 	bl	800e3a8 <memchr>
 800dc90:	9a04      	ldr	r2, [sp, #16]
 800dc92:	b9d8      	cbnz	r0, 800dccc <_vfiprintf_r+0x110>
 800dc94:	06d1      	lsls	r1, r2, #27
 800dc96:	bf44      	itt	mi
 800dc98:	2320      	movmi	r3, #32
 800dc9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dc9e:	0713      	lsls	r3, r2, #28
 800dca0:	bf44      	itt	mi
 800dca2:	232b      	movmi	r3, #43	@ 0x2b
 800dca4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dca8:	f89a 3000 	ldrb.w	r3, [sl]
 800dcac:	2b2a      	cmp	r3, #42	@ 0x2a
 800dcae:	d015      	beq.n	800dcdc <_vfiprintf_r+0x120>
 800dcb0:	4654      	mov	r4, sl
 800dcb2:	2000      	movs	r0, #0
 800dcb4:	f04f 0c0a 	mov.w	ip, #10
 800dcb8:	9a07      	ldr	r2, [sp, #28]
 800dcba:	4621      	mov	r1, r4
 800dcbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dcc0:	3b30      	subs	r3, #48	@ 0x30
 800dcc2:	2b09      	cmp	r3, #9
 800dcc4:	d94b      	bls.n	800dd5e <_vfiprintf_r+0x1a2>
 800dcc6:	b1b0      	cbz	r0, 800dcf6 <_vfiprintf_r+0x13a>
 800dcc8:	9207      	str	r2, [sp, #28]
 800dcca:	e014      	b.n	800dcf6 <_vfiprintf_r+0x13a>
 800dccc:	eba0 0308 	sub.w	r3, r0, r8
 800dcd0:	fa09 f303 	lsl.w	r3, r9, r3
 800dcd4:	4313      	orrs	r3, r2
 800dcd6:	46a2      	mov	sl, r4
 800dcd8:	9304      	str	r3, [sp, #16]
 800dcda:	e7d2      	b.n	800dc82 <_vfiprintf_r+0xc6>
 800dcdc:	9b03      	ldr	r3, [sp, #12]
 800dcde:	1d19      	adds	r1, r3, #4
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	9103      	str	r1, [sp, #12]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	bfbb      	ittet	lt
 800dce8:	425b      	neglt	r3, r3
 800dcea:	f042 0202 	orrlt.w	r2, r2, #2
 800dcee:	9307      	strge	r3, [sp, #28]
 800dcf0:	9307      	strlt	r3, [sp, #28]
 800dcf2:	bfb8      	it	lt
 800dcf4:	9204      	strlt	r2, [sp, #16]
 800dcf6:	7823      	ldrb	r3, [r4, #0]
 800dcf8:	2b2e      	cmp	r3, #46	@ 0x2e
 800dcfa:	d10a      	bne.n	800dd12 <_vfiprintf_r+0x156>
 800dcfc:	7863      	ldrb	r3, [r4, #1]
 800dcfe:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd00:	d132      	bne.n	800dd68 <_vfiprintf_r+0x1ac>
 800dd02:	9b03      	ldr	r3, [sp, #12]
 800dd04:	3402      	adds	r4, #2
 800dd06:	1d1a      	adds	r2, r3, #4
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	9203      	str	r2, [sp, #12]
 800dd0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dd10:	9305      	str	r3, [sp, #20]
 800dd12:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800dddc <_vfiprintf_r+0x220>
 800dd16:	2203      	movs	r2, #3
 800dd18:	4650      	mov	r0, sl
 800dd1a:	7821      	ldrb	r1, [r4, #0]
 800dd1c:	f000 fb44 	bl	800e3a8 <memchr>
 800dd20:	b138      	cbz	r0, 800dd32 <_vfiprintf_r+0x176>
 800dd22:	2240      	movs	r2, #64	@ 0x40
 800dd24:	9b04      	ldr	r3, [sp, #16]
 800dd26:	eba0 000a 	sub.w	r0, r0, sl
 800dd2a:	4082      	lsls	r2, r0
 800dd2c:	4313      	orrs	r3, r2
 800dd2e:	3401      	adds	r4, #1
 800dd30:	9304      	str	r3, [sp, #16]
 800dd32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd36:	2206      	movs	r2, #6
 800dd38:	4829      	ldr	r0, [pc, #164]	@ (800dde0 <_vfiprintf_r+0x224>)
 800dd3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dd3e:	f000 fb33 	bl	800e3a8 <memchr>
 800dd42:	2800      	cmp	r0, #0
 800dd44:	d03f      	beq.n	800ddc6 <_vfiprintf_r+0x20a>
 800dd46:	4b27      	ldr	r3, [pc, #156]	@ (800dde4 <_vfiprintf_r+0x228>)
 800dd48:	bb1b      	cbnz	r3, 800dd92 <_vfiprintf_r+0x1d6>
 800dd4a:	9b03      	ldr	r3, [sp, #12]
 800dd4c:	3307      	adds	r3, #7
 800dd4e:	f023 0307 	bic.w	r3, r3, #7
 800dd52:	3308      	adds	r3, #8
 800dd54:	9303      	str	r3, [sp, #12]
 800dd56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd58:	443b      	add	r3, r7
 800dd5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd5c:	e76a      	b.n	800dc34 <_vfiprintf_r+0x78>
 800dd5e:	460c      	mov	r4, r1
 800dd60:	2001      	movs	r0, #1
 800dd62:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd66:	e7a8      	b.n	800dcba <_vfiprintf_r+0xfe>
 800dd68:	2300      	movs	r3, #0
 800dd6a:	f04f 0c0a 	mov.w	ip, #10
 800dd6e:	4619      	mov	r1, r3
 800dd70:	3401      	adds	r4, #1
 800dd72:	9305      	str	r3, [sp, #20]
 800dd74:	4620      	mov	r0, r4
 800dd76:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd7a:	3a30      	subs	r2, #48	@ 0x30
 800dd7c:	2a09      	cmp	r2, #9
 800dd7e:	d903      	bls.n	800dd88 <_vfiprintf_r+0x1cc>
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d0c6      	beq.n	800dd12 <_vfiprintf_r+0x156>
 800dd84:	9105      	str	r1, [sp, #20]
 800dd86:	e7c4      	b.n	800dd12 <_vfiprintf_r+0x156>
 800dd88:	4604      	mov	r4, r0
 800dd8a:	2301      	movs	r3, #1
 800dd8c:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd90:	e7f0      	b.n	800dd74 <_vfiprintf_r+0x1b8>
 800dd92:	ab03      	add	r3, sp, #12
 800dd94:	9300      	str	r3, [sp, #0]
 800dd96:	462a      	mov	r2, r5
 800dd98:	4630      	mov	r0, r6
 800dd9a:	4b13      	ldr	r3, [pc, #76]	@ (800dde8 <_vfiprintf_r+0x22c>)
 800dd9c:	a904      	add	r1, sp, #16
 800dd9e:	f3af 8000 	nop.w
 800dda2:	4607      	mov	r7, r0
 800dda4:	1c78      	adds	r0, r7, #1
 800dda6:	d1d6      	bne.n	800dd56 <_vfiprintf_r+0x19a>
 800dda8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ddaa:	07d9      	lsls	r1, r3, #31
 800ddac:	d405      	bmi.n	800ddba <_vfiprintf_r+0x1fe>
 800ddae:	89ab      	ldrh	r3, [r5, #12]
 800ddb0:	059a      	lsls	r2, r3, #22
 800ddb2:	d402      	bmi.n	800ddba <_vfiprintf_r+0x1fe>
 800ddb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ddb6:	f7ff fdd3 	bl	800d960 <__retarget_lock_release_recursive>
 800ddba:	89ab      	ldrh	r3, [r5, #12]
 800ddbc:	065b      	lsls	r3, r3, #25
 800ddbe:	f53f af1f 	bmi.w	800dc00 <_vfiprintf_r+0x44>
 800ddc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ddc4:	e71e      	b.n	800dc04 <_vfiprintf_r+0x48>
 800ddc6:	ab03      	add	r3, sp, #12
 800ddc8:	9300      	str	r3, [sp, #0]
 800ddca:	462a      	mov	r2, r5
 800ddcc:	4630      	mov	r0, r6
 800ddce:	4b06      	ldr	r3, [pc, #24]	@ (800dde8 <_vfiprintf_r+0x22c>)
 800ddd0:	a904      	add	r1, sp, #16
 800ddd2:	f000 f87d 	bl	800ded0 <_printf_i>
 800ddd6:	e7e4      	b.n	800dda2 <_vfiprintf_r+0x1e6>
 800ddd8:	08010296 	.word	0x08010296
 800dddc:	0801029c 	.word	0x0801029c
 800dde0:	080102a0 	.word	0x080102a0
 800dde4:	00000000 	.word	0x00000000
 800dde8:	0800db97 	.word	0x0800db97

0800ddec <_printf_common>:
 800ddec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddf0:	4616      	mov	r6, r2
 800ddf2:	4698      	mov	r8, r3
 800ddf4:	688a      	ldr	r2, [r1, #8]
 800ddf6:	690b      	ldr	r3, [r1, #16]
 800ddf8:	4607      	mov	r7, r0
 800ddfa:	4293      	cmp	r3, r2
 800ddfc:	bfb8      	it	lt
 800ddfe:	4613      	movlt	r3, r2
 800de00:	6033      	str	r3, [r6, #0]
 800de02:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800de06:	460c      	mov	r4, r1
 800de08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800de0c:	b10a      	cbz	r2, 800de12 <_printf_common+0x26>
 800de0e:	3301      	adds	r3, #1
 800de10:	6033      	str	r3, [r6, #0]
 800de12:	6823      	ldr	r3, [r4, #0]
 800de14:	0699      	lsls	r1, r3, #26
 800de16:	bf42      	ittt	mi
 800de18:	6833      	ldrmi	r3, [r6, #0]
 800de1a:	3302      	addmi	r3, #2
 800de1c:	6033      	strmi	r3, [r6, #0]
 800de1e:	6825      	ldr	r5, [r4, #0]
 800de20:	f015 0506 	ands.w	r5, r5, #6
 800de24:	d106      	bne.n	800de34 <_printf_common+0x48>
 800de26:	f104 0a19 	add.w	sl, r4, #25
 800de2a:	68e3      	ldr	r3, [r4, #12]
 800de2c:	6832      	ldr	r2, [r6, #0]
 800de2e:	1a9b      	subs	r3, r3, r2
 800de30:	42ab      	cmp	r3, r5
 800de32:	dc2b      	bgt.n	800de8c <_printf_common+0xa0>
 800de34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800de38:	6822      	ldr	r2, [r4, #0]
 800de3a:	3b00      	subs	r3, #0
 800de3c:	bf18      	it	ne
 800de3e:	2301      	movne	r3, #1
 800de40:	0692      	lsls	r2, r2, #26
 800de42:	d430      	bmi.n	800dea6 <_printf_common+0xba>
 800de44:	4641      	mov	r1, r8
 800de46:	4638      	mov	r0, r7
 800de48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800de4c:	47c8      	blx	r9
 800de4e:	3001      	adds	r0, #1
 800de50:	d023      	beq.n	800de9a <_printf_common+0xae>
 800de52:	6823      	ldr	r3, [r4, #0]
 800de54:	6922      	ldr	r2, [r4, #16]
 800de56:	f003 0306 	and.w	r3, r3, #6
 800de5a:	2b04      	cmp	r3, #4
 800de5c:	bf14      	ite	ne
 800de5e:	2500      	movne	r5, #0
 800de60:	6833      	ldreq	r3, [r6, #0]
 800de62:	f04f 0600 	mov.w	r6, #0
 800de66:	bf08      	it	eq
 800de68:	68e5      	ldreq	r5, [r4, #12]
 800de6a:	f104 041a 	add.w	r4, r4, #26
 800de6e:	bf08      	it	eq
 800de70:	1aed      	subeq	r5, r5, r3
 800de72:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800de76:	bf08      	it	eq
 800de78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800de7c:	4293      	cmp	r3, r2
 800de7e:	bfc4      	itt	gt
 800de80:	1a9b      	subgt	r3, r3, r2
 800de82:	18ed      	addgt	r5, r5, r3
 800de84:	42b5      	cmp	r5, r6
 800de86:	d11a      	bne.n	800debe <_printf_common+0xd2>
 800de88:	2000      	movs	r0, #0
 800de8a:	e008      	b.n	800de9e <_printf_common+0xb2>
 800de8c:	2301      	movs	r3, #1
 800de8e:	4652      	mov	r2, sl
 800de90:	4641      	mov	r1, r8
 800de92:	4638      	mov	r0, r7
 800de94:	47c8      	blx	r9
 800de96:	3001      	adds	r0, #1
 800de98:	d103      	bne.n	800dea2 <_printf_common+0xb6>
 800de9a:	f04f 30ff 	mov.w	r0, #4294967295
 800de9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dea2:	3501      	adds	r5, #1
 800dea4:	e7c1      	b.n	800de2a <_printf_common+0x3e>
 800dea6:	2030      	movs	r0, #48	@ 0x30
 800dea8:	18e1      	adds	r1, r4, r3
 800deaa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800deae:	1c5a      	adds	r2, r3, #1
 800deb0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800deb4:	4422      	add	r2, r4
 800deb6:	3302      	adds	r3, #2
 800deb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800debc:	e7c2      	b.n	800de44 <_printf_common+0x58>
 800debe:	2301      	movs	r3, #1
 800dec0:	4622      	mov	r2, r4
 800dec2:	4641      	mov	r1, r8
 800dec4:	4638      	mov	r0, r7
 800dec6:	47c8      	blx	r9
 800dec8:	3001      	adds	r0, #1
 800deca:	d0e6      	beq.n	800de9a <_printf_common+0xae>
 800decc:	3601      	adds	r6, #1
 800dece:	e7d9      	b.n	800de84 <_printf_common+0x98>

0800ded0 <_printf_i>:
 800ded0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ded4:	7e0f      	ldrb	r7, [r1, #24]
 800ded6:	4691      	mov	r9, r2
 800ded8:	2f78      	cmp	r7, #120	@ 0x78
 800deda:	4680      	mov	r8, r0
 800dedc:	460c      	mov	r4, r1
 800dede:	469a      	mov	sl, r3
 800dee0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dee2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dee6:	d807      	bhi.n	800def8 <_printf_i+0x28>
 800dee8:	2f62      	cmp	r7, #98	@ 0x62
 800deea:	d80a      	bhi.n	800df02 <_printf_i+0x32>
 800deec:	2f00      	cmp	r7, #0
 800deee:	f000 80d3 	beq.w	800e098 <_printf_i+0x1c8>
 800def2:	2f58      	cmp	r7, #88	@ 0x58
 800def4:	f000 80ba 	beq.w	800e06c <_printf_i+0x19c>
 800def8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800defc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800df00:	e03a      	b.n	800df78 <_printf_i+0xa8>
 800df02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800df06:	2b15      	cmp	r3, #21
 800df08:	d8f6      	bhi.n	800def8 <_printf_i+0x28>
 800df0a:	a101      	add	r1, pc, #4	@ (adr r1, 800df10 <_printf_i+0x40>)
 800df0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800df10:	0800df69 	.word	0x0800df69
 800df14:	0800df7d 	.word	0x0800df7d
 800df18:	0800def9 	.word	0x0800def9
 800df1c:	0800def9 	.word	0x0800def9
 800df20:	0800def9 	.word	0x0800def9
 800df24:	0800def9 	.word	0x0800def9
 800df28:	0800df7d 	.word	0x0800df7d
 800df2c:	0800def9 	.word	0x0800def9
 800df30:	0800def9 	.word	0x0800def9
 800df34:	0800def9 	.word	0x0800def9
 800df38:	0800def9 	.word	0x0800def9
 800df3c:	0800e07f 	.word	0x0800e07f
 800df40:	0800dfa7 	.word	0x0800dfa7
 800df44:	0800e039 	.word	0x0800e039
 800df48:	0800def9 	.word	0x0800def9
 800df4c:	0800def9 	.word	0x0800def9
 800df50:	0800e0a1 	.word	0x0800e0a1
 800df54:	0800def9 	.word	0x0800def9
 800df58:	0800dfa7 	.word	0x0800dfa7
 800df5c:	0800def9 	.word	0x0800def9
 800df60:	0800def9 	.word	0x0800def9
 800df64:	0800e041 	.word	0x0800e041
 800df68:	6833      	ldr	r3, [r6, #0]
 800df6a:	1d1a      	adds	r2, r3, #4
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	6032      	str	r2, [r6, #0]
 800df70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800df74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800df78:	2301      	movs	r3, #1
 800df7a:	e09e      	b.n	800e0ba <_printf_i+0x1ea>
 800df7c:	6833      	ldr	r3, [r6, #0]
 800df7e:	6820      	ldr	r0, [r4, #0]
 800df80:	1d19      	adds	r1, r3, #4
 800df82:	6031      	str	r1, [r6, #0]
 800df84:	0606      	lsls	r6, r0, #24
 800df86:	d501      	bpl.n	800df8c <_printf_i+0xbc>
 800df88:	681d      	ldr	r5, [r3, #0]
 800df8a:	e003      	b.n	800df94 <_printf_i+0xc4>
 800df8c:	0645      	lsls	r5, r0, #25
 800df8e:	d5fb      	bpl.n	800df88 <_printf_i+0xb8>
 800df90:	f9b3 5000 	ldrsh.w	r5, [r3]
 800df94:	2d00      	cmp	r5, #0
 800df96:	da03      	bge.n	800dfa0 <_printf_i+0xd0>
 800df98:	232d      	movs	r3, #45	@ 0x2d
 800df9a:	426d      	negs	r5, r5
 800df9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dfa0:	230a      	movs	r3, #10
 800dfa2:	4859      	ldr	r0, [pc, #356]	@ (800e108 <_printf_i+0x238>)
 800dfa4:	e011      	b.n	800dfca <_printf_i+0xfa>
 800dfa6:	6821      	ldr	r1, [r4, #0]
 800dfa8:	6833      	ldr	r3, [r6, #0]
 800dfaa:	0608      	lsls	r0, r1, #24
 800dfac:	f853 5b04 	ldr.w	r5, [r3], #4
 800dfb0:	d402      	bmi.n	800dfb8 <_printf_i+0xe8>
 800dfb2:	0649      	lsls	r1, r1, #25
 800dfb4:	bf48      	it	mi
 800dfb6:	b2ad      	uxthmi	r5, r5
 800dfb8:	2f6f      	cmp	r7, #111	@ 0x6f
 800dfba:	6033      	str	r3, [r6, #0]
 800dfbc:	bf14      	ite	ne
 800dfbe:	230a      	movne	r3, #10
 800dfc0:	2308      	moveq	r3, #8
 800dfc2:	4851      	ldr	r0, [pc, #324]	@ (800e108 <_printf_i+0x238>)
 800dfc4:	2100      	movs	r1, #0
 800dfc6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dfca:	6866      	ldr	r6, [r4, #4]
 800dfcc:	2e00      	cmp	r6, #0
 800dfce:	bfa8      	it	ge
 800dfd0:	6821      	ldrge	r1, [r4, #0]
 800dfd2:	60a6      	str	r6, [r4, #8]
 800dfd4:	bfa4      	itt	ge
 800dfd6:	f021 0104 	bicge.w	r1, r1, #4
 800dfda:	6021      	strge	r1, [r4, #0]
 800dfdc:	b90d      	cbnz	r5, 800dfe2 <_printf_i+0x112>
 800dfde:	2e00      	cmp	r6, #0
 800dfe0:	d04b      	beq.n	800e07a <_printf_i+0x1aa>
 800dfe2:	4616      	mov	r6, r2
 800dfe4:	fbb5 f1f3 	udiv	r1, r5, r3
 800dfe8:	fb03 5711 	mls	r7, r3, r1, r5
 800dfec:	5dc7      	ldrb	r7, [r0, r7]
 800dfee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dff2:	462f      	mov	r7, r5
 800dff4:	42bb      	cmp	r3, r7
 800dff6:	460d      	mov	r5, r1
 800dff8:	d9f4      	bls.n	800dfe4 <_printf_i+0x114>
 800dffa:	2b08      	cmp	r3, #8
 800dffc:	d10b      	bne.n	800e016 <_printf_i+0x146>
 800dffe:	6823      	ldr	r3, [r4, #0]
 800e000:	07df      	lsls	r7, r3, #31
 800e002:	d508      	bpl.n	800e016 <_printf_i+0x146>
 800e004:	6923      	ldr	r3, [r4, #16]
 800e006:	6861      	ldr	r1, [r4, #4]
 800e008:	4299      	cmp	r1, r3
 800e00a:	bfde      	ittt	le
 800e00c:	2330      	movle	r3, #48	@ 0x30
 800e00e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e012:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e016:	1b92      	subs	r2, r2, r6
 800e018:	6122      	str	r2, [r4, #16]
 800e01a:	464b      	mov	r3, r9
 800e01c:	4621      	mov	r1, r4
 800e01e:	4640      	mov	r0, r8
 800e020:	f8cd a000 	str.w	sl, [sp]
 800e024:	aa03      	add	r2, sp, #12
 800e026:	f7ff fee1 	bl	800ddec <_printf_common>
 800e02a:	3001      	adds	r0, #1
 800e02c:	d14a      	bne.n	800e0c4 <_printf_i+0x1f4>
 800e02e:	f04f 30ff 	mov.w	r0, #4294967295
 800e032:	b004      	add	sp, #16
 800e034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e038:	6823      	ldr	r3, [r4, #0]
 800e03a:	f043 0320 	orr.w	r3, r3, #32
 800e03e:	6023      	str	r3, [r4, #0]
 800e040:	2778      	movs	r7, #120	@ 0x78
 800e042:	4832      	ldr	r0, [pc, #200]	@ (800e10c <_printf_i+0x23c>)
 800e044:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e048:	6823      	ldr	r3, [r4, #0]
 800e04a:	6831      	ldr	r1, [r6, #0]
 800e04c:	061f      	lsls	r7, r3, #24
 800e04e:	f851 5b04 	ldr.w	r5, [r1], #4
 800e052:	d402      	bmi.n	800e05a <_printf_i+0x18a>
 800e054:	065f      	lsls	r7, r3, #25
 800e056:	bf48      	it	mi
 800e058:	b2ad      	uxthmi	r5, r5
 800e05a:	6031      	str	r1, [r6, #0]
 800e05c:	07d9      	lsls	r1, r3, #31
 800e05e:	bf44      	itt	mi
 800e060:	f043 0320 	orrmi.w	r3, r3, #32
 800e064:	6023      	strmi	r3, [r4, #0]
 800e066:	b11d      	cbz	r5, 800e070 <_printf_i+0x1a0>
 800e068:	2310      	movs	r3, #16
 800e06a:	e7ab      	b.n	800dfc4 <_printf_i+0xf4>
 800e06c:	4826      	ldr	r0, [pc, #152]	@ (800e108 <_printf_i+0x238>)
 800e06e:	e7e9      	b.n	800e044 <_printf_i+0x174>
 800e070:	6823      	ldr	r3, [r4, #0]
 800e072:	f023 0320 	bic.w	r3, r3, #32
 800e076:	6023      	str	r3, [r4, #0]
 800e078:	e7f6      	b.n	800e068 <_printf_i+0x198>
 800e07a:	4616      	mov	r6, r2
 800e07c:	e7bd      	b.n	800dffa <_printf_i+0x12a>
 800e07e:	6833      	ldr	r3, [r6, #0]
 800e080:	6825      	ldr	r5, [r4, #0]
 800e082:	1d18      	adds	r0, r3, #4
 800e084:	6961      	ldr	r1, [r4, #20]
 800e086:	6030      	str	r0, [r6, #0]
 800e088:	062e      	lsls	r6, r5, #24
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	d501      	bpl.n	800e092 <_printf_i+0x1c2>
 800e08e:	6019      	str	r1, [r3, #0]
 800e090:	e002      	b.n	800e098 <_printf_i+0x1c8>
 800e092:	0668      	lsls	r0, r5, #25
 800e094:	d5fb      	bpl.n	800e08e <_printf_i+0x1be>
 800e096:	8019      	strh	r1, [r3, #0]
 800e098:	2300      	movs	r3, #0
 800e09a:	4616      	mov	r6, r2
 800e09c:	6123      	str	r3, [r4, #16]
 800e09e:	e7bc      	b.n	800e01a <_printf_i+0x14a>
 800e0a0:	6833      	ldr	r3, [r6, #0]
 800e0a2:	2100      	movs	r1, #0
 800e0a4:	1d1a      	adds	r2, r3, #4
 800e0a6:	6032      	str	r2, [r6, #0]
 800e0a8:	681e      	ldr	r6, [r3, #0]
 800e0aa:	6862      	ldr	r2, [r4, #4]
 800e0ac:	4630      	mov	r0, r6
 800e0ae:	f000 f97b 	bl	800e3a8 <memchr>
 800e0b2:	b108      	cbz	r0, 800e0b8 <_printf_i+0x1e8>
 800e0b4:	1b80      	subs	r0, r0, r6
 800e0b6:	6060      	str	r0, [r4, #4]
 800e0b8:	6863      	ldr	r3, [r4, #4]
 800e0ba:	6123      	str	r3, [r4, #16]
 800e0bc:	2300      	movs	r3, #0
 800e0be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e0c2:	e7aa      	b.n	800e01a <_printf_i+0x14a>
 800e0c4:	4632      	mov	r2, r6
 800e0c6:	4649      	mov	r1, r9
 800e0c8:	4640      	mov	r0, r8
 800e0ca:	6923      	ldr	r3, [r4, #16]
 800e0cc:	47d0      	blx	sl
 800e0ce:	3001      	adds	r0, #1
 800e0d0:	d0ad      	beq.n	800e02e <_printf_i+0x15e>
 800e0d2:	6823      	ldr	r3, [r4, #0]
 800e0d4:	079b      	lsls	r3, r3, #30
 800e0d6:	d413      	bmi.n	800e100 <_printf_i+0x230>
 800e0d8:	68e0      	ldr	r0, [r4, #12]
 800e0da:	9b03      	ldr	r3, [sp, #12]
 800e0dc:	4298      	cmp	r0, r3
 800e0de:	bfb8      	it	lt
 800e0e0:	4618      	movlt	r0, r3
 800e0e2:	e7a6      	b.n	800e032 <_printf_i+0x162>
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	4632      	mov	r2, r6
 800e0e8:	4649      	mov	r1, r9
 800e0ea:	4640      	mov	r0, r8
 800e0ec:	47d0      	blx	sl
 800e0ee:	3001      	adds	r0, #1
 800e0f0:	d09d      	beq.n	800e02e <_printf_i+0x15e>
 800e0f2:	3501      	adds	r5, #1
 800e0f4:	68e3      	ldr	r3, [r4, #12]
 800e0f6:	9903      	ldr	r1, [sp, #12]
 800e0f8:	1a5b      	subs	r3, r3, r1
 800e0fa:	42ab      	cmp	r3, r5
 800e0fc:	dcf2      	bgt.n	800e0e4 <_printf_i+0x214>
 800e0fe:	e7eb      	b.n	800e0d8 <_printf_i+0x208>
 800e100:	2500      	movs	r5, #0
 800e102:	f104 0619 	add.w	r6, r4, #25
 800e106:	e7f5      	b.n	800e0f4 <_printf_i+0x224>
 800e108:	080102a7 	.word	0x080102a7
 800e10c:	080102b8 	.word	0x080102b8

0800e110 <__sflush_r>:
 800e110:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e116:	0716      	lsls	r6, r2, #28
 800e118:	4605      	mov	r5, r0
 800e11a:	460c      	mov	r4, r1
 800e11c:	d454      	bmi.n	800e1c8 <__sflush_r+0xb8>
 800e11e:	684b      	ldr	r3, [r1, #4]
 800e120:	2b00      	cmp	r3, #0
 800e122:	dc02      	bgt.n	800e12a <__sflush_r+0x1a>
 800e124:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e126:	2b00      	cmp	r3, #0
 800e128:	dd48      	ble.n	800e1bc <__sflush_r+0xac>
 800e12a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e12c:	2e00      	cmp	r6, #0
 800e12e:	d045      	beq.n	800e1bc <__sflush_r+0xac>
 800e130:	2300      	movs	r3, #0
 800e132:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e136:	682f      	ldr	r7, [r5, #0]
 800e138:	6a21      	ldr	r1, [r4, #32]
 800e13a:	602b      	str	r3, [r5, #0]
 800e13c:	d030      	beq.n	800e1a0 <__sflush_r+0x90>
 800e13e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e140:	89a3      	ldrh	r3, [r4, #12]
 800e142:	0759      	lsls	r1, r3, #29
 800e144:	d505      	bpl.n	800e152 <__sflush_r+0x42>
 800e146:	6863      	ldr	r3, [r4, #4]
 800e148:	1ad2      	subs	r2, r2, r3
 800e14a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e14c:	b10b      	cbz	r3, 800e152 <__sflush_r+0x42>
 800e14e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e150:	1ad2      	subs	r2, r2, r3
 800e152:	2300      	movs	r3, #0
 800e154:	4628      	mov	r0, r5
 800e156:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e158:	6a21      	ldr	r1, [r4, #32]
 800e15a:	47b0      	blx	r6
 800e15c:	1c43      	adds	r3, r0, #1
 800e15e:	89a3      	ldrh	r3, [r4, #12]
 800e160:	d106      	bne.n	800e170 <__sflush_r+0x60>
 800e162:	6829      	ldr	r1, [r5, #0]
 800e164:	291d      	cmp	r1, #29
 800e166:	d82b      	bhi.n	800e1c0 <__sflush_r+0xb0>
 800e168:	4a28      	ldr	r2, [pc, #160]	@ (800e20c <__sflush_r+0xfc>)
 800e16a:	410a      	asrs	r2, r1
 800e16c:	07d6      	lsls	r6, r2, #31
 800e16e:	d427      	bmi.n	800e1c0 <__sflush_r+0xb0>
 800e170:	2200      	movs	r2, #0
 800e172:	6062      	str	r2, [r4, #4]
 800e174:	6922      	ldr	r2, [r4, #16]
 800e176:	04d9      	lsls	r1, r3, #19
 800e178:	6022      	str	r2, [r4, #0]
 800e17a:	d504      	bpl.n	800e186 <__sflush_r+0x76>
 800e17c:	1c42      	adds	r2, r0, #1
 800e17e:	d101      	bne.n	800e184 <__sflush_r+0x74>
 800e180:	682b      	ldr	r3, [r5, #0]
 800e182:	b903      	cbnz	r3, 800e186 <__sflush_r+0x76>
 800e184:	6560      	str	r0, [r4, #84]	@ 0x54
 800e186:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e188:	602f      	str	r7, [r5, #0]
 800e18a:	b1b9      	cbz	r1, 800e1bc <__sflush_r+0xac>
 800e18c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e190:	4299      	cmp	r1, r3
 800e192:	d002      	beq.n	800e19a <__sflush_r+0x8a>
 800e194:	4628      	mov	r0, r5
 800e196:	f7ff fbf3 	bl	800d980 <_free_r>
 800e19a:	2300      	movs	r3, #0
 800e19c:	6363      	str	r3, [r4, #52]	@ 0x34
 800e19e:	e00d      	b.n	800e1bc <__sflush_r+0xac>
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	4628      	mov	r0, r5
 800e1a4:	47b0      	blx	r6
 800e1a6:	4602      	mov	r2, r0
 800e1a8:	1c50      	adds	r0, r2, #1
 800e1aa:	d1c9      	bne.n	800e140 <__sflush_r+0x30>
 800e1ac:	682b      	ldr	r3, [r5, #0]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d0c6      	beq.n	800e140 <__sflush_r+0x30>
 800e1b2:	2b1d      	cmp	r3, #29
 800e1b4:	d001      	beq.n	800e1ba <__sflush_r+0xaa>
 800e1b6:	2b16      	cmp	r3, #22
 800e1b8:	d11d      	bne.n	800e1f6 <__sflush_r+0xe6>
 800e1ba:	602f      	str	r7, [r5, #0]
 800e1bc:	2000      	movs	r0, #0
 800e1be:	e021      	b.n	800e204 <__sflush_r+0xf4>
 800e1c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e1c4:	b21b      	sxth	r3, r3
 800e1c6:	e01a      	b.n	800e1fe <__sflush_r+0xee>
 800e1c8:	690f      	ldr	r7, [r1, #16]
 800e1ca:	2f00      	cmp	r7, #0
 800e1cc:	d0f6      	beq.n	800e1bc <__sflush_r+0xac>
 800e1ce:	0793      	lsls	r3, r2, #30
 800e1d0:	bf18      	it	ne
 800e1d2:	2300      	movne	r3, #0
 800e1d4:	680e      	ldr	r6, [r1, #0]
 800e1d6:	bf08      	it	eq
 800e1d8:	694b      	ldreq	r3, [r1, #20]
 800e1da:	1bf6      	subs	r6, r6, r7
 800e1dc:	600f      	str	r7, [r1, #0]
 800e1de:	608b      	str	r3, [r1, #8]
 800e1e0:	2e00      	cmp	r6, #0
 800e1e2:	ddeb      	ble.n	800e1bc <__sflush_r+0xac>
 800e1e4:	4633      	mov	r3, r6
 800e1e6:	463a      	mov	r2, r7
 800e1e8:	4628      	mov	r0, r5
 800e1ea:	6a21      	ldr	r1, [r4, #32]
 800e1ec:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800e1f0:	47e0      	blx	ip
 800e1f2:	2800      	cmp	r0, #0
 800e1f4:	dc07      	bgt.n	800e206 <__sflush_r+0xf6>
 800e1f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e1fe:	f04f 30ff 	mov.w	r0, #4294967295
 800e202:	81a3      	strh	r3, [r4, #12]
 800e204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e206:	4407      	add	r7, r0
 800e208:	1a36      	subs	r6, r6, r0
 800e20a:	e7e9      	b.n	800e1e0 <__sflush_r+0xd0>
 800e20c:	dfbffffe 	.word	0xdfbffffe

0800e210 <_fflush_r>:
 800e210:	b538      	push	{r3, r4, r5, lr}
 800e212:	690b      	ldr	r3, [r1, #16]
 800e214:	4605      	mov	r5, r0
 800e216:	460c      	mov	r4, r1
 800e218:	b913      	cbnz	r3, 800e220 <_fflush_r+0x10>
 800e21a:	2500      	movs	r5, #0
 800e21c:	4628      	mov	r0, r5
 800e21e:	bd38      	pop	{r3, r4, r5, pc}
 800e220:	b118      	cbz	r0, 800e22a <_fflush_r+0x1a>
 800e222:	6a03      	ldr	r3, [r0, #32]
 800e224:	b90b      	cbnz	r3, 800e22a <_fflush_r+0x1a>
 800e226:	f7ff fa8b 	bl	800d740 <__sinit>
 800e22a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d0f3      	beq.n	800e21a <_fflush_r+0xa>
 800e232:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e234:	07d0      	lsls	r0, r2, #31
 800e236:	d404      	bmi.n	800e242 <_fflush_r+0x32>
 800e238:	0599      	lsls	r1, r3, #22
 800e23a:	d402      	bmi.n	800e242 <_fflush_r+0x32>
 800e23c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e23e:	f7ff fb8e 	bl	800d95e <__retarget_lock_acquire_recursive>
 800e242:	4628      	mov	r0, r5
 800e244:	4621      	mov	r1, r4
 800e246:	f7ff ff63 	bl	800e110 <__sflush_r>
 800e24a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e24c:	4605      	mov	r5, r0
 800e24e:	07da      	lsls	r2, r3, #31
 800e250:	d4e4      	bmi.n	800e21c <_fflush_r+0xc>
 800e252:	89a3      	ldrh	r3, [r4, #12]
 800e254:	059b      	lsls	r3, r3, #22
 800e256:	d4e1      	bmi.n	800e21c <_fflush_r+0xc>
 800e258:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e25a:	f7ff fb81 	bl	800d960 <__retarget_lock_release_recursive>
 800e25e:	e7dd      	b.n	800e21c <_fflush_r+0xc>

0800e260 <__swbuf_r>:
 800e260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e262:	460e      	mov	r6, r1
 800e264:	4614      	mov	r4, r2
 800e266:	4605      	mov	r5, r0
 800e268:	b118      	cbz	r0, 800e272 <__swbuf_r+0x12>
 800e26a:	6a03      	ldr	r3, [r0, #32]
 800e26c:	b90b      	cbnz	r3, 800e272 <__swbuf_r+0x12>
 800e26e:	f7ff fa67 	bl	800d740 <__sinit>
 800e272:	69a3      	ldr	r3, [r4, #24]
 800e274:	60a3      	str	r3, [r4, #8]
 800e276:	89a3      	ldrh	r3, [r4, #12]
 800e278:	071a      	lsls	r2, r3, #28
 800e27a:	d501      	bpl.n	800e280 <__swbuf_r+0x20>
 800e27c:	6923      	ldr	r3, [r4, #16]
 800e27e:	b943      	cbnz	r3, 800e292 <__swbuf_r+0x32>
 800e280:	4621      	mov	r1, r4
 800e282:	4628      	mov	r0, r5
 800e284:	f000 f82a 	bl	800e2dc <__swsetup_r>
 800e288:	b118      	cbz	r0, 800e292 <__swbuf_r+0x32>
 800e28a:	f04f 37ff 	mov.w	r7, #4294967295
 800e28e:	4638      	mov	r0, r7
 800e290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e292:	6823      	ldr	r3, [r4, #0]
 800e294:	6922      	ldr	r2, [r4, #16]
 800e296:	b2f6      	uxtb	r6, r6
 800e298:	1a98      	subs	r0, r3, r2
 800e29a:	6963      	ldr	r3, [r4, #20]
 800e29c:	4637      	mov	r7, r6
 800e29e:	4283      	cmp	r3, r0
 800e2a0:	dc05      	bgt.n	800e2ae <__swbuf_r+0x4e>
 800e2a2:	4621      	mov	r1, r4
 800e2a4:	4628      	mov	r0, r5
 800e2a6:	f7ff ffb3 	bl	800e210 <_fflush_r>
 800e2aa:	2800      	cmp	r0, #0
 800e2ac:	d1ed      	bne.n	800e28a <__swbuf_r+0x2a>
 800e2ae:	68a3      	ldr	r3, [r4, #8]
 800e2b0:	3b01      	subs	r3, #1
 800e2b2:	60a3      	str	r3, [r4, #8]
 800e2b4:	6823      	ldr	r3, [r4, #0]
 800e2b6:	1c5a      	adds	r2, r3, #1
 800e2b8:	6022      	str	r2, [r4, #0]
 800e2ba:	701e      	strb	r6, [r3, #0]
 800e2bc:	6962      	ldr	r2, [r4, #20]
 800e2be:	1c43      	adds	r3, r0, #1
 800e2c0:	429a      	cmp	r2, r3
 800e2c2:	d004      	beq.n	800e2ce <__swbuf_r+0x6e>
 800e2c4:	89a3      	ldrh	r3, [r4, #12]
 800e2c6:	07db      	lsls	r3, r3, #31
 800e2c8:	d5e1      	bpl.n	800e28e <__swbuf_r+0x2e>
 800e2ca:	2e0a      	cmp	r6, #10
 800e2cc:	d1df      	bne.n	800e28e <__swbuf_r+0x2e>
 800e2ce:	4621      	mov	r1, r4
 800e2d0:	4628      	mov	r0, r5
 800e2d2:	f7ff ff9d 	bl	800e210 <_fflush_r>
 800e2d6:	2800      	cmp	r0, #0
 800e2d8:	d0d9      	beq.n	800e28e <__swbuf_r+0x2e>
 800e2da:	e7d6      	b.n	800e28a <__swbuf_r+0x2a>

0800e2dc <__swsetup_r>:
 800e2dc:	b538      	push	{r3, r4, r5, lr}
 800e2de:	4b29      	ldr	r3, [pc, #164]	@ (800e384 <__swsetup_r+0xa8>)
 800e2e0:	4605      	mov	r5, r0
 800e2e2:	6818      	ldr	r0, [r3, #0]
 800e2e4:	460c      	mov	r4, r1
 800e2e6:	b118      	cbz	r0, 800e2f0 <__swsetup_r+0x14>
 800e2e8:	6a03      	ldr	r3, [r0, #32]
 800e2ea:	b90b      	cbnz	r3, 800e2f0 <__swsetup_r+0x14>
 800e2ec:	f7ff fa28 	bl	800d740 <__sinit>
 800e2f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2f4:	0719      	lsls	r1, r3, #28
 800e2f6:	d422      	bmi.n	800e33e <__swsetup_r+0x62>
 800e2f8:	06da      	lsls	r2, r3, #27
 800e2fa:	d407      	bmi.n	800e30c <__swsetup_r+0x30>
 800e2fc:	2209      	movs	r2, #9
 800e2fe:	602a      	str	r2, [r5, #0]
 800e300:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e304:	f04f 30ff 	mov.w	r0, #4294967295
 800e308:	81a3      	strh	r3, [r4, #12]
 800e30a:	e033      	b.n	800e374 <__swsetup_r+0x98>
 800e30c:	0758      	lsls	r0, r3, #29
 800e30e:	d512      	bpl.n	800e336 <__swsetup_r+0x5a>
 800e310:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e312:	b141      	cbz	r1, 800e326 <__swsetup_r+0x4a>
 800e314:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e318:	4299      	cmp	r1, r3
 800e31a:	d002      	beq.n	800e322 <__swsetup_r+0x46>
 800e31c:	4628      	mov	r0, r5
 800e31e:	f7ff fb2f 	bl	800d980 <_free_r>
 800e322:	2300      	movs	r3, #0
 800e324:	6363      	str	r3, [r4, #52]	@ 0x34
 800e326:	89a3      	ldrh	r3, [r4, #12]
 800e328:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e32c:	81a3      	strh	r3, [r4, #12]
 800e32e:	2300      	movs	r3, #0
 800e330:	6063      	str	r3, [r4, #4]
 800e332:	6923      	ldr	r3, [r4, #16]
 800e334:	6023      	str	r3, [r4, #0]
 800e336:	89a3      	ldrh	r3, [r4, #12]
 800e338:	f043 0308 	orr.w	r3, r3, #8
 800e33c:	81a3      	strh	r3, [r4, #12]
 800e33e:	6923      	ldr	r3, [r4, #16]
 800e340:	b94b      	cbnz	r3, 800e356 <__swsetup_r+0x7a>
 800e342:	89a3      	ldrh	r3, [r4, #12]
 800e344:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e348:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e34c:	d003      	beq.n	800e356 <__swsetup_r+0x7a>
 800e34e:	4621      	mov	r1, r4
 800e350:	4628      	mov	r0, r5
 800e352:	f000 f85c 	bl	800e40e <__smakebuf_r>
 800e356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e35a:	f013 0201 	ands.w	r2, r3, #1
 800e35e:	d00a      	beq.n	800e376 <__swsetup_r+0x9a>
 800e360:	2200      	movs	r2, #0
 800e362:	60a2      	str	r2, [r4, #8]
 800e364:	6962      	ldr	r2, [r4, #20]
 800e366:	4252      	negs	r2, r2
 800e368:	61a2      	str	r2, [r4, #24]
 800e36a:	6922      	ldr	r2, [r4, #16]
 800e36c:	b942      	cbnz	r2, 800e380 <__swsetup_r+0xa4>
 800e36e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e372:	d1c5      	bne.n	800e300 <__swsetup_r+0x24>
 800e374:	bd38      	pop	{r3, r4, r5, pc}
 800e376:	0799      	lsls	r1, r3, #30
 800e378:	bf58      	it	pl
 800e37a:	6962      	ldrpl	r2, [r4, #20]
 800e37c:	60a2      	str	r2, [r4, #8]
 800e37e:	e7f4      	b.n	800e36a <__swsetup_r+0x8e>
 800e380:	2000      	movs	r0, #0
 800e382:	e7f7      	b.n	800e374 <__swsetup_r+0x98>
 800e384:	2000001c 	.word	0x2000001c

0800e388 <_sbrk_r>:
 800e388:	b538      	push	{r3, r4, r5, lr}
 800e38a:	2300      	movs	r3, #0
 800e38c:	4d05      	ldr	r5, [pc, #20]	@ (800e3a4 <_sbrk_r+0x1c>)
 800e38e:	4604      	mov	r4, r0
 800e390:	4608      	mov	r0, r1
 800e392:	602b      	str	r3, [r5, #0]
 800e394:	f7f2 fba0 	bl	8000ad8 <_sbrk>
 800e398:	1c43      	adds	r3, r0, #1
 800e39a:	d102      	bne.n	800e3a2 <_sbrk_r+0x1a>
 800e39c:	682b      	ldr	r3, [r5, #0]
 800e39e:	b103      	cbz	r3, 800e3a2 <_sbrk_r+0x1a>
 800e3a0:	6023      	str	r3, [r4, #0]
 800e3a2:	bd38      	pop	{r3, r4, r5, pc}
 800e3a4:	20006ee0 	.word	0x20006ee0

0800e3a8 <memchr>:
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	b510      	push	{r4, lr}
 800e3ac:	b2c9      	uxtb	r1, r1
 800e3ae:	4402      	add	r2, r0
 800e3b0:	4293      	cmp	r3, r2
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	d101      	bne.n	800e3ba <memchr+0x12>
 800e3b6:	2000      	movs	r0, #0
 800e3b8:	e003      	b.n	800e3c2 <memchr+0x1a>
 800e3ba:	7804      	ldrb	r4, [r0, #0]
 800e3bc:	3301      	adds	r3, #1
 800e3be:	428c      	cmp	r4, r1
 800e3c0:	d1f6      	bne.n	800e3b0 <memchr+0x8>
 800e3c2:	bd10      	pop	{r4, pc}

0800e3c4 <__swhatbuf_r>:
 800e3c4:	b570      	push	{r4, r5, r6, lr}
 800e3c6:	460c      	mov	r4, r1
 800e3c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3cc:	4615      	mov	r5, r2
 800e3ce:	2900      	cmp	r1, #0
 800e3d0:	461e      	mov	r6, r3
 800e3d2:	b096      	sub	sp, #88	@ 0x58
 800e3d4:	da0c      	bge.n	800e3f0 <__swhatbuf_r+0x2c>
 800e3d6:	89a3      	ldrh	r3, [r4, #12]
 800e3d8:	2100      	movs	r1, #0
 800e3da:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e3de:	bf14      	ite	ne
 800e3e0:	2340      	movne	r3, #64	@ 0x40
 800e3e2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e3e6:	2000      	movs	r0, #0
 800e3e8:	6031      	str	r1, [r6, #0]
 800e3ea:	602b      	str	r3, [r5, #0]
 800e3ec:	b016      	add	sp, #88	@ 0x58
 800e3ee:	bd70      	pop	{r4, r5, r6, pc}
 800e3f0:	466a      	mov	r2, sp
 800e3f2:	f000 f849 	bl	800e488 <_fstat_r>
 800e3f6:	2800      	cmp	r0, #0
 800e3f8:	dbed      	blt.n	800e3d6 <__swhatbuf_r+0x12>
 800e3fa:	9901      	ldr	r1, [sp, #4]
 800e3fc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e400:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e404:	4259      	negs	r1, r3
 800e406:	4159      	adcs	r1, r3
 800e408:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e40c:	e7eb      	b.n	800e3e6 <__swhatbuf_r+0x22>

0800e40e <__smakebuf_r>:
 800e40e:	898b      	ldrh	r3, [r1, #12]
 800e410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e412:	079d      	lsls	r5, r3, #30
 800e414:	4606      	mov	r6, r0
 800e416:	460c      	mov	r4, r1
 800e418:	d507      	bpl.n	800e42a <__smakebuf_r+0x1c>
 800e41a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e41e:	6023      	str	r3, [r4, #0]
 800e420:	6123      	str	r3, [r4, #16]
 800e422:	2301      	movs	r3, #1
 800e424:	6163      	str	r3, [r4, #20]
 800e426:	b003      	add	sp, #12
 800e428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e42a:	466a      	mov	r2, sp
 800e42c:	ab01      	add	r3, sp, #4
 800e42e:	f7ff ffc9 	bl	800e3c4 <__swhatbuf_r>
 800e432:	9f00      	ldr	r7, [sp, #0]
 800e434:	4605      	mov	r5, r0
 800e436:	4639      	mov	r1, r7
 800e438:	4630      	mov	r0, r6
 800e43a:	f7ff fb0b 	bl	800da54 <_malloc_r>
 800e43e:	b948      	cbnz	r0, 800e454 <__smakebuf_r+0x46>
 800e440:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e444:	059a      	lsls	r2, r3, #22
 800e446:	d4ee      	bmi.n	800e426 <__smakebuf_r+0x18>
 800e448:	f023 0303 	bic.w	r3, r3, #3
 800e44c:	f043 0302 	orr.w	r3, r3, #2
 800e450:	81a3      	strh	r3, [r4, #12]
 800e452:	e7e2      	b.n	800e41a <__smakebuf_r+0xc>
 800e454:	89a3      	ldrh	r3, [r4, #12]
 800e456:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e45a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e45e:	81a3      	strh	r3, [r4, #12]
 800e460:	9b01      	ldr	r3, [sp, #4]
 800e462:	6020      	str	r0, [r4, #0]
 800e464:	b15b      	cbz	r3, 800e47e <__smakebuf_r+0x70>
 800e466:	4630      	mov	r0, r6
 800e468:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e46c:	f000 f81e 	bl	800e4ac <_isatty_r>
 800e470:	b128      	cbz	r0, 800e47e <__smakebuf_r+0x70>
 800e472:	89a3      	ldrh	r3, [r4, #12]
 800e474:	f023 0303 	bic.w	r3, r3, #3
 800e478:	f043 0301 	orr.w	r3, r3, #1
 800e47c:	81a3      	strh	r3, [r4, #12]
 800e47e:	89a3      	ldrh	r3, [r4, #12]
 800e480:	431d      	orrs	r5, r3
 800e482:	81a5      	strh	r5, [r4, #12]
 800e484:	e7cf      	b.n	800e426 <__smakebuf_r+0x18>
	...

0800e488 <_fstat_r>:
 800e488:	b538      	push	{r3, r4, r5, lr}
 800e48a:	2300      	movs	r3, #0
 800e48c:	4d06      	ldr	r5, [pc, #24]	@ (800e4a8 <_fstat_r+0x20>)
 800e48e:	4604      	mov	r4, r0
 800e490:	4608      	mov	r0, r1
 800e492:	4611      	mov	r1, r2
 800e494:	602b      	str	r3, [r5, #0]
 800e496:	f7f2 faf9 	bl	8000a8c <_fstat>
 800e49a:	1c43      	adds	r3, r0, #1
 800e49c:	d102      	bne.n	800e4a4 <_fstat_r+0x1c>
 800e49e:	682b      	ldr	r3, [r5, #0]
 800e4a0:	b103      	cbz	r3, 800e4a4 <_fstat_r+0x1c>
 800e4a2:	6023      	str	r3, [r4, #0]
 800e4a4:	bd38      	pop	{r3, r4, r5, pc}
 800e4a6:	bf00      	nop
 800e4a8:	20006ee0 	.word	0x20006ee0

0800e4ac <_isatty_r>:
 800e4ac:	b538      	push	{r3, r4, r5, lr}
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	4d05      	ldr	r5, [pc, #20]	@ (800e4c8 <_isatty_r+0x1c>)
 800e4b2:	4604      	mov	r4, r0
 800e4b4:	4608      	mov	r0, r1
 800e4b6:	602b      	str	r3, [r5, #0]
 800e4b8:	f7f2 faf7 	bl	8000aaa <_isatty>
 800e4bc:	1c43      	adds	r3, r0, #1
 800e4be:	d102      	bne.n	800e4c6 <_isatty_r+0x1a>
 800e4c0:	682b      	ldr	r3, [r5, #0]
 800e4c2:	b103      	cbz	r3, 800e4c6 <_isatty_r+0x1a>
 800e4c4:	6023      	str	r3, [r4, #0]
 800e4c6:	bd38      	pop	{r3, r4, r5, pc}
 800e4c8:	20006ee0 	.word	0x20006ee0

0800e4cc <_init>:
 800e4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4ce:	bf00      	nop
 800e4d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4d2:	bc08      	pop	{r3}
 800e4d4:	469e      	mov	lr, r3
 800e4d6:	4770      	bx	lr

0800e4d8 <_fini>:
 800e4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4da:	bf00      	nop
 800e4dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4de:	bc08      	pop	{r3}
 800e4e0:	469e      	mov	lr, r3
 800e4e2:	4770      	bx	lr
